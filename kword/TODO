
TODO-List:
----------

Bugs; in order or importance:

- Type 1 line. Press enter after first character, 
  press backspace, press enter again. Press backspace again. 
  Rest of text is gone until you press enter gain.

- Refuse to delete anchor.
- When deleting table delete anchor
- Revert resizing policy. Implement minimum size of frames.

- Implement correct printing of floating tables.

- Frame Run around is the wrong way around.. Framedia does it correct now. 
  still needs to be done correctly in kword_doc
- deleting pictures-frames should also delete the picture (from the tar) (imageCollection)
  (we have a problem with reference counts in the creation of a new image)
- Setting a paragraph to a new style should override ALL settings, including size of the characters.
- reconnect dumps sometimes.
- When deleting text, empty pages are not removed
- When removing text in a table cell shrink table cells
- Anchor is not redrawn if page scrolls

Missing or incomplete stuff:
----------------------------------------
- Even/odd pages
 - Add SheetSide config in framedia 
 - implement copy of 'copy-frames' in appendPage method
- split (table) cells needs to be implementated
- Tab in the parag layout dialog for configuration of tabulators (adding/deleting/modifying them)
- Preview widget for numbering
- Preview widget for style templates editor
- Tabulators don't work correctly in "Blocksatz"
- Sideheads
- split frame
- Toolbars in the settings menu are not updated if they are not shown/reshown
- The borders dialog doesnt work (settings are not used)
- runAroundGap does nothing


cleanup:
--------
- isAHeader is a global function; move to frameset class.
- isAFooter is a global function; move to frameset class.
- what does int frameset in the fc.cc do??
- char.cc uses C-type strings, passing around *char pointers without destructors etc. Very ugly.
- char.h does a define "#define kwchar QChar", lets replace all kwchar with QChars in the sources..
- load and save functions in frame and frameset are mixed up. Should move them to right position
  to save code duplication.
- All enums should belong to a class, making it save for namespace clashes. Class::Enum-value 
  should be used everywhere
- move KWPage::createResizeHandles and KWPage::removeResizeHandles to the frame class
- A large portion of (at least page.cc) kword uses integets to store framesets and frames, using
  doc->getFrame(int) to retrieve the pointer.
  I would suggest using pointers there, and only storing the frame, since the frameset can be 
  retrieved with frame->getFrameSet();


Optimations:
----------------------------------------
- Make recalculation of frames (after resizing frames) and calculation of text running around 
  frames much FASTER. Espacially the recalculation of the whole text in these cases is very 
  slow in long docs


The whole images thing needs to be rethought:
-----------------------------------------
Included files (pictures/parts/formula's)
-----------------------------------------
- Pictures should never be rescaled if that means that there is image loss at printing time
- It should be possible to keep files external. Kword should also notice a changed file
  (preferably at runtime) and reload it.

- In kword we have an image object. 
- we also have a imageCollection object.


Proposal
--------

On placing a picture or part we get an insert dialog. This dialog could be changed 
to include a checkbox "keep file external". If changing the file-dia is a problem 
we could show a dialog just after the file-dia.

On placing the picture in the document we should create a thumbnail on screen at the 
screensize. This counts for both internal and external pictures. With todays computers 
I am not really concerned with filesizes anymore, besides; it would probably be about 30k max. 
They will be saved as:
 tar:pictures/

The internal pictures should be read into memory and saved to the tar in a dir like
  tar:raw-pictures/ 
and
  tar:raw-parts/


When another instance of the same picture/part is placed we should just use
the same object we allready use. We could consider creating a newly
scaled thumb if the sizes differ a lot. The raw file will stay untouched.
 
 
kofficecore/ImageContainer.cc
 manages a picture. You can ask it for thumbs, location, the raw file
 and it has a save function.
 - ImageContainer(QString filename, bool external);
    constructor.
    if filename starts with tar or external is set: store filename.
    otherwise read raw file in mem.
 - int getRefCount()
    keep internal usage count
 - koImage* getThumb(QSize);
    look in tar if there was a thumb. Otherwise create one of selected size.
    note that koImage also does referece checking.
 - void incCount();
    for usage count
 - void decCount();
    for usage count
 - koRawImage* getImage();
    Return the rawimage (in a stream??) either from mem or from disk.
 - save();
    well, it saves.
 
kofficecore/PartContainer.cc
 manages a part. You can as it for location (key), the part and it
 has a save function
 - PartContainer
    constructor
 - getRefCount
 - void incCount()
 - void decCount();
 - koSomething* getPart();
 - save();
 
kofficeCore/ImageCollection.cc
 - ImageCollection();
 - ImageConatainer* getImage(filename);
    return imageContainer, if one doesnt exist create it first.
 - int getCount();
    return number of images in the collection
 - void removeImage(filename);
    remove image from collection
 - void load();
    load all imageContainers
 - void save();
    save all imageContainers
 
Note that you can not resize an image, just the thumbs.
Note also that the 'key' is its filename. With full path that makes it http://
or file:// or tar:// for remote, local, internal storage respectively.
 
Last note: this proposal does not propose any gui/printing issues at all.

Reginald Stadlbauer <reggie@kde.org>
Thomas Zander <zander@earthling.net>

