<!--    $Id$

This is an XML document type definition (DTD) for the KWord document format.
Written by Kalle Dalheimer <kalle@kde.org> with (obviously) input from KWord's
author Reginald Stadlbauer <reggie@kde.org>.

Kword DTD version 2 has been created by Thomas Zander, but only small adjustments from
the original version were made.


About the version
=================

This is the DTD version 2, for KWord-1.0.
It has changed a bit since the DTD version 1, for KWord-0.8 (the one included in KDE-2.0)
KWord will read the previous versions of its own file format but this is considered
the most complete format, we highly encourage you to use this format.


KWord overview
==============

The main structure of each KWord document is a header and a body. The header
contains things like the paper size, the margins and so on.

The body is organised around the concept of frames. You might have noticed
that you can do nearly everything with the frames in your KWord document (e.g.
move them around, interlock them, let your text "flow" through them, etc.). To
achieve this flexibility, the body actually has to store the data in a
hierarchy including framesets, frames, paragraphs, and so on.

Framesets hold the actual text. Frames represent the rectangles in which this
text is "flowed".


Some basic notes on XML
=======================

- All kinds of numbers are stored like this: foo="1" (between " and " :)

- A rational number looks like this: width="1.03" (note: the '.' separates
integer and fractional parts).

- <XYZ foo="100" bar="0"/> equals <XYZ foo="100" bar="0"></XYZ>

- Unicode-letters (UTF-8 compressed) are used to store the text

- Some special characters ('<', '>', '&') are "escaped" ('&lt;', '&gt;', '&amp;')

- Please launch Kword and save an empty file - it is much easier to follow
this documentation if you wade through an (almost empty) example document.

- The XML begins with a special tag like this:

    <?xml version="1.0" encoding="UTF-8"?>

Each file starts with this tag. Note: You must not "close" this tag (i.e.
don't put a </?xml...> at the end of the file!).

-->

<!--    A KWord document consists of a paper description, a number of
        attributes and the framesets which contain the actual data. It
        can also define a number of styles.

        Attributes:

            editor:         The program this file was written with.

            mime:           The MIME type (must always have the value
                            application/x-kword).

            syntaxVersion:  Integer version of the syntax in the remainder of
                            this file:

                                1...as for KWord 0.8 (KOffice-1.0)
                                2...as for KWord 1.1
                            KWord can read all previous versions, but always saves in the latest.
-->
<!ELEMENT DOC
    (PAPER, ATTRIBUTES, FRAMESETS, STYLES, PIXMAPS, (EMBEDDED*))>
<!ATTLIST DOC
    editor CDATA #IMPLIED
    mime CDATA "application/x-kword"
    syntaxVersion CDATA #REQUIRED>

<!--    Describes the page format. Can have no or one PAPERBORDERS child that
        describes the margins. Normally this is the first tag in the "header".

        Attributes:

            format:         integer value for the page format:

                                0...DIN A3
                                1...DIN A4
                                2...DIN A5
                                3...US LETTER
                                4...US LEGAL
                                5...SCREEN (screen sized)
                                6...CUSTOM (just enter your preferred size)
                                7...DIN B5
                                8...US EXECUTIVE
                                etc. See the enum in koffice/lib/kofficeui/koGlobal.h

            width:          width in pt.

            height:         height in pt.

            orientation:    page orientation:

                                0...Portrait
                                1...Landscape

            columns:        the number of columns (only in wordprocessing
                            mode).

            columnspacing:  the gap (in pt) between the columns (only in
                            wordprocessing mode).

            hType:          header style:

                                0...same on all pages
                                2...different on first and other pages
                                3...different on even and odd pages

            fType:          footer style:

                                0...same on all pages
                                2...different on first and other pages
                                3...different on even and odd pages

            spHeadBody:     distance (in pt) between headers and the text body (only in
                            wordprocessing mode).

            spFootBody:     distance (in pt) between footers and the text body (only in
                            wordprocessing mode).
-->
<!ELEMENT PAPER
    (PAPERBORDERS?)>
<!ATTLIST PAPER
    format CDATA #REQUIRED
    width CDATA #REQUIRED
    height CDATA #REQUIRED
    orientation CDATA #REQUIRED
    columns CDATA #REQUIRED
    columnspacing CDATA #REQUIRED
    hType CDATA #IMPLIED
    fType CDATA #IMPLIED
    spHeadBody CDATA #IMPLIED
    spFootBody CDATA #IMPLIED>


<!--    Describes the margins of the page.

        Attributes:

            left:           left margin in pt.

            right:          right margin in pt.

            top:            top margin in pt.

            bottom:         bottom margin in pt.
-->
<!ELEMENT PAPERBORDERS
    EMPTY>
<!ATTLIST PAPERBORDERS
    left CDATA #REQUIRED
    right CDATA #REQUIRED
    top CDATA #REQUIRED
    bottom CDATA #REQUIRED>


<!--    Contains general attributes of the document. Has no children.

        Attributes:

            processing:     0..."Normal" document (Wordprocessing)
                            1...DTP-document (DTPing)

            standardpage:   currently ignored.

            hasHeader:      0...the document has no headers
                            1...the document has headers

            hasFooter:      0...the document has no footers
                            1...the document has footers

            unit:           Basic unit for positioning, ruler,...
                            This has no influence on the units in this document, only on what the user sees.
                                mm...
                                pt...
                                inch...
            hasTOC:         0...the document has no TOC
                            1...the document has TOC
-->
<!ELEMENT ATTRIBUTES
    EMPTY>
<!ATTLIST ATTRIBUTES
    processing CDATA #REQUIRED
    standardpage CDATA #IMPLIED
    hasHeader CDATA #IMPLIED
    hasFooter CDATA #IMPLIED
    unit CDATA #IMPLIED
    hasTOC CDATA #IMPLIED>


<!--    Container that has a number of FRAMESET children.
-->
<!ELEMENT FRAMESETS
    (FRAMESET+)>


<!--    A frameset that bundles a number of FRAME elements (at least one).
        In addition it can have a more specific element, depending on frameType.

        Attributes:

            frameType:      0...Base frame (for internal use only!!!)
                            1...Text frame (contains PARAGRAPH tags)
                            2...Picture frame (contains an IMAGE tag)
                            3...Part frame (defined in EMBEDDED at the doc level)
                            4...Formula frame (contains a FORMULA tag)
                            5...Clipart frame (contains a CLIPART tag)

            frameInfo:      0...normal text
                            1...header for first page
                            2...header for odd pages
                            3...header for even pages
                            4...footer for first pages
                            5...footer for odd pages,
                            6...footer for even pages
                            7...footnote

            removable:      Whether the header-frame is removable or not:
                            Used in tables where header cells on new pages are 
                            auto created with this set to 1.
                                0...no (default)
                                1...yes

            visible:        Whether the frame is visible or not:

                                0...no
                                1...yes (default)

            grpMgr:         If present, indicates that this frameset is
                            a cell in a table. The value is the name of the
                            group manager for this table. (i.e. If this
                            frameset "belongs" to a table the position and the
                            size are contolled by a group manager (one for
                            each table)).

            row:            Position in the table (only for tables). Index
                            starts at 0. The index for the next row must equal
                            the index for the current row, plus the
                            value of "rows" for the current row.

            col:            Ditto for columns.

            rows:           Size of this cell in rows (only for tables).
                            can be 1 or greater.

            cols:           Ditto for columns.

-->
<!ELEMENT FRAMESET
    (FRAME|PARAGRAPH|IMAGE|CLIPART|FORMULA)*>  <!-- missing: defining FORMULA -->
<!ATTLIST FRAMESET
    name CDATA #REQUIRED
    frameType CDATA #REQUIRED
    frameInfo CDATA #REQUIRED
    removable CDATA #IMPLIED
    visible CDATA #IMPLIED
    grpMgr CDATA #IMPLIED
    row CDATA #IMPLIED
    col CDATA #IMPLIED
    rows CDATA #IMPLIED
    cols CDATA #IMPLIED>

<!ELEMENT FRAME
    EMPTY>

<!--    Describes a frame of a frameset.

        Attributes:

            right, left, top,
            bottom:             absolute coordinates in pt.

            runaround:          0...No run around
                                1...Frame repels text in overlapping frames
                                2...Text in overlapping frames will avoid the
                                    complete horizontal space of this frame.

            runaroundGap:       when runaround is 1 specify here the distance (in pt)
                                between overlapping frames and runaround text

            autoCreateNewFrame: What to do if the text is bigger than the frame allows:
                                0...AutoExtendFrame
                                1...AutoCreateNewFrame (use this for the normal text body)
                                2...Ignore extra text

            newFrameBehaviour:  0...On creating a new page, reconnect frame
                                    to current frameset (use this for the normal text body).
                                1...Don't create a followup frame on the new
                                    page.
                                2...This frame will be shown on the new page
                                    as well (with the same content)

            copy:               0...Not a copy
                                1...This frame is a copy of the previous frame in this frameset
                                (default is 1 for headers and footers and 0 for the others)

            sheetSide:          0...AnySide
                                1...this frame will only be shown on odd pages
                                2...this frame will only be shown on even pages

  // ## Missing: lWidth, rWidth, tWidth, bWidth  (pt)
  //    lRed, lGreen, lBlue
  //    rRed, rGreen, rBlue
  //    tRed, tGreen, tBlue
  //    bRed, bGreen, bBlue
  //    lStyle, rStyle, tStyle, bStyle
  //    bkRed, bkGreen, bkBlue
  //    bleftpt, brightpt, btoppt, bbottompt
-->
<!ATTLIST FRAME
    left CDATA #REQUIRED
    right CDATA #REQUIRED
    top CDATA #REQUIRED
    bottom CDATA #REQUIRED
    runaround CDATA #IMPLIED
    runaroundGap CDATA #IMPLIED
    autoCreateNewFrame CDATA #REQUIRED
    newFrameBehaviour CDATA #REQUIRED
    copy CDATA #IMPLIED>

<!ELEMENT PARAGRAPH
    (TEXT|FORMATS|LAYOUT)*>

<!--    Just guess :) The text is stored as UTF-8 compressed Unicode
        glyphs. Note: the format-tags navigate in the text using an index
        which starts at 0 and runs up till it reaches length-1.
-->
<!ELEMENT TEXT
    (#PCDATA)>

<!--    List of formats that apply to a given paragraph
-->
<!ELEMENT FORMATS
    (FORMAT*)>

<!--    A format tag describes the format of one or more characters in the
        text.

        Attributes:

            id:                 type of format information:

                                    0...none (mustn't be in a file)
                                    1..."normal" text
                                    2...a picture - in that case, only IMAGE is specified
                                    3...tabulator [Might become '\t' in the text instead. To be determined.]
                                    4...a variable - in that case, only VARIABLE is specified
                                    5...a footnote - ...
                                    6...an anchor for a floating frame - in that case, only ANCHOR is specified.

            pos:                position where the format starts. This is a
                                zero-based index into the text of the
                                paragraph.

            len:                number of characters after pos for which the
                                format is used. 1 for all ids except "normal text".

        When FORMAT is used to specify the format of a style, pos and len are omitted.
-->
<!ELEMENT FORMAT
    (COLOR|FONT|SIZE|WEIGHT|ITALIC|UNDERLINE|STRIKEOUT|CHARSET|VERTALIGN|ANCHOR|IMAGE|VARIABLE)*>
<!ATTLIST FORMAT
    id CDATA #REQUIRED
    pos CDATA #IMPLIED
    len CDATA #IMPLIED>

<!--
        A style is a global setting that is used for all paragraphs which use that
        style. As the markup is stored in one place (the style) changing the markup
        throughout the document is simply a task of changing one or two styles.
        Highly recommended for structured documents.
-->
<!ELEMENT STYLES
    (STYLE*)>
<!ELEMENT STYLE
    (NAME|FOLLOWING|
     FLOW|INDENTS|OFFSETS|LINESPACING|PAGEBREAKING|
     LEFTBORDER|RIGHTBORDER|TOPBORDER|BOTTOMBORDER|
     COUNTER|FORMAT|TABULATOR)*>

<!ELEMENT COLOR
    EMPTY>
<!ATTLIST COLOR
    red CDATA #REQUIRED
    green CDATA #REQUIRED
    blue CDATA #REQUIRED>

<!--
        name is the family name. Don't include fontsizes or bold, that is put in another tag.
-->
<!ELEMENT FONT
    EMPTY>
<!ATTLIST FONT
    name CDATA #REQUIRED>

<!-- SIZE
        When size is used in a format the size is in points.
-->
<!ELEMENT SIZE
    EMPTY>
<!ATTLIST SIZE
    value CDATA #REQUIRED>

<!-- WEIGHT
        Weight of a font is it's Boldness. Look at the QFont weight description for precise
        numbers. Use normal=50, bold=75.
-->
<!ELEMENT WEIGHT
    EMPTY>
<!ATTLIST WEIGHT
    value CDATA #REQUIRED>

<!-- ITALIC
        Value is either 0 or 1 with 1=true and 0=false
-->
<!ELEMENT ITALIC
    EMPTY>
<!ATTLIST ITALIC
    value CDATA #REQUIRED>

<!-- UNDERLINE
        Value is either 0 or 1 with 1=true and 0=false
-->
<!ELEMENT UNDERLINE
    EMPTY>
<!ATTLIST UNDERLINE
    value CDATA #REQUIRED>

<!-- STRIKEOUT
        Value is either 0 or 1 with 1=true and 0=false
-->
<!ELEMENT STRIKEOUT
    EMPTY>
<!ATTLIST STRIKEOUT
    value CDATA #REQUIRED>

<!-- VERTALIGN
            Super/sub script.
            0 = Normal
            1 = Subscript 
            2 = Superscript
-->
<!ELEMENT VERTALIGN
    EMPTY>
<!ATTLIST VERTALIGN
    value CDATA #REQUIRED>

<!-- CHARSET
            Font charset
            See "man qfont" for the meaning of the values.
            If unspecified, the charset globally set in KControl's language module is applied.
-->
<!ELEMENT CHARSET
    EMPTY>
<!ATTLIST CHARSET
    value CDATA #REQUIRED>

<!-- LAYOUT
        A layout holds all the attributes related to a paragraph,
        other than its text and formatting.
        Each of the child elements can be present only once, except
        TABULATOR which can be repeated.
-->
<!ELEMENT LAYOUT
    (NAME|FLOW|INDENTS|OFFSETS|LINESPACING|PAGEBREAKING|
     LEFTBORDER|RIGHTBORDER|TOPBORDER|BOTTOMBORDER|
     COUNTER|FORMAT|TABULATOR)*>

<!-- NAME
        The name of a style.
        If inside a <STYLE> tag, this defines the name of the style.
        If inside a <LAYOUT> tag, this refers to an existing style,
        to be used for this paragraph.
-->
<!ELEMENT NAME
    EMPTY>
<!ATTLIST NAME
    value CDATA #REQUIRED>

<!-- FOLLOWING 
        The FOLLOWING tag is a styles tag. You can only embed it in a style.
        With this tag you can tell kword to switch to the style 'name' after
        enter was pressed and the current style was used.
        Example: Style H1 has the <following name="body"> tag. When the user is
        finished typing the header tag and presses enter kword switches to the 
        style 'body'
        The style-name given should be available.
-->
<!ELEMENT FOLLOWING
    EMPTY>
<!ATTLIST FOLLOWING
    name CDATA #REQUIRED>

<!-- FLOW
        FLOW is a paragraph and style tag, that determines the alignment of the text.
        align's value is one of: 'left', 'right', 'center', 'justify'
-->
<!ELEMENT FLOW
    EMPTY>
<!ATTLIST FLOW
    align CDATA #REQUIRED>

<!-- INDENTS
        first: indent (pt) from the left border (of the frame) of the first line of a paragraph
        left: indent (pt) that is used for the other lines in a paragraph.
        right: indent (pt) on the right of all lines in the paragraph
-->
<!ELEMENT INDENTS
    EMPTY>
<!ATTLIST INDENTS
    first CDATA #REQUIRED
    left CDATA #REQUIRED
    right CDATA #REQUIRED>

<!-- OFFSETS
        before: space before the paragraph, or "head offset" (KWord-0.8), aka "top margin" (KWord-1.0) (pt)
        after: space after the paragraph, or "foot offset" (KWord-0.8), aka "bottom margin" (KWord-1.0) (pt)
-->
<!ELEMENT OFFSETS
    EMPTY>
<!ATTLIST OFFSETS
    before CDATA #IMPLIED
    after CDATA #IMPLIED>

<!-- 
        A paragraph and a style can have counter data.
        The document will do the counting of the paragraphs that use this.

        type:   0 = None
                1 = Numeral
                2 = Alphabetical
                3 = Alphabetical uppercase
                4 = Roman numbering
                5 = Roman numbering uppercase
                6 = Custom bullet (one char, set by the 'bullet' attribute)
                7 = Custom (complex string, see kword's dialog)
                8 = Circle bullet
                9 = Square bullet
                10 = Disc bullet

        depth   The level of the numbering. 
                Depth of 0 means the major numbering. (1, 2, 3...)
                Depth of 1 is 1.1, 1.2, 1.3 etc.

        start   The first used number in the numbering (usually 1).
        numberingtype
                0 = list numbering, 1 = chapter numbering.
                List numbering starts at <start> everytime another list is used (everytime a 
                non numbering paragraph has been used)
                Chapter numbering is used throughout the whole document (in future throughout books)
        lefttext
                The text that is printed left of the first numeral
        righttext
                The text that is printed right of the last numeral
                A usual value for this one is "." (dot).

        bullet  The character code (in UTF-8) that is the custom bullet (for type=6)
        bulletfont
                The font to use for the custom bullet can be found in (use "symbol" if in doubt)
        customdef
                Definition of a custom counter - not supported yet
-->
<!ELEMENT COUNTER
    EMPTY>
<!ATTLIST COUNTER
    type CDATA #REQUIRED
    depth CDATA #REQUIRED
    bullet CDATA #IMPLIED
    start CDATA #IMPLIED
    numberingtype CDATA #REQUIRED
    lefttext CDATA #IMPLIED
    righttext CDATA #IMPLIED
    bulletfont CDATA #IMPLIED
    customdef CDATA #IMPLIED>

<!-- 
        The space to be added between two consecutive lines in a given paragraph.
        value in points. Can also be "oneandhalf" for 1.5 lines and "double".
-->
<!ELEMENT LINESPACING
    EMPTY>
<!ATTLIST LINESPACING
    value CDATA #REQUIRED>

<!--
        Attributes relating to the way paragraphs are broken at the end of a frame/page.
        If this element isn't specified, the default is to break between lines of a parag.

        linesTogether: if "true", all the lines of a given paragraph remain together.
        hardFrameBreak: if "true", this paragraph is always at the beginning of a frame.
        hardFrameBreakAfter: if "true", this paragraph is always the last in the frame.

        Future extensions: keepWithPrevious, keepWithNext
-->
<!ELEMENT PAGEBREAKING
    EMPTY>
<!ATTLIST PAGEBREAKING
    linesTogether CDATA #REQUIRED
    hardFrameBreak CDATA #REQUIRED
    hardFrameBreakAfter CDATA #REQUIRED>

<!--
        The borders can be used on a frame and on a paragraph.
        the border has a color, displayed in the RGB value. 
        The width is in points.
        Style   0 = solid
                1 = dashes
                2 = dots
                3 = dash - dot patterns
                4 = dash dot dot patterns
-->
<!ELEMENT LEFTBORDER
    EMPTY>
<!ATTLIST LEFTBORDER
    red CDATA #REQUIRED
    green CDATA #REQUIRED
    blue CDATA #REQUIRED
    style CDATA #REQUIRED
    width CDATA #REQUIRED>
<!ELEMENT RIGHTBORDER
    EMPTY>
<!ATTLIST RIGHTBORDER
    red CDATA #REQUIRED
    green CDATA #REQUIRED
    blue CDATA #REQUIRED
    style CDATA #REQUIRED
    width CDATA #REQUIRED>
<!ELEMENT TOPBORDER
    EMPTY>
<!ATTLIST TOPBORDER
    red CDATA #REQUIRED
    green CDATA #REQUIRED
    blue CDATA #REQUIRED
    style CDATA #REQUIRED
    width CDATA #REQUIRED>
<!ELEMENT BOTTOMBORDER
    EMPTY>
<!ATTLIST BOTTOMBORDER
    red CDATA #REQUIRED
    green CDATA #REQUIRED
    blue CDATA #REQUIRED
    style CDATA #REQUIRED
    width CDATA #REQUIRED>

<!--    Defines the position of a tabulation
        Attributes:

            type:               0 .. left
                                1 .. center
                                2 .. right
                                3 .. alignment of decimal point

            ptpos:              Position of the tabulation, in pt
-->
<!ELEMENT TABULATOR
    EMPTY>
<!ATTLIST TABULATOR
    type CDATA #REQUIRED
    ptpos CDATA #REQUIRED>

<!--    An anchor describes an object which is anchored.

        Attributes:

            type:               What kind of object is being anchored?

                                    grpMgr: a table [deprecated]
                                    frameset: a frameset [default]

            instance:           An identifier that uniquely names the
                                particular instance of the type of object
                                being anchored.
                                For framesets, this is the frameset number in the doc.
-->
<!ELEMENT ANCHOR
    EMPTY>
<!ATTLIST ANCHOR
    type CDATA #REQUIRED
    instance CDATA #REQUIRED>

<!--    Definition of an image - contains only one element, the key to the image.
-->
<!ELEMENT IMAGE
    (KEY)>
<!ATTLIST IMAGE
    keepAspectRatio CDATA #REQUIRED>

<!--    Definition of a clipart - contains only one element, the key to the clipart.
-->
<!ELEMENT CLIPART
    (KEY)>

<!--    Variable
-->
<!ELEMENT VARIABLE
    (TYPE,PGNUM,DATE,TIME,CUSTOM,SERIALLETTER,FIELD)>

<!--    Variable type
        0... Date (uses DATE to save it)
        1... [currently unused]
        2... Time fixed (uses TIME to save it)
        3... [currently unused]
        4... Page number / number of pages (uses PGNUM to save it)
        5... [currently unused]
        6... Custom (uses CUSTOM to save it)
        7... Serial Letter (uses SERIALLETTER to save it)
        8... Field (uses FIELD to save it)
-->
<!ELEMENT TYPE
    EMPTY>
<!ATTLIST TYPE
    type CDATA #REQUIRED>

<!-- TODO PGNUM,DATE,TIME,CUSTOM,SERIALLETTER -->
<!-- TODO modifiers in DATE and TIME - see #24242 -->

<!--    A "field" variable (property of the document)
        subtype... Field subtype:
                   0... Filename
                   1... Directory name
                   2... Author (as saved in documentinfo.xml)
                   3... Email (as saved in documentinfo.xml)
                   4... Company Name (as saved in documentinfo.xml)
                   [room for more 'author' page info fields]
                   10.. Document Title (as saved in documentinfo.xml)
                   11.. Document Abstract (as saved in documentinfo.xml)

        value... the value of the field (text)
-->
<!ELEMENT FIELD
    EMPTY>
<!ATTLIST FIELD
    subtype CDATA #REQUIRED
    value CDATA #REQUIRED>

<!--
        Pixmap collection. This list holds the keys of all the pixmaps
        used by this document (by picture framesets), in the order in which
        they are stored in the store (under pictures/).
-->
<!ELEMENT PIXMAPS
    (KEY)*>
<!--
        The key mapping to one pixmap.
        [Old attribute was named "key" (the filename).]
        "name" is the relative path to the image in the store (e.g. picture/picture1.ext)
-->
<!ELEMENT KEY
    EMPTY>
<!ATTLIST KEY
    filename CDATA #REQUIRED
    year CDATA #REQUIRED
    month CDATA #REQUIRED
    day CDATA #REQUIRED
    hour CDATA #REQUIRED
    minute CDATA #REQUIRED
    second CDATA #REQUIRED
    msec CDATA #REQUIRED
    name CDATA #REQUIRED>

<!--
        Embedded object
-->
<!ELEMENT EMBEDDED
    (OBJECT,SETTINGS)>

<!--
        Standard part of the embedded object (part, url and position)
        mime    the mimetype, e.x. application/x-presenter
        url     the url, either external or internal (tar:/N for partN/maindoc.xml)
-->
<!ELEMENT OBJECT
    (RECT)>
<!ATTLIST OBJECT
    mime CDATA #REQUIRED
    url CDATA #REQUIRED>
<!--
        Position of the embedded object
-->
<!ELEMENT RECT
    EMPTY>
<!ATTLIST RECT
    x CDATA #REQUIRED
    y CDATA #REQUIRED
    w CDATA #REQUIRED
    h CDATA #REQUIRED>

<!--
        Additionnal attributes of the embedded object.
        In KWord's case, it's the definition of the frame around the object,
        and the name of the part-frameset.
-->
<!ELEMENT SETTINGS
    (FRAME)>
<!ATTLIST SETTINGS
    name CDATA #REQUIRED>
