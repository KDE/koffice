Overall design
==============

* The document (KWDocument) has a list of framesets (KWFrameSet)
Currently the order of the framesets in the list defines the z-order (which frameset
is on top of which one), but this ought to be changed after 1.1 (with an int in the 
frameset for instance)

* Framesets include: text frameset, picture/clipart frameset, table frameset etc.

* A frameset has a list of frames, KWFrame. A KWFrame is basically a rectangle
(KoRect) with a bunch of attributes. 
The frameset contains the contents, like the text or a picture.
The frames visualize the contents of the frameset. 
Imagine a 10 pages document, with 1 text-frameset and 10 frames, because our
example author wants to have one frame per page.  This means that there is one 
text, and the frames define where on the pages this text is displayed.

* About text framesets: they hold a text document (KWTextDocument, which is
a QTextDocument from the QRichText classes - more on QRT later).

* About Tables; one table is a KWTableFrameset. This tableframeset contains
all the cells as its frames. But because the cells have a different text per
cell, we contain the cells in their own KWTextFrameset.

   KWTableFrameSet
    |           |
    |        TextFrames
  Cells               +----------+
     +--+                        |
        | ---> KWTextFrameSet    |
        |          +-> KWFrame <-+
        |                        |
        | ---> KWTextFrameSet    |
        |          +-> KWFrame <-+
        |                        |
        + ---> KWTextFrameSet    |
                   +-> KWFrame <-+

Edit objects are objects that are created to edit a given frameset.
There is one type of edit object per type of frameset. For instance: KWTextFrameSetEdit.
In a given view (canvas), there is only one edit object at a given moment
(for text objects, it's the one with the cursor).

Custom items
============
A custom item is anything (like an inline frame, a variable etc.) that
is treated as a special character. QTextCustomItem is the base class for
it, we have KoTextCustomItem in kotext.

Inline frames are one kind of custom item. The frame (and its englobing
frameset) exist as usual, but a KWAnchor instance is created, inserted
into the text, and linked to the frame. The anchor always has the same size
as the frame. When the text is flowed, the anchor is positioned, it tells
the frame to move to the new position.

Painting
========
Here's how the painting (drawing the stuff on screen, and on printer) works:
Each frameset is responsible for drawing itself. The base class, KWFrameSet,
handles the generic code for iterating through the frames, applying the
"frame is a copy" stuff, drawing the borders, etc. So each specific frameset
class only has to implement drawFrame (exception for KWTableFrameset though).

Painting of text: KWTextFrameset paints the text for each frame, calling
KoTextDocument::drawWYSIWYG (with flags for "only the changed paragraphs" etc).
When printing this method delegates to drawWithoutDoubleBuffer.
Both methods iterate through the paragraphs, and call drawParagWYSIWYG for each
one to be redrawn. This method implements the double-buffering, paints the
background color and the space on the right of the paragraph, and calls
QTextParag::paint(). Its role is to draw series of characters with the same
formatting at once (in one go). For each set of chars to be painted,
KoTextParag::drawParagString is called.

In short:
KWFrame::drawContents -> KWTextFrameSet::drawFrame
 -> KoTextDocument::drawWYSIWYG -> KoTextDocument::drawParagWYSIWYG
 -> KoTextParag::paint -> KoTextParag::drawParagString -> KoTextParag::drawParagStringInternal

The cursor is also drawn by KoTextParag::paint, which calls KoTextParag::drawCursor.
The blinking cursor is implemented in KoTextView, which calls a virtual
drawCursor() method, implemented in KWTextFrameSetEdit.

Coordinate systems
==================

This is fun; brace yourself

Document:
    All objects have an position on the page which is described in the typographic units
    named points.
    There are 72 points to the inch, and these absolute coordinates simply place your 
    objects on the page. 
    An example; a frame is positioned on paper some 35mm from the left border of the paper and
    some 35mm from the top of the first page. the absolute position of that frame is 100, 100
    since 100pt equals 35mm
    Note that positioning is done from page1, so when a frame is moved from page 1 to page 2 it
    simply gets a higher Y coordinate.

Zoomed: (aka Normal)
    Every object on screen has a size, and at different zoom levels we use a different amount
    of pixels to display the same object.
    Our object above has a top-left position of document:(100,100). To determine where
    this is on screen we call KWDocument::zoomItX(xPos) and KWDocument::zoomItY(yPos) to
    retrieve the pixel positioning on screen at the current zoom level. The zoom level
    is stored only in the document (an instance of KWDocument)
    Since we are using pixel values all these values are stored in integers, they should not
    be used to move something around, the absolute coordinate system has to be used for that.

Internal:
    The former two were mostly for objects like frames etc, not for text. Text (the individual
    words and characters) are positioned with the layout coordinates. Layout is similar to the
    Zoomed system, but always uses the same resolution. This resolution is sufficiently high to
    do the layout in integers, and not really loose info.
    Internal coordinates can therefor be converted to Document coordinates with
    KWTextFrameSet::internalToDocument().

    This is the high-resolution unit in which the text layout is done,
    currently set to 1440 DPI. Everything known the QRT classes will be in
    this coordinate system (including the QTextFormats). When painting, we apply
    the current zoom and resolution to find the right font size to use, and we 
    have to catch up with rounding differences. However the position of the words
    (i.e. layout) is the one determined previously in layout units. KoZoomHandler
    offers methods for converting between layout units and zoom-dependent points 
    and pixels.
   
View:
    The same as the zoomed coordinate system, but this one can use multiple pages next to each
    other. So 3 pages horizontal in preview mode is no problem. A frame on page 3 then has a 
    higher coordinate then the same frame on page 1. When converting to Zoomed the 
    coordinates are equals.


Document (pt values, in double, KoPoint, KoRect.)
 |               |
 |               |--KWDocument::zoomIt[XY]   and unzoomIt[XY]
 |               |
 |               V
 |    Zoomed coordinates (pixel values, in int, QPoint, QRect) 
 |    This is also called the "Normal" coordinate system.
 |         |
 |         |--KWViewMode::normalToView
 |         V
 |    View Mode (pixels values, but e.g. pages are re-arranged)
 |    That's also the KWCanvas (scrollview)'s contents coordinates.
 |
 |
 |
 | And for text framesets, there's also :
 |
 |--KWTextFrameSet::documentToInternal
 V
Internal coordinates (the coordinates given to QRT - in "layout units")


Wow, you managed to read this until the end ? Good. "GOTO 10" now ;)

David Faure <david@mandrakesoft.com>
