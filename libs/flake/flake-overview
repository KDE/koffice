ThomasZ> I'll give you a little lowdown.  (so all please listen for a sec.)
ThomasZ> Flake has shapes.  A shape is a rectangle or a text or whatever.  A shape paints itself and has content.
ThomasZ> Flake has tools.  Tools get user input. Tools do things on data, tools do things on shapes.
ThomasZ> Both shapes and tools are plugins. So they are independent of applications.
ThomasZ> For example; I have a textshape that paints text.  It comes with a texttool that takes mouse and keyboard events and alters the text that the textshape shows.
ThomasZ> This idea of combining a shape and a text is done in flake by "ID"s .  Each shape has an ID and a tool has an ID.   If they have the same ID they belong together.
ThomasZ> Example;  I select a text shape and the toolbox (yet to be created) will show a icon to activate the text tool.
 Thrain want to ask a question.
ThomasZ> Thrain: yes?
Thrain> how does the shape draw itself?
Thrain> (so: how it know the Canvas, the image or whateverelse it will use as "paper" to draw on)
ThomasZ> Thrain: compare a shape to a widget.  Like a widget it has to implement a paint(QPainter) method to paint itself.  So, just like you can have any type of widget you can imagine you can implement any type of shape.
ThomasZ> Thrain: and a QPainter (that is passed to the shape) knows where it will paint.
ThomasZ> Thrain: does that answer your question?
Thrain> uhm
Thrain> more or less
Thrain> another question
Thrain> then, if I've to use the same code to draw a shape on Karbon and Krita (for example)
Thrain> then also the underlying "object" that the shape is drawn over
Thrain> needs to be the same
ThomasZ> Just like a widget does not know the difference between painting on one app, or another a shape will now know the difference. The flake library will take care of all details.
Thrain> ThomasZ: so the flake library will have "backends" for every "surface"
Thrain> mhmhmh
ThomasZ> Thrain: a canvas, yes.  Each app will have one.
Thrain> KoFlakeCanvas or something like it?
ThomasZ> Each app will have its own canvas; but flake will take care of the painting on that canvas.
ThomasZ> For some more details on the integration;  KWord uses the KoTextShape pretty much.  But naturally kword itself must know more about the text that the shape draws.
ThomasZ> For that there is a UserData object that is added to a shape.  The shape can use that data for painting and the application can use that data for things like getting the text document.
ThomasZ> A userdata is just a base object, so each shape type can just extend the object and do anything with it that it pleases.
BCoppens> (btw: best at the end of this conversation, save the log and put it in svn; but do carry on)
ThomasZ> The reasons for adding that may be a bit hard to explain, but its a solution to a problem that I had in kword.  I'll just mention it and when you guys think something is impossible, just ask me for more info ;)
BCoppens> =)
ThomasZ> Ok, the vector shape.
ThomasZ> Basically what we need is a shape that can hold vector data (which means any number of control points to create one or more curves)
ThomasZ> This is needed for apps to build on top of. So KWord can allow the user to draw some lines, for example.
ThomasZ> Flake allows you to group objects; so 3 vector objects can be 3 shapes and then be grouped so the user will just see one.
ThomasZ> We need a library that will provide a shape plugin as well as an object that applications like karbon can use to set things like fill or outline-sizes.
ThomasZ> We also need a tool that is made specifically for this vector shape so users can click and select specific points.
ThomasZ> or even alter the position of that.  Which means it has to be able to modify most items of the vector visually.
ThomasZ> Last; that same library will have to create some widgets that the the application can show for that specific shape.
ThomasZ> Think things like a fill-color.
ThomasZ> Not all of this will be needed initially, and I certainly don't think Thrain will have to implement all of this, but I think he can provide at least the shape and part of the tool.
