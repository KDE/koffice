Library reorganization.

Goals:

 * make it possible to use libraries independently from KOffice
 * make KOffice applications link to the smallest set of symbols possible
 * make it easy to figure out which functionality is implemented where
 * make it easy to split functionality and ui (do not let core libraries depend on QWidget...)
 * make it easy to optionally replace KDE-based functionality with Qt-based equivalents.
 * make the dependency tree as explicit as possible
 * split interfaces and implementation

Means

 * make no library depend on komain or koguiutils
 * merge komain and koguiutils as far as koguiutils depends on komain
 * extract kofilter from komain
 * move advanced widgets into widgets/libraries

Stages

 * extract what is easily extractable
 * move into subdirs what is less easily extractable but clearly separate functionality
 * make lcms optional
 * make pigment optional (this means splitting out the resource and color widgets into optional libraries, they are only used in krita and karbon)

 * make main depend on flake instead of the other way around: move
   common tool/docker/canvas controller from the apps to KoView.
 * make flake as independent as possible
 * make guiutils a base library containing only gui functionality shared by widgets, not independent widgets themselves.

Issues

 * the tool option widget change architecture currently has an inherits("KoView") in flake/KoCanvasController
   all this code should go to libs/main and be generic for all KoApplication applications instead of being 
   reimplemented everywhere.

 * pigment: NO_PIGMENT, SMALL_PIGMENT (only KoColor based on QColor?), FULL_PIGMENT (with lcms, optional openctl)
   Or shall we make lcms, openctl etc. plugins to pigment?

 * Qt-only?
 
 * flake: contains shapes, tools and canvas. How to split?
 
 * create ONE_BIG_KOFFICE_LIB mode where all koffice lib parts are linked together (except KoPageApp, which probably should move outside libs) Either through static libs linked together, or in one go. Query: can CMake make both static and dynamic lib in one go?
 
 * move KoDock* to flake or to an independent library? There are interdependencies her, but it sucks if docker
plugins need KoMain
 
 * make all the libraries as independent of each other as possible, also in a build system way. Every lib its own project

Dependencies


guiutils: qt, kde

koplugin: kdecore

kostore: qtcore, qtxml, kdecore, kdekio, optionally qca (does this have a future with qzip* in Qt's text package?)

kopicture: kostore, qt3support, qtgui

odf: kostore, kopicture (no qtgui, except transitively)

koaction: qtcore, kde4core, threadweaver

widgets: guiutils
widgets/openpane: kdecore, kdeui, kparts, kfile, kde3support 
widgets/resources: pigment, koresources
widgets/colorwidgets koresources, pigment, guiutils
widgets/zoom flake
widgets/progress: qt

pigment: koplugin, lcms, openexr, opengtl

kotext: store, odf, flake, koplugin

main: koplugin, koodf, kostore, kopicture, koopenpane

flake: odf,main, properties, pigmentcms




kross

kopageapp

resources

Desired:

new: kocolorwidgets, koresourcewidgets, etc.

pigment
flake: odf, optionally pigment
kotext: flake, _not_ main
flake
guiutils
kopageapp
kotext
main
kokross
resources


References

http://www.mpi-inf.mpg.de/~kettner/courses/lib_design_03/notes/index.html
http://portal.acm.org/citation.cfm?id=260634
