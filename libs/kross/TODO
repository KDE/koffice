== Kross TODO ==

Always valid:
* more performance
* more documentations, tutorials, examples, ...
* more unittests
* add Kross-support to other KOffice-applications.

Core:
* refactor Action::functionNames and Action::callFunction to offer the
  functions a script provides either as KActionCollection where each
  function is a KAction or let Action dynamicly build slots where
  each slot represents a function.

Modules:
* add KConfig-module to provide persistent configurations where all
  scripts are able to operate on.
* add KStandardDirs-module to be able to reuse e.g. the resource-stuff
  from within all scripts without much pain.
* add KPart module to optional load KPart's.
* extend forms, e.g. with a wizard?!

Ruby:
* support access to the QObject-hierachy. That means each RubyExtension
  used to wrap a QObject instance should provide access to the child
  QObject instances the wrapped QObject has.
* support access to the Kross::Manager (global) and Kross::Action (self/this)
  instances if not done already.
* reimplement connect signal<=>slot support
* add better dynamic Korundum integration (e.g. trade QObject-instances
  around between QtRuby and Kross). Korundum misses SIP-like functionality
  here but since at the end everything is a pointer, it's just a matter
  of dirty code to get that support done.

Python:
* reimplement connect signal<=>slot support
* uncomment dynamic PyQt-support + regressiontest just every case

KjsEmbed:
* work has started but still misses a lot of functionality to have it as
  first class citizen like Python or Ruby within Kross.
* extend KjsEmbed to be able to deal with untrusted scripts coming from
  untrusted sources like e.g. via internet distributed OpenDocument files.
