<!DOCTYPE KSpreadFunctions>
<KSpreadFunctions>

  <Group>
    <GroupName>Financial</GroupName>

    <Function>
      <Name>FV</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Present value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The FV() function returns the future value of an investment, given the yield and the time elapsed. If you have $1000 in a bank account earning 8% interest, after two years you will have FV(1000;0.08;2) or $1166.40.</Text>
	<Syntax>FV(present value;yield;periods)</Syntax>
	<Example>FV(1000;0.08;2) equals 1166.40</Example>
      </Help>
    </Function>

    <Function>
      <Name>PV</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Future value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The PV() function returns the present value of an investment -- the value today of a sum of money in the future, given the rate of interest or inflation. For example if you need $1166.40 for your new computer and you want to buy it in two years while earning 8% interest, you need to start with PV(1166.4;0.08;2) or $1000.</Text>
	<Syntax>PV(future value;rate;periods)</Syntax>
	<Example>PV(1166.4;0.08;2) equals 1000</Example>
      </Help>
    </Function>

    <Function>
      <Name>PV_annuity</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Payment per period</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
     <Help>
	<Text>The PV_annuity() function returns the present value of an annuity or stream of payments. For example: a "million dollar" lottery ticket that pays $50,000 a year for 20 years, with an interest rate of 5%, is actually worth PV_annuity(50000;0.05;20) or $623,111. This function assumes that payments are made at the end of each period.</Text>
	<Syntax>PV_annuity(amount;interest;periods)</Syntax>
	<Example>PV_annuity(1000;0.05;5) equals 4329.48</Example>
      </Help>
    </Function>

    <Function>
      <Name>FV_annuity</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Payment per period</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The FV_annuity() function returns the future value of a stream of payments given the amount of the payment, the interest rate and the number of periods. For example: If you receive $500 per year for 20 years, and invest it at 8%, the total after 20 years will be FV_annuity(500;0.08;20) or $22,880.98. This function assumes that payments are made at the end of each period.</Text>
	<Syntax>FV_annuity(amount;interest;periods)</Syntax>
	<Example>FV_annuity(1000;0.05;5) equals 5525.63</Example>
      </Help>
    </Function>

    <Function>
      <Name>compound</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Principal</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods per year</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Years</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The compound() function returns the value of an investment, given the principal, nominal interest rate, compounding frequency and time. For example: $5000 at 12% interest compounded quarterly for 5 years will become compound(5000;0.12;4;5) or $9030.56.</Text>
	<Syntax>compound(initial;interest;periods;periods_per_year)</Syntax>
	<Example>compound(5000;0.12;4;5) equals 9030.56</Example>
      </Help>
    </Function>

    <Function>
      <Name>continuous</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Principal</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Years</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The continuous() function calculates the return on continuously compounded interest, given the principal, nominal rate and time in years. For example: $1000 earning 10% for 1 year becomes continuous(1000;.1;1) or $1105.17.</Text>
	<Syntax>continuous(principal;interest;years)</Syntax>
	<Example>continuous(1000;0.1;1) equals 1105.17</Example>
      </Help>
    </Function>

    <Function>
      <Name>effective</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Nominal interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The effective() function calculates the effective yield for a nominal interest rate (annual rate or APR). For example: 8% interest compounded monthly provides an effective yield of effective(.08;12) or 8.3%.</Text>
	<Syntax>effective(nominal;periods)</Syntax>
	<Example>effective(0.08;12) equals 0.083</Example>
      </Help>
    </Function>

    <Function>
      <Name>nominal</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Effective interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The nominal() function calculates the nominal (stated) interest rate for an effective (annualized) interest rate compounded at given intervals. For example: to earn 8% on an account compounded monthly, you need a return of nominal(.08;12) or 7.72%.</Text>
	<Syntax>nominal(effective;periods)</Syntax>
	<Example>nominal(0.08;12) equals 0.0772</Example>
      </Help>
    </Function>

    <Function>
      <Name>zero_coupon</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Face value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Years</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The zero_coupon() function calculates the value of a zero-coupon (pure discount) bond. For example: if the interest rate is 10%, a $1000 bond that matures in 20 years is worth zero_coupon(1000;.1;20) or $148.64.</Text>
	<Syntax>zero_coupon(face value;rate;years)</Syntax>
	<Example>zero_coupon(1000;.1;20) equals 148.64</Example>
      </Help>
    </Function>

    <Function>
      <Name>level_coupon</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Face value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Coupon rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Coupons per Year</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Years</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Market Interest Rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The level_coupon() function calculates the value of a level-coupon bond. For example: if the interest rate is 10%, a $1000 bond with semi-annual coupons at a rate of 13% that matures in 4 years is worth level_coupon(1000;.13;2;4;.1) or $1096.95.</Text>
	<Syntax>zero_coupon(face value;rate;years)</Syntax>
	<Example>level_coupon(1000;.13;2;4;.1) equals 1096.95</Example>
      </Help>
    </Function>

    <Function>
      <Name>SLN</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Cost</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Salvage</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Life</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The SLN() function will determine the straight line depreciation of an asset for a single period. The amount you paid for the asset is the cost, the value of the asset at the end of the period is salvage, and life
is the number of periods over which the asset is depreciated. SLN
divides the cost evenly over the life of an asset.</Text>
	<Syntax>SLN(cost; salvage value; life)</Syntax>
	<Example>SLN(10000;700;10) equals 930</Example>
      </Help>

  </Group>
</KSpreadFunctions>
