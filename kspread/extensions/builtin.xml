<!DOCTYPE KSpreadFunctions>
<KSpreadFunctions>
  <Group>
    <GroupName>Trigonometric</GroupName>

    <Function>
      <Name>cos</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The cos() function returns the cosine of x, where x is given in radians.</Text>
	<Syntax>cos(Float)</Syntax>
	<Example>cos(0) equals 1.0</Example>
	<Example>cos(PI/2) equals 0.0</Example>
      </Help>
    </Function>

    <Function>
      <Name>sin</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The sin() function returns the sine of x, where x is given in radians.</Text>
	<Syntax>sin(Float)</Syntax>
	<Example>sin(0) equals 0</Example>
	<Example>sin(PI/2) equals 1</Example>
      </Help>
    </Function>

    <Function>
      <Name>tan</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The tan() function returns the tangent of x, where x is given in radians.</Text>
	<Syntax>tan(Float)</Syntax>
	<Example>tan(0.7) equals 0.84228838.</Example>
	<Example>tan(0) equals 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>acos</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The acos() function returns the arc cosine in radians and the value is mathematically defined to be between 0 and PI(inclusive)</Text>
	<Syntax>acos(Float)</Syntax>
	<Example>acos(0.8) equals 0.6435011</Example>
	<Example>acos(0) equals 1.57079633</Example>
      </Help>
    </Function>

    <Function>
      <Name>asin</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The asin() function returns the arc sine in radians and the value is mathematically defined to be between -PI/2 and PI/2 (inclusive).</Text>
	<Syntax>asin(Float)</Syntax>
	<Example>asin(0.8) equals 0.92729522</Example>
	<Example>asin(0) equals 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>atan</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The atan() function returns the arc tangent in radians and the value is mathematically defined to be between -PI/2 and PI/2 (inclusive).</Text>
	<Syntax>atan(Float)</Syntax>
	<Example>atan(0.8) equals 0.67474094</Example>
	<Example>atan(0) equals 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>cosh</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The cosh() function returns the hyperbolic cosine of x, which is defined mathematically as (exp(x) + exp(-x)) / 2</Text>
	<Syntax>cosh(Float)</Syntax>
	<Example>cosh(0.8) equals 1.33743495</Example>
	<Example>cosh(0) equals 1</Example>
      </Help>
    </Function>

    <Function>
      <Name>sinh</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The sinh() function returns the hyperboic sine of x, which is defined mathematically as (exp(x) - exp(-x)) / 2.</Text>
	<Syntax>sinh(Float)</Syntax>
	<Example>sinh(0.8) equals 0.88810598</Example>
	<Example>sinh(0) equals 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>tanh</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The tanh() function returns the hyperbolic tangent of x, which is defined mathematically as sinh(x)/cosh(x).</Text>
	<Syntax>tanh(Float)</Syntax>
	<Example>tanh(0.8) equals 0.66403677</Example>
	<Example>tanh(0) equals 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>acosh</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The acosh() function calculates the inverse hyperbolic cosine of x. That is the value whose hyperbolic cosine is x. If x is less than 1.0, acosh() returns not-a-number (NaN) and errno is set.</Text>
	<Syntax>acosh(Float)</Syntax>
	<Example>acosh(5) equals 2.29243167</Example>
	<Example>acosh(0) equals nan</Example>
      </Help>
    </Function>

    <Function>
      <Name>asinh</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The asinh() function  calculates the inverse hyperbolic sine of x; that is the value whose hyperbolic sine is x.</Text>
	<Syntax>asinh(Float)</Syntax>
	<Example>asinh(0.8) equals 0.73266826</Example>
	<Example>asinh(0) equals 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>atanh</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The atanh() function calculates the inverse hyperbolic tangent of x; that is the value whose hyperbolic tangent is x. If the absolute value of x is greater than 1.0, atanh() returns not-a-number (NaN)</Text>
	<Syntax>atanh(Float)</Syntax>
	<Example>atanh(0.8) equals 1.09861229</Example>
	<Example>atanh(0) equals 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>atan2</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>This function calculates the arc tangent of the two variables x and y. It is similar to calculating the arc tangent of y/x, except that the signs of both arguments are used to determine the quadrant of the result.</Text>
	<Syntax>atan2( value )</Syntax>
	<Example>atan2(0.5;1.0) equals 1.107149</Example>
	<Example>atan2(-0.5;2.0) equals 1.815775</Example>
      </Help>
    </Function>

    <Function>
      <Name>degree</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (rd)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>This function transforms a radian angle to degree angle.</Text>
	<Syntax>degree(Float)</Syntax>
	<Example>degree(75) equals 44.69</Example>
	<Example>degree(1) equals 57.29</Example>
      </Help>
    </Function>

    <Function>
      <Name>radian</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Angle (deg)</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>This function transforms a degree angle to radian angle.</Text>
	<Syntax>radian(Float)</Syntax>
	<Example>radian(75) equals 1.308</Example>
	<Example>radian(90) equals 1.5707</Example>
      </Help>
    </Function>

    <Function>
      <Name>PI</Name>
      <Type>Float</Type>
      <Help>
	<Text>The PI() function returns the PI value</Text>
	<Syntax>PI()</Syntax>
	<Example>PI() equals 3.141592654...</Example>
      </Help>
    </Function>

  </Group>
  <Group>
    <GroupName>Time and Date</GroupName>

    <Function>
      <Name>dayOfYear</Name>
      <Type>Int</Type>
      <Parameter>
	<Comment>Year</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Month</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Day</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The dayOfYear() function returns the number of the day in the year (1...365).</Text>
	<Syntax>dayOfYear( year; month; date )</Syntax>
	<Example>dayOfYear(2000;12;1) returns 336</Example>
	<Example>dayOfYear(2000;2;29) return 60</Example>
      </Help>
    </Function>

    <Function>
      <Name>date</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Year</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Month</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Day</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The date() function returns the date formatted with local parameters.</Text>
	<Syntax>date( year; month; date )</Syntax>
	<Example>date(2000;5;5) returns Friday 05 May 2000</Example>
      </Help>
    </Function>

    <Function>
      <Name>time</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Hours</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Minutes</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Seconds</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The time() function returns the time formatted with local parameters.</Text>
	<Syntax>time( hours; minutes; seconds )</Syntax>
	<Example>time(10;2;2) returns 10:02:02</Example>
      </Help>
    </Function>

    <Function>
      <Name>day</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Number of day in week (1..7)</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The day() function returns name of day of the week (1..7). In some countries the first day of the week is the monday, while in others the first day of the week is sunday.</Text>
	<Syntax>day( weekday )</Syntax>
	<Example>day(1) returns Monday (if the week starts on Monday)</Example>
      </Help>
    </Function>

    <Function>
      <Name>month</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Number of month (1..12)</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The month() function returns name of the month (1...12).</Text>
	<Syntax>month( number )</Syntax>
	<Example>month(5) returns May</Example>
      </Help>
    </Function>

    <Function>
      <Name>currentDate</Name>
      <Type>String</Type>
      <Help>
	<Text>The currentDate() function returns the current date formatted with local parameters.</Text>
	<Syntax>currentDate()</Syntax>
	<Example>currentDate() returns "Saturday 15 July 2000"</Example>
      </Help>
    </Function>

    <Function>
      <Name>currentDateTime</Name>
      <Type>String</Type>
      <Help>
	<Text>The currentDateTime() function returns the current date and time formatted with local parameters.</Text>
	<Syntax>currentDateTime()</Syntax>
	<Example>currentDateTime() returns "Saturday 15 July 2000 19:12:01"</Example>
      </Help>
    </Function>

    <Function>
      <Name>currentTime</Name>
      <Type>String</Type>
      <Help>
	<Text>The currentTime() function returns the current time formatted with local parameters.</Text>
	<Syntax>currentTime()</Syntax>
	<Example>currentTime() returns "19:12:01"</Example>
      </Help>
    </Function>

  </Group>
  <Group>
    <GroupName>Text</GroupName>

    <Function>
      <Name>DECBIN</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>The value to convert</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The DECBIN() function returns the value formatted as a binary number.</Text>
	<Syntax>DECBIN( value )</Syntax>
	<Example>DECBIN(12) returns "1100"</Example>
	<Example>DECBIN(55) returns "110111"</Example>
      </Help>
    </Function>

    <Function>
      <Name>DECHEX</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>The value to convert</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The DECHEX() function returns the value formatted as a hexadecimal number.</Text>
	<Syntax>DECHEX( value )</Syntax>
	<Example>DECHEX(12) returns "c"</Example>
	<Example>DECHEX(55) returns "37"</Example>
      </Help>
    </Function>

    <Function>
      <Name>DECOCT</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>The value to convert</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The DECOCT() function returns the value formatted as an octal number.</Text>
	<Syntax>DECOCT( value )</Syntax>
	<Example>DECOCT(12) returns "14"</Example>
	<Example>DECOCT(55) returns "67"</Example>
      </Help>
    </Function>

    <Function>
      <Name>EXACT</Name>
      <Type>Boolean</Type>
      <Parameter>
	<Comment>String</Comment>
	<Type>String</Type>
      </Parameter>
      <Parameter>
	<Comment>String</Comment>
	<Type>String</Type>
      </Parameter>
      <Help>
	<Text>The EXACT() function returns True if these two strings are equal otherwise returns False.</Text>
	<Syntax>EXACT( string1; string2 )</Syntax>
	<Example>EXACT( "Koffice"; "Koffice" ) returns True"</Example>
        <Example>EXACT( "kspread"; "Koffice" ) returns False</Example>
      </Help>
    </Function>

    <Function>
      <Name>find</Name>
      <Type>Boolean</Type>
      <Parameter>
	<Comment>Haystack</Comment>
	<Type>String</Type>
      </Parameter>
      <Parameter>
	<Comment>Needle</Comment>
	<Type>String</Type>
      </Parameter>
      <Help>
	<Text>The find() function searches a substring. This function returns True if this substring exists otherwise it returns False.</Text>
	<Syntax>find( haystack; needle )</Syntax>
	<Example>find( "Kof"; "Koffice" ) returns True"</Example>
	<Example>find( "kspread"; "Koffice") returns False</Example>
      </Help>
    </Function>

    <Function>
      <Name>mid</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Source string</Comment>
	<Type>String</Type>
      </Parameter>
      <Parameter>
	<Comment>Position</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Length</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The mid() function returns a substring that contains the len characters of this string, starting at position index.</Text>
	<Syntax>mid( text; position; length )</Syntax>
	<Syntax>mid( text; position )</Syntax>
	<Example>mid( "Koffice"; 2; 3 ) returns "ffi"</Example>
	<Example>mid( "Koffice"; 2 ) returns "ffice"</Example>
      </Help>
    </Function>

    <Function>
      <Name>len</Name>
      <Type>Int</Type>
      <Parameter>
	<Comment>String</Comment>
	<Type>String</Type>
      </Parameter>
      <Help>
	<Text>The len() function returns the length of the string.</Text>
	<Syntax>len( text )</Syntax>
	<Example>len( "hello" ) returns 5</Example>
	<Example>len( "kspread" ) returns 7</Example>
      </Help>
    </Function>

    <Function>
      <Name>join</Name>
      <Type>String</Type>
      <Parameter optional="true">
	<Comment>String values</Comment>
	<Type range="true">String</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>String values</Comment>
	<Type range="true">String</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>String values</Comment>
	<Type range="true">String</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>String values</Comment>
	<Type range="true">String</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>String values</Comment>
	<Type range="true">String</Type>
      </Parameter>
      <Help>
	<Text>The join() function returns string which is the concatenation of the strings passed as parameters.</Text>
	<Syntax>join( values; values; ... )</Syntax>
	<Example>join( "kspread"; "koffice"; "kde" ) returns "kspreadkofficekde"</Example>
      </Help>
    </Function>

    <Function>
      <Name>right</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Source string</Comment>
	<Type>String</Type>
      </Parameter>
      <Parameter>
	<Comment>Amount of characters</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The right() function returns a substring that contains the len rightmost characters of the string. The whole string is returned if len exceeds the length of the string.</Text>
	<Syntax>right( text; len )</Syntax>
	<Example>right("hello";2) returns "lo"</Example>
	<Example>right("kspread";10) returns "kspread"</Example>
      </Help>
    </Function>

    <Function>
      <Name>left</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Source string</Comment>
	<Type>String</Type>
      </Parameter>
      <Parameter>
	<Comment>Amount of characters</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The left() function returns a substring that contains the len leftmost characters of the string. The whole string is returned if len exceeds the length of the string.</Text>
	<Syntax>left( text; len )</Syntax>
	<Example>left( "hello"; 2 ) returns "he"</Example>
	<Example>left( "kspread"; 10 ) returns "kspread"</Example>
      </Help>
    </Function>

    <Function>
      <Name>REPT</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Source string</Comment>
	<Type>String</Type>
      </Parameter>
      <Parameter>
	<Comment>Count of repetitions</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The REPT() function repeats the first parameter as often as told by the second parameter.</Text>
	<Syntax>REPT( text; count )</Syntax>
	<Example>REPT( "kspread"; 3 ) returns "kspreadkspreadkspread"</Example>
      </Help>
    </Function>

    <Function>
      <Name>upper</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Source string</Comment>
	<Type>String</Type>
      </Parameter>
      <Help>
	<Text>The upper() function converts a string to upper case.</Text>
	<Syntax>upper( text )</Syntax>
	<Example>upper( "hello" ) returns "HELLO"</Example>
	<Example>upper( "HELLO" ) returns "HELLO"</Example>
      </Help>
    </Function>

    <Function>
      <Name>lower</Name>
      <Type>String</Type>
      <Parameter>
	<Comment>Source string</Comment>
	<Type>String</Type>
      </Parameter>
      <Help>
	<Text>The lower() function converts a string to lower case.</Text>
	<Syntax>lower( text )</Syntax>
	<Example>lower( "hello" ) returns "hello"</Example>
	<Example>lower( "HELLO" ) returns "hello"</Example>
      </Help>
    </Function>

  </Group>
  <Group>
    <GroupName>Analytic</GroupName>

    <Function>
      <Name>pow</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The pow(x,y) function returns the value of x raised to the power of y.</Text>
	<Syntax>pow( value; value )</Syntax>
	<Example>pow(1.2;3.4) equals 1.8572</Example>
	<Example>pow(2;3) equals 8</Example>
      </Help>
    </Function>

    <Function>
      <Name>MOD</Name>
      <Type>Int</Type>
      <Parameter>
	<Comment>Floating point value</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Floating point value</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The MOD() function returns the remainder after division if the second parameter is null the function returns #DIV/0</Text>
	<Syntax>MOD( value; value )</Syntax>
	<Example>MOD(12;5) returns 2</Example>
	<Example>MOD(5;5) returns 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>sign</Name>
      <Type>Int</Type>
      <Parameter>
	<Comment>Floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>This function returns -1 if the number is negative 0 if the number is null and 1 if the number is positive.</Text>
	<Syntax>sign( value )</Syntax>
	<Example>sign(5) equals 1</Example>
	<Example>sign(0) equals 0</Example>
	<Example>sign(-5) equals -1</Example>
      </Help>
    </Function>

    <Function>
      <Name>INV</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>This function multiplies each value by -1</Text>
	<Syntax>INV( Value )</Syntax>
	<Example>INV(-5) equals 5</Example>
	<Example>INV(5) equals 5</Example>
	<Example>INV(0) equals 0</Example>
      </Help>
    </Function>

    <Function>
      <Name>fact</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The fact() function calculates the factorial of the parameter. The mathematical expression is (value)!.</Text>
	<Syntax>fact(Float)</Syntax>
	<Example>fact(10) returns 3628800</Example>
	<Example>fact(0) returns 1</Example>
      </Help>
    </Function>

    <Function>
      <Name>sum</Name>
      <Type>Float</Type>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Help>
	<Text>The sum() function calculates the sum of all the values given as parameters. You can calculate the sum of a range sum(A1:B5) or a list of values like sum(12;5;12.5)</Text>
	<Syntax>sum( values; values; ... )</Syntax>
	<Example>sum(12;5;7) equals 24</Example>
	<Example>sum(12.5;2) equals 14.5</Example>
      </Help>
    </Function>

    <Function>
      <Name>max</Name>
      <Type>Float</Type>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Help>
	<Text>The max() function returns the biggest value given in the parameters.</Text>
	<Syntax>max( values; values; ... )</Syntax>
	<Example>max(12;5;7) returns 12</Example>
	<Example>max(12.5;2) returns 12.5</Example>
      </Help>
    </Function>

    <Function>
      <Name>min</Name>
      <Type>Float</Type>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Help>
	<Text>The min() function returns the smallest value given in the parameters.</Text>
	<Syntax>min( values; values; ... )</Syntax>
	<Example>min(12;5;7) returns 5</Example>
	<Example>min(12.5;2) returns 2</Example>
      </Help>
    </Function>

    <Function>
      <Name>multiply</Name>
      <Type>Float</Type>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Help>
	<Text>The multiply() function multiplies all the values given in the parameters.You can multiply values given by a range multiply(A1:B5) or list of values like multiply(12;5;12.5)</Text>
	<Syntax>multiply( values; values; ... )</Syntax>
	<Example>multiply(12;5;7) equals 420</Example>
	<Example>multiply(12.5;2) equals 25</Example>
      </Help>
    </Function>

    <Function>
      <Name>sqrt</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The sqrt() function returns the non-negative square root of x. if x is negative, then "nan" is returned</Text>
	<Syntax>sqrt( x )</Syntax>
	<Example>sqrt(9) equals 3</Example>
	<Example>sqrt(-9) equals "nan"</Example>
      </Help>
    </Function>

    <Function>
      <Name>ln</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The ln() function returns the natural logarithm of x.</Text>
	<Syntax>ln( x )</Syntax>
	<Example>ln(0.8) equals -0.22314355</Example>
	<Example>ln(0) equals -inf</Example>
      </Help>
    </Function>

    <Function>
      <Name>log</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The log() function returns the base-10 logarithm of x.</Text>
	<Syntax>log( x )</Syntax>
	<Example>log(0.8) equals -0.09691001</Example>
	<Example>log(0) equals -inf.</Example>
      </Help>
    </Function>

    <Function>
      <Name>exp</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The exp() function returns the value of e (the  base of natural logarithms) raised to the power of x.</Text>
	<Syntax>exp( x )</Syntax>
	<Example>exp(9) equals 8 103.08392758</Example>
	<Example>exp(-9) equals 0.00012341</Example>
      </Help>
    </Function>

    <Function>
      <Name>ceil</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The ceil() function rounds x upwards to the nearest integer, returning that value as a double.</Text>
	<Syntax>ceil( x )</Syntax>
	<Example>ceil(12.5) equals 13</Example>
	<Example>ceil(-12.5) equals -12</Example>
      </Help>
    </Function>

    <Function>
      <Name>floor</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The floor() function rounds x downwards to the nearest integer, returning that value as a double.</Text>
	<Syntax>floor( x )</Syntax>
	<Example>floor(12.5) equals 12</Example>
	<Example>floor(-12.5) equals -13</Example>
      </Help>
    </Function>

    <Function>
      <Name>fabs</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The fabs() function returns the absolute value of the floating-point number x.</Text>
	<Syntax>fabs( x )</Syntax>
	<Example>fabs(12.5) equals 12.5</Example>
	<Example>fabs(-12.5) equals 12.5</Example>
      </Help>
    </Function>

    <Function>
      <Name>ENT</Name>
      <Type>Int</Type>
      <Parameter>
	<Comment>A floating point value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The ENT() function returns the integer part of the value.</Text>
	<Syntax>ENT( x )</Syntax>
	<Example>ENT(12.55) equals 12</Example>
	<Example>ENT(15) equals 15</Example>
      </Help>
    </Function>

  </Group>
  <Group>
    <GroupName>Logic</GroupName>

    <Function>
      <Name>AND</Name>
      <Type>Boolean</Type>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Help>
	<Text>The AND() function returns True if all the values are true, otherwise returns False</Text>
	<Syntax>AND( values; values; ... )</Syntax>
	<Example>AND(True;True;True) returns True</Example>
	<Example>AND(True;False) returns False</Example>
      </Help>
    </Function>

    <Function>
      <Name>OR</Name>
      <Type>Boolean</Type>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Help>
	<Text>The OR() function returns True if at least one of the values is true, otherwise returns False</Text>
	<Syntax>OR( values; values; ... )</Syntax>
	<Example>OR(False;False;False) returns False</Example>
	<Example>OR(True;False) returns True</Example>
      </Help>
    </Function>

    <Function>
      <Name>NAND</Name>
      <Type>Boolean</Type>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Help>
	<Text>The NAND() function returns True if at least one value is not true, otherwise returns False.</Text>
	<Syntax>NAND( values; values; ... )</Syntax>
	<Example>NAND(True;False;False) returns True</Example>
	<Example>NAND(True;True) returns False</Example>
      </Help>
    </Function>

    <Function>
      <Name>NOR</Name>
      <Type>Boolean</Type>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Boolean values</Comment>
	<Type range="true">Boolean</Type>
      </Parameter>
      <Help>
	<Text>The NOR() function returns True if all the values given as parameters are of type bool and have the value false. Otherwise it returns False.</Text>
	<Syntax>NOR( values; values; ... )</Syntax>
	<Example>NOR(True;False;False) returns False</Example>
	<Example>NOR(False;False) returns True</Example>
      </Help>
    </Function>

    <Function>
      <Name>not</Name>
      <Type>Boolean</Type>
      <Parameter>
	<Comment>Boolean value</Comment>
	<Type>Boolean</Type>
      </Parameter>
      <Help>
	<Text>The not() function returns True if the value is False and returns False if the value is True.</Text>
	<Syntax>not( bool )</Syntax>
	<Example>not(False) returns True</Example>
	<Example>not(True) returns False</Example>
      </Help>
    </Function>

    <Function>
      <Name>if</Name>
      <Type>Any</Type>
      <Parameter>
	<Comment>Condition</Comment>
	<Type>Boolean</Type>
      </Parameter>
      <Parameter>
	<Comment>If true</Comment>
	<Type>Any</Type>
      </Parameter>
      <Parameter>
	<Comment>If false</Comment>
	<Type>Any</Type>
      </Parameter>
      <Help>
	<Text>The if() function is a conditional function. This function returns the second parameter if the condition is True, otherwise it returns the third parameter.</Text>
	<Syntax>if( condition; if_true; if_false )</Syntax>
	<Example>A1=4; A2=6; if(A1>A2;5;3) returns 3</Example>
      </Help>
    </Function>

    <Function>
      <Name>ISLOGIC</Name>
      <Type>Boolean</Type>
      <Parameter>
	<Comment>Any value</Comment>
	<Type>Any</Type>
      </Parameter>
      <Help>
	<Text>The ISLOGIC() function returns True if the parameter is a bool value otherwise returns False.</Text>
	<Syntax>ISLOGIC( x )</Syntax>
	<Example>ISLOGIC(A1>A2) returns True</Example>
	<Example>ISLOGIC(12) returns False</Example>
      </Help>
    </Function>

    <Function>
      <Name>ISNUM</Name>
      <Type>Boolean</Type>
      <Parameter>
	<Comment>Any value</Comment>
	<Type>Any</Type>
      </Parameter>
      <Help>
	<Text>The ISNUM() function returns True if the parameter is a numerical value otherwise it returns False</Text>
	<Syntax>ISNUM( x )</Syntax>
	<Example>ISNUM(12) returns True</Example>
	<Example>ISNUM(hello) returns False</Example>
      </Help>
    </Function>

    <Function>
      <Name>ISTEXT</Name>
      <Type>Boolean</Type>
      <Parameter>
	<Comment>Any value</Comment>
	<Type>Any</Type>
      </Parameter>
      <Help>
	<Text>The ISTEXT() function returns True if the parameter is a string and otherwise returns False</Text>
	<Syntax>ISTEXT( x )</Syntax>
	<Example>ISTEXT(12) returns False</Example>
	<Example>ISTEXT("hello") returns True</Example>
      </Help>
    </Function>

  </Group>
  <Group>
    <GroupName>Statistic</GroupName>

    <Function>
      <Name>BINO</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Number of trials</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Number of successful trials</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Probability of success</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The BINO function returns the binomial distribution. The first parameter is the number of trials, the second parameter is the number of successes, and the third is the probability of success. The number of trials should be bigger than the number of successes and the probability should be smaller or equal to 1.</Text>
	<Syntax>BINO( trials; success; prob_of_success )</Syntax>
	<Example>BINO(12;9;0.8) returns 0.236223201</Example>
      </Help>
    </Function>

    <Function>
      <Name>INVBINO</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Number of trials</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Number of failures</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Probability of failure</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The INVBINO function returns the negative binomial distribution. The first parameter is the number of trial the second parameter is the number of failure, and the third is the probability of failure. The number of trials should be bigger than the number of failures and the probability should be smaller or equal to 1.</Text>
	<Syntax>INVBINO( trials; failure; prob_of_failure )</Syntax>
	<Example>INVBINO(12;3;0.2) returns 0.236223201</Example>
      </Help>
    </Function>

    <Function>
      <Name>COMBIN</Name>
      <Type>Int</Type>
      <Parameter>
	<Comment>Total number of elements</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Number of elements to choose</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The COMBIN() function calculates the count of possible combinations. The first parameter is the total count of elements. The second parameter is the count of element to choose. These two parameters should be positive, otherwise the function returns an error. The first parameter should be bigger than the second one otherwise the function returns an error, too.</Text>
	<Syntax>COMBIN( total; choosen )</Syntax>
	<Example>COMBIN(12;5) returns 792</Example>
	<Example>COMBIN(5;5) returns 1</Example>
      </Help>
    </Function>

    <Function>
      <Name>PERMUT</Name>
      <Type>Int</Type>
      <Parameter>
	<Comment>Total number of elements</Comment>
	<Type>Int</Type>
      </Parameter>
      <Parameter>
	<Comment>Number of elements to permutate</Comment>
	<Type>Int</Type>
      </Parameter>
      <Help>
	<Text>The PERMUT() function returns the number of permutations. The first parameter is the number of elements, and the second parameter is the number of elements used in the permutation.</Text>
	<Syntax>PERMUT( total; permutated )</Syntax>
	<Example>PERMUT(8;5) equals 6720</Example>
	<Example>PERMUT(1;1) equals 1</Example>
      </Help>
    </Function>

    <Function>
      <Name>average</Name>
      <Type>Float</Type>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Help>
	<Text>The average() function calculates the average of all the values given as parameters. You can calculate the average of a range average(A1:B5) or a list of values like average(12;5;12.5)</Text>
	<Syntax>average( values; values; ... )</Syntax>
	<Example>average(12;5;7) equals 8</Example>
	<Example>average(12.5;2) equals 7.25</Example>
      </Help>
    </Function>

    <Function>
      <Name>variance</Name>
      <Type>Float</Type>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Help>
	<Text>The variance() function calculates the variance of each parameter which are member of a population.</Text>
	<Syntax>variance( values; values; ... )</Syntax>
	<Example>variance(12;5;7) equals 8.666...</Example>
	<Example>variance(15;80;3) equals 1144.22...</Example>
      </Help>
    </Function>

    <Function>
      <Name>stddev</Name>
      <Type>Float</Type>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Parameter optional="true">
	<Comment>Floating point values</Comment>
	<Type range="true">Float</Type>
      </Parameter>
      <Help>
	<Text></Text>
	<Syntax>stddev( values; values; ... )</Syntax>
      </Help>
    </Function>

  </Group>
  <Group>
    <GroupName>Financial</GroupName>

    <Function>
      <Name>FV</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Present value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The FV() function returns a value that consist of the present value plus multiples periods of interest. If you have $1000 on your bank account, and you get 8% interest then after two years the amount of money you will own is FV( 1000; 0.08; 2 ). That means FV calculates the future value of your money, that it why it is called FV.</Text>
	<Syntax>FV( present_value; interest; periods )</Syntax>
	<Example>FV( 1000; 0.08; 2 ) equals 1166.40</Example>
      </Help>
    </Function>

    <Function>
      <Name>PV</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Future value</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The PV() function returns the value that you need if you want to reach the future value after a certain amount of periods and a certain interest. For example if you need $1166.40 for your new computer and you want to buy it in two years while getting an interest of 8% then PV( 1166.4; 0.08; 2 ) tells you how much money you need now, in the presence. PV calculates the present value that you need to reach a future value, that is why it is called PV.</Text>
	<Syntax>PV( future_value; interest; periods )</Syntax>
	<Example>PV( 1166.4; 0.08; 2 ) equals 1000</Example>
      </Help>
    </Function>

    <Function>
      <Name>PV_annuity</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Payment per period</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Future cash</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Pay at start of period (True or False)</Comment>
	<Type>Boolean</Type>
      </Parameter>
      <Help>
	<Text>The PV_annuity() function tells you how much cash you need today (in the presence) if you want to reach a certain cash volume in the future. We assume that you put every month a certain amount of money on your bank account which gives you a certain interest. Now you wonder how much money your bank account must have initially so that you have a certain amount of money after some periods. Lets give a concrete example: You need $1374.40 in two years. At the end of each year you add $100 your account and you have 8% interest. Then PV_annuity( 100; 0.08; 2; 1374.4; FALSE ) tells you that your bank account must have $1000 initially. In case you pay the $100 not at the end of the year, but in the beginning, you would choose TRUE as the last parameter.</Text>
	<Syntax>PV_annuity( amount; interest; periods; future_value; start )</Syntax>
	<Example>PV_annuity( 100; 0.08; 2; 1374.4; FALSE ) equals 1000</Example>
      </Help>
    </Function>

    <Function>
      <Name>FV_annuity</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Payment per period</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Initial cash</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Pay at start of period (TRUE or FALSE)</Comment>
	<Type>Boolean</Type>
      </Parameter>
      <Help>
	<Text>The FV_annuity() function tells you how much money you will have on your account after a certain amount of periods. We assume that you have initially some money and get a certain interest. In addition you put each period some amount of money in addition on your account. Lets have an example: Imagine you have $1000 on your bank account. At the end of every year you add $100 and your interest is 8%. PV_annuity( 100; 0.08; 2; 1000; FALSE ) tells you that after two years you will own $1374.40. If you pay the $100 at the beginning of each year then choose TRUE as the last parameter.</Text>
	<Syntax>FV_annuity( amount; interest; periods; initial_value; start )</Syntax>
	<Example>FV_annuity( 100; 0.08; 2; 1000; FALSE ) equals 1374.4</Example>
      </Help>
    </Function>

    <Function>
      <Name>compound</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Initial cash</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods per year</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The compound() function calculates how much money you will have on your account after a certain amount of years. We assume that you have some initial cash and a certain interest. This interest is due every year. There are multiple periods per year. Lets give an example: You have $1000 and 8% interest every month. Then compound( 1000; 0.08; 12; 2 ) tells you that after 2 years you will own $1172.89</Text>
	<Syntax>compound( initial; interest; periods; periods_per_year )</Syntax>
	<Example>compound( 1000; 0.08; 12; 2 ) equals 1172.89</Example>
      </Help>
    </Function>

    <Function>
      <Name>continuous</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Principal</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Years</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>Fix me, I am a hack</Text>
	<Syntax>continuous( principal; interest; years )</Syntax>
      </Help>
    </Function>

    <Function>
      <Name>effective</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Nominal interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The effective() function calculates the effective interest rate. Assume you get 8% interest per period. If you want to know how much money you have after a certain amount of periods you can call FV( initial; nominal_interest; periods ), or you can calculate initial*effective( nominal_interest; periods ). The result of both is the same. In other words: The effective interest rate is the percentage you get if you earn nominal interest for some periods. That means: If you wonder how much you earn in two years from $1000 with 8% interest; then effective( 0.08; 2 ) equals 0.1664 and that means you earn 16.64%.</Text>
	<Syntax>effective( nominal; periods )</Syntax>
	<Example>effective( 0.08; 2 ) equals 0.1664</Example>
      </Help>
    </Function>

    <Function>
      <Name>nominal</Name>
      <Type>Float</Type>
      <Parameter>
	<Comment>Effective interest rate</Comment>
	<Type>Float</Type>
      </Parameter>
      <Parameter>
	<Comment>Periods</Comment>
	<Type>Float</Type>
      </Parameter>
      <Help>
	<Text>The nominal() function calculates the nominal interest rate from an effective interest rate. For example you have $1000 and after 2 years you earned 16.64%, that means you have $1166.64. Then you can calculate how much interest you got every year by calling nominal( 0.1164; 2 ) and the result is 0.08. This means you get 8% interest per year and after two years that is equal to an effective interest of 16.64%. You should know the following equation: </Text>
	<Syntax>nominal( nominal; periods )</Syntax>
	<Example>nominal( 0.1664; 2 ) equals 0.1664</Example>
      </Help>
    </Function>

  </Group>
</KSpreadFunctions>
