#ifndef __kspread_idl__
#define __kspread_idl__

module KSpread
{
	interface Table;
	typedef sequence<Table> TableSeq;

	struct Range
	{
		unsigned long left;
		unsigned long top;
		unsigned long right;
		unsigned long bottom;
		wstring table;
	};

	struct Cell
	{
		unsigned long x;
		unsigned long y;
		wstring table;
	};

	exception NoNumericValue
	{
		Cell cell;
	};

	exception MalformedExpression
	{
		wstring expr;
	};

	exception DifferentTables
	{
		wstring table1;
		wstring table2;
	};

	exception UnknownTable
	{
		wstring table;
	};

	exception NoActiveSelection
	{
	};

	interface Book;
	interface Document;

	interface View
	{
		 void undo();
		 void redo();
		 void cutSelection();
		 void copySelection();
		 void paste();
		 void Specialpaste();
		 void editCell();
		 void paperLayoutDlg();
		 void togglePageBorders();
		 void newView();
		 void insertNewTable();
		 void autoFill();
		 void editGlobalScripts();
		 void editLocalScripts();
		 void reloadScripts();
		 void runLocalScript();
		 void helpUsing();
		 void deleteRow();
		 void deleteColumn();
		 void insertRow();
		 void insertColumn();
		 void bold();
		 void italic();
		 void moneyFormat();
		 void percent();
		 void alignLeft();
		 void alignCenter();
		 void alignRight();
		 void multiRow();
		 void precisionMinus();
		 void precisionPlus();
		 void insertChart();
		 void insertTable();
		 void insertImage();
		 void insertObject();
		 void fontSizeSelected( in wstring size );
		 void fontSelected( in wstring font );
		 void formulaselection( in wstring math );
		 void consolidate();
		 void gotocell();
		 void replace();
		 void sort();
		 void createanchor();
		 void TextColor();
		 void BackgroundColor();
		 void sortincr();
		 void sortdecrease();
		 void funct();
		 void formulaPower();
    		 void formulaSubscript();
    		 void formulaParentheses();
    		 void formulaAbsValue();
    		 void formulaBrackets();
    		 void formulaFraction();
    		 void formulaRoot();
    		 void formulaIntegral();
    		 void formulaMatrix();
    		 void formulaLeftSuper();
    		 void formulaLeftSub();
		 void formulaSum();
		 void formulaProduct();
		 void RemoveTable();

		Book book();
	};

	interface Book
	{
		TableSeq tables();
		Table table( in wstring name );		
	};

	interface Table
	{		
		Book book();

		wstring tableName();

		Range range( in unsigned long left, in unsigned long top,
			     in unsigned long right, in unsigned long bottom );
		Range rangeFromString( in wstring str ) raises( MalformedExpression );
		Range rangeFromCells( in Cell topleft, in Cell bottomright );

		Cell cellFromString( in wstring str ) raises( MalformedExpression );

		void setValue( in Cell cell, in double value );
		void setStringValue( in Cell cell, in wstring value );

		double value( in Cell cell ) raises ( NoNumericValue );
		wstring stringValue( in Cell cell );

		void insertColumn( in unsigned long col );
		void insertRow( in unsigned long row );
		void deleteColumn( in unsigned long col );
		void deleteRow( in unsigned long row );

		void setSelection( in Range sel );
		Range selection();
		void copySelection();
		void cutSelection();
		void pasteSelection( in Cell cell );

		boolean isEmpty( in unsigned long x, in unsigned long y );
	};

	interface Document
	{
		Book book();

		const string eventNewView = "KSpread/Document/NewView";
		typedef KSpread::View typeNewView;

		const string eventRemovedView = "KSpread/Document/RemovedView";
		typedef KSpread::View typeRemovedView;
	};
};

#endif

