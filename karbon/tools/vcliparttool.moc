/****************************************************************************
** VClipartWidget meta object code from reading C++ file 'vcliparttool.h'
**
** Created: Sun Sep 22 21:09:24 2002
**      by: The Qt MOC ($Id$)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "vcliparttool.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 24)
#error "This file was generated using the moc from 3.1.0-b1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *VClipartWidget::className() const
{
    return "VClipartWidget";
}

QMetaObject *VClipartWidget::metaObj = 0;
static QMetaObjectCleanUp cleanUp_VClipartWidget( "VClipartWidget", &VClipartWidget::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString VClipartWidget::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "VClipartWidget", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString VClipartWidget::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "VClipartWidget", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* VClipartWidget::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QFrame::staticMetaObject();
    static const QUMethod slot_0 = {"addClipart", 0, 0 };
    static const QUParameter param_slot_1[] = {
	{ "item", &static_QUType_ptr, "KoIconItem", QUParameter::In }
    };
    static const QUMethod slot_1 = {"clipartSelected", 1, param_slot_1 };
    static const QMetaData slot_tbl[] = {
	{ "addClipart()", &slot_0, QMetaData::Public },
	{ "clipartSelected(KoIconItem*)", &slot_1, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"VClipartWidget", parentObject,
	slot_tbl, 2,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
	VClipartWidget::qt_static_property,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_VClipartWidget.setMetaObject( metaObj );
    return metaObj;
}

void* VClipartWidget::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "VClipartWidget" ) )
	return this;
    return QFrame::qt_cast( clname );
}

bool VClipartWidget::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: addClipart(); break;
    case 1: clipartSelected((KoIconItem*)static_QUType_ptr.get(_o+1)); break;
    default:
	return QFrame::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool VClipartWidget::qt_emit( int _id, QUObject* _o )
{
    return QFrame::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool VClipartWidget::qt_property( int id, int f, QVariant* v)
{
	return qt_static_property(this, id, f, v);
}

bool VClipartWidget::qt_static_property( QObject* oo, int id, int f, QVariant* v)
{
    return QFrame::qt_static_property( oo, id, f, v);
}
#endif // QT_NO_PROPERTIES
