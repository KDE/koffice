/* This code was generated by msoscheme (http://gitorious.org/msoscheme) */
#ifndef SIMPLEPARSER_H
#define SIMPLEPARSER_H
#include <QString>
#include <QByteArray>
#include <QVector>
#include <QSharedPointer>// replace with QScopedPointer when switching to Qt 4.6
#include "leinputstream.h"
namespace PPT{
class StreamOffset {
public:
    virtual ~StreamOffset() {}
    quint32 streamOffset;
};
class RecordHeader;
void parseRecordHeader(LEInputStream& in, RecordHeader& _s);
class CurrentUserAtom;
void parseCurrentUserAtom(LEInputStream& in, CurrentUserAtom& _s);
class TODOS;
void parseTODOS(LEInputStream& in, TODOS& _s);
class Byte;
void parseByte(LEInputStream& in, Byte& _s);
class CurrentUserStream;
void parseCurrentUserStream(LEInputStream& in, CurrentUserStream& _s);
class OfficeArtBStoreDelay;
void parseOfficeArtBStoreDelay(LEInputStream& in, OfficeArtBStoreDelay& _s);
class OfficeArtRecordHeader;
void parseOfficeArtRecordHeader(LEInputStream& in, OfficeArtRecordHeader& _s);
class OfficeArtBlipJPEG;
void parseOfficeArtBlipJPEG(LEInputStream& in, OfficeArtBlipJPEG& _s);
class OfficeArtBlipPNG;
void parseOfficeArtBlipPNG(LEInputStream& in, OfficeArtBlipPNG& _s);
class OfficeArtBlipDIB;
void parseOfficeArtBlipDIB(LEInputStream& in, OfficeArtBlipDIB& _s);
class OfficeArtBlipTIFF;
void parseOfficeArtBlipTIFF(LEInputStream& in, OfficeArtBlipTIFF& _s);
class RECT;
void parseRECT(LEInputStream& in, RECT& _s);
class POINT;
void parsePOINT(LEInputStream& in, POINT& _s);
class PowerPointStructs;
void parsePowerPointStructs(LEInputStream& in, PowerPointStructs& _s);
class SoundCollectionContainer;
void parseSoundCollectionContainer(LEInputStream& in, SoundCollectionContainer& _s);
class HeadersFootersAtom;
void parseHeadersFootersAtom(LEInputStream& in, HeadersFootersAtom& _s);
class UserDateAtom;
void parseUserDateAtom(LEInputStream& in, UserDateAtom& _s);
class HeaderAtom;
void parseHeaderAtom(LEInputStream& in, HeaderAtom& _s);
class FooterAtom;
void parseFooterAtom(LEInputStream& in, FooterAtom& _s);
class PerSlideHeadersFootersContainer;
void parsePerSlideHeadersFootersContainer(LEInputStream& in, PerSlideHeadersFootersContainer& _s);
class EndDocumentAtom;
void parseEndDocumentAtom(LEInputStream& in, EndDocumentAtom& _s);
class DocInfoListContainer;
void parseDocInfoListContainer(LEInputStream& in, DocInfoListContainer& _s);
class SlideViewInfoAtom;
void parseSlideViewInfoAtom(LEInputStream& in, SlideViewInfoAtom& _s);
class GuideAtom;
void parseGuideAtom(LEInputStream& in, GuideAtom& _s);
class DocProgTagsContainer;
void parseDocProgTagsContainer(LEInputStream& in, DocProgTagsContainer& _s);
class TextAutoNumberScheme;
void parseTextAutoNumberScheme(LEInputStream& in, TextAutoNumberScheme& _s);
class BlipCollection9Container;
void parseBlipCollection9Container(LEInputStream& in, BlipCollection9Container& _s);
class Kinsoku9Atom;
void parseKinsoku9Atom(LEInputStream& in, Kinsoku9Atom& _s);
class ExHyperlink9Container;
void parseExHyperlink9Container(LEInputStream& in, ExHyperlink9Container& _s);
class PresAdvisorFlags9Atom;
void parsePresAdvisorFlags9Atom(LEInputStream& in, PresAdvisorFlags9Atom& _s);
class EnvelopeData9Atom;
void parseEnvelopeData9Atom(LEInputStream& in, EnvelopeData9Atom& _s);
class EnvelopeFlags9Atom;
void parseEnvelopeFlags9Atom(LEInputStream& in, EnvelopeFlags9Atom& _s);
class HTMLDocInfo9Atom;
void parseHTMLDocInfo9Atom(LEInputStream& in, HTMLDocInfo9Atom& _s);
class HTMLPublishInfo9Container;
void parseHTMLPublishInfo9Container(LEInputStream& in, HTMLPublishInfo9Container& _s);
class BroadcastDocInfo9Container;
void parseBroadcastDocInfo9Container(LEInputStream& in, BroadcastDocInfo9Container& _s);
class OutlineTextProps9Container;
void parseOutlineTextProps9Container(LEInputStream& in, OutlineTextProps9Container& _s);
class OutlineTextPropsHeaderExAtom;
void parseOutlineTextPropsHeaderExAtom(LEInputStream& in, OutlineTextPropsHeaderExAtom& _s);
class FontCollection10Container;
void parseFontCollection10Container(LEInputStream& in, FontCollection10Container& _s);
class GridSpacing10Atom;
void parseGridSpacing10Atom(LEInputStream& in, GridSpacing10Atom& _s);
class AuthorNameAtom;
void parseAuthorNameAtom(LEInputStream& in, AuthorNameAtom& _s);
class CommentIndex10Atom;
void parseCommentIndex10Atom(LEInputStream& in, CommentIndex10Atom& _s);
class FontEmbedFlags10Atom;
void parseFontEmbedFlags10Atom(LEInputStream& in, FontEmbedFlags10Atom& _s);
class CopyrightAtom;
void parseCopyrightAtom(LEInputStream& in, CopyrightAtom& _s);
class KeywordsAtom;
void parseKeywordsAtom(LEInputStream& in, KeywordsAtom& _s);
class FilterPrivacyFlags10Atom;
void parseFilterPrivacyFlags10Atom(LEInputStream& in, FilterPrivacyFlags10Atom& _s);
class OutlineTextProps10Container;
void parseOutlineTextProps10Container(LEInputStream& in, OutlineTextProps10Container& _s);
class StyleTextProp10Atom;
void parseStyleTextProp10Atom(LEInputStream& in, StyleTextProp10Atom& _s);
class DocToolbarStates10Atom;
void parseDocToolbarStates10Atom(LEInputStream& in, DocToolbarStates10Atom& _s);
class SlideListTable10Container;
void parseSlideListTable10Container(LEInputStream& in, SlideListTable10Container& _s);
class DiffTree10Container;
void parseDiffTree10Container(LEInputStream& in, DiffTree10Container& _s);
class ModifyPasswordAtom;
void parseModifyPasswordAtom(LEInputStream& in, ModifyPasswordAtom& _s);
class PhotoAlbumInfo10Atom;
void parsePhotoAlbumInfo10Atom(LEInputStream& in, PhotoAlbumInfo10Atom& _s);
class SmartTagStore11Container;
void parseSmartTagStore11Container(LEInputStream& in, SmartTagStore11Container& _s);
class OutlineTextProps11Container;
void parseOutlineTextProps11Container(LEInputStream& in, OutlineTextProps11Container& _s);
class BinaryTagDataBlob;
void parseBinaryTagDataBlob(LEInputStream& in, BinaryTagDataBlob& _s);
class PP12DocBinaryTagExtension;
void parsePP12DocBinaryTagExtension(LEInputStream& in, PP12DocBinaryTagExtension& _s);
class SorterViewInfoContainer;
void parseSorterViewInfoContainer(LEInputStream& in, SorterViewInfoContainer& _s);
class VBAInfoAtom;
void parseVBAInfoAtom(LEInputStream& in, VBAInfoAtom& _s);
class MasterListWithTextContainer;
void parseMasterListWithTextContainer(LEInputStream& in, MasterListWithTextContainer& _s);
class MasterPersistAtom;
void parseMasterPersistAtom(LEInputStream& in, MasterPersistAtom& _s);
class SlideListWithTextContainer;
void parseSlideListWithTextContainer(LEInputStream& in, SlideListWithTextContainer& _s);
class NotesListWithTextContainer;
void parseNotesListWithTextContainer(LEInputStream& in, NotesListWithTextContainer& _s);
class NotesPersistAtom;
void parseNotesPersistAtom(LEInputStream& in, NotesPersistAtom& _s);
class TextHeaderAtom;
void parseTextHeaderAtom(LEInputStream& in, TextHeaderAtom& _s);
class TextCharsAtom;
void parseTextCharsAtom(LEInputStream& in, TextCharsAtom& _s);
class TextBytesAtom;
void parseTextBytesAtom(LEInputStream& in, TextBytesAtom& _s);
class MasterTextPropAtom;
void parseMasterTextPropAtom(LEInputStream& in, MasterTextPropAtom& _s);
class MasterTextPropRun;
void parseMasterTextPropRun(LEInputStream& in, MasterTextPropRun& _s);
class StyleTextPropAtom;
void parseStyleTextPropAtom(LEInputStream& in, StyleTextPropAtom& _s);
class SlideNumberMCAtom;
void parseSlideNumberMCAtom(LEInputStream& in, SlideNumberMCAtom& _s);
class DateTimeMCAtom;
void parseDateTimeMCAtom(LEInputStream& in, DateTimeMCAtom& _s);
class GenericDateMCAtom;
void parseGenericDateMCAtom(LEInputStream& in, GenericDateMCAtom& _s);
class HeaderMCAtom;
void parseHeaderMCAtom(LEInputStream& in, HeaderMCAtom& _s);
class FooterMCAtom;
void parseFooterMCAtom(LEInputStream& in, FooterMCAtom& _s);
class RTFDateTimeMCAtom;
void parseRTFDateTimeMCAtom(LEInputStream& in, RTFDateTimeMCAtom& _s);
class TextBookmarkAtom;
void parseTextBookmarkAtom(LEInputStream& in, TextBookmarkAtom& _s);
class MouseTextInteractiveInfoAtom;
void parseMouseTextInteractiveInfoAtom(LEInputStream& in, MouseTextInteractiveInfoAtom& _s);
class SlideId;
void parseSlideId(LEInputStream& in, SlideId& _s);
class TabStops;
void parseTabStops(LEInputStream& in, TabStops& _s);
class TabStop;
void parseTabStop(LEInputStream& in, TabStop& _s);
class PFWrapFlags;
void parsePFWrapFlags(LEInputStream& in, PFWrapFlags& _s);
class ColorIndexStruct;
void parseColorIndexStruct(LEInputStream& in, ColorIndexStruct& _s);
class BulletFlags;
void parseBulletFlags(LEInputStream& in, BulletFlags& _s);
class PFMasks;
void parsePFMasks(LEInputStream& in, PFMasks& _s);
class CFMasks;
void parseCFMasks(LEInputStream& in, CFMasks& _s);
class CFStyle;
void parseCFStyle(LEInputStream& in, CFStyle& _s);
class FontCollectionContainer;
void parseFontCollectionContainer(LEInputStream& in, FontCollectionContainer& _s);
class FontEntityAtom;
void parseFontEntityAtom(LEInputStream& in, FontEntityAtom& _s);
class FontEmbedDataBlob;
void parseFontEmbedDataBlob(LEInputStream& in, FontEmbedDataBlob& _s);
class KinsokuAtom;
void parseKinsokuAtom(LEInputStream& in, KinsokuAtom& _s);
class KinsokuLeadingAtom;
void parseKinsokuLeadingAtom(LEInputStream& in, KinsokuLeadingAtom& _s);
class KinsokuFollowingAtom;
void parseKinsokuFollowingAtom(LEInputStream& in, KinsokuFollowingAtom& _s);
class TextSpecialInfoAtom;
void parseTextSpecialInfoAtom(LEInputStream& in, TextSpecialInfoAtom& _s);
class SmartTags;
void parseSmartTags(LEInputStream& in, SmartTags& _s);
class ExOleEmbedAtom;
void parseExOleEmbedAtom(LEInputStream& in, ExOleEmbedAtom& _s);
class PointStruct;
void parsePointStruct(LEInputStream& in, PointStruct& _s);
class RatioStruct;
void parseRatioStruct(LEInputStream& in, RatioStruct& _s);
class PersistDirectoryAtom;
void parsePersistDirectoryAtom(LEInputStream& in, PersistDirectoryAtom& _s);
class UnknownDocumentContainerChild;
void parseUnknownDocumentContainerChild(LEInputStream& in, UnknownDocumentContainerChild& _s);
class UnknownDocumentContainerChild2;
void parseUnknownDocumentContainerChild2(LEInputStream& in, UnknownDocumentContainerChild2& _s);
class UnknownDocumentContainerChild3;
void parseUnknownDocumentContainerChild3(LEInputStream& in, UnknownDocumentContainerChild3& _s);
class UnknownDocumentContainerChild4;
void parseUnknownDocumentContainerChild4(LEInputStream& in, UnknownDocumentContainerChild4& _s);
class UnknownOfficeArtClientDataChild;
void parseUnknownOfficeArtClientDataChild(LEInputStream& in, UnknownOfficeArtClientDataChild& _s);
class UnknownSlideContainerChild;
void parseUnknownSlideContainerChild(LEInputStream& in, UnknownSlideContainerChild& _s);
class PersistDirectoryEntry;
void parsePersistDirectoryEntry(LEInputStream& in, PersistDirectoryEntry& _s);
class PersistIdRef;
void parsePersistIdRef(LEInputStream& in, PersistIdRef& _s);
class SchemeListElementColorSchemeAtom;
void parseSchemeListElementColorSchemeAtom(LEInputStream& in, SchemeListElementColorSchemeAtom& _s);
class RoundTripOArtTextStyles12Atom;
void parseRoundTripOArtTextStyles12Atom(LEInputStream& in, RoundTripOArtTextStyles12Atom& _s);
class SlideNameAtom;
void parseSlideNameAtom(LEInputStream& in, SlideNameAtom& _s);
class SlideProgTagsContainer;
void parseSlideProgTagsContainer(LEInputStream& in, SlideProgTagsContainer& _s);
class SlideProgBinaryTagContainer;
void parseSlideProgBinaryTagContainer(LEInputStream& in, SlideProgBinaryTagContainer& _s);
class TagNameAtom;
void parseTagNameAtom(LEInputStream& in, TagNameAtom& _s);
class TagValueAtom;
void parseTagValueAtom(LEInputStream& in, TagValueAtom& _s);
class RoundTripMainMasterRecord;
void parseRoundTripMainMasterRecord(LEInputStream& in, RoundTripMainMasterRecord& _s);
class TemplateNameAtom;
void parseTemplateNameAtom(LEInputStream& in, TemplateNameAtom& _s);
class RoundTripSlideSyncInfo12Container;
void parseRoundTripSlideSyncInfo12Container(LEInputStream& in, RoundTripSlideSyncInfo12Container& _s);
class SlideFlags;
void parseSlideFlags(LEInputStream& in, SlideFlags& _s);
class NotesRoundTripAtom;
void parseNotesRoundTripAtom(LEInputStream& in, NotesRoundTripAtom& _s);
class HandoutContainer;
void parseHandoutContainer(LEInputStream& in, HandoutContainer& _s);
class ExControlStg;
void parseExControlStg(LEInputStream& in, ExControlStg& _s);
class ExOleObjStg;
void parseExOleObjStg(LEInputStream& in, ExOleObjStg& _s);
class UserEditAtom;
void parseUserEditAtom(LEInputStream& in, UserEditAtom& _s);
class VbaProjectStg;
void parseVbaProjectStg(LEInputStream& in, VbaProjectStg& _s);
class SlideAtom;
void parseSlideAtom(LEInputStream& in, SlideAtom& _s);
class SlideShowSlideInfoAtom;
void parseSlideShowSlideInfoAtom(LEInputStream& in, SlideShowSlideInfoAtom& _s);
class SlideShowDocInfoAtom;
void parseSlideShowDocInfoAtom(LEInputStream& in, SlideShowDocInfoAtom& _s);
class SlideSchemeColorSchemeAtom;
void parseSlideSchemeColorSchemeAtom(LEInputStream& in, SlideSchemeColorSchemeAtom& _s);
class RoundTripSlideRecord;
void parseRoundTripSlideRecord(LEInputStream& in, RoundTripSlideRecord& _s);
class NamedShowsContainer;
void parseNamedShowsContainer(LEInputStream& in, NamedShowsContainer& _s);
class SummaryContainer;
void parseSummaryContainer(LEInputStream& in, SummaryContainer& _s);
class DocRoutingSlipAtom;
void parseDocRoutingSlipAtom(LEInputStream& in, DocRoutingSlipAtom& _s);
class PrintOptionsAtom;
void parsePrintOptionsAtom(LEInputStream& in, PrintOptionsAtom& _s);
class RoundTripCustomTableStyles12Atom;
void parseRoundTripCustomTableStyles12Atom(LEInputStream& in, RoundTripCustomTableStyles12Atom& _s);
class ColorStruct;
void parseColorStruct(LEInputStream& in, ColorStruct& _s);
class ExObjListAtom;
void parseExObjListAtom(LEInputStream& in, ExObjListAtom& _s);
class ExAviMovieContainer;
void parseExAviMovieContainer(LEInputStream& in, ExAviMovieContainer& _s);
class ExCDAudioContainer;
void parseExCDAudioContainer(LEInputStream& in, ExCDAudioContainer& _s);
class ExControlAtom;
void parseExControlAtom(LEInputStream& in, ExControlAtom& _s);
class ExHyperlinkAtom;
void parseExHyperlinkAtom(LEInputStream& in, ExHyperlinkAtom& _s);
class FriendlyNameAtom;
void parseFriendlyNameAtom(LEInputStream& in, FriendlyNameAtom& _s);
class TargetAtom;
void parseTargetAtom(LEInputStream& in, TargetAtom& _s);
class LocationAtom;
void parseLocationAtom(LEInputStream& in, LocationAtom& _s);
class ExMCIMovieContainer;
void parseExMCIMovieContainer(LEInputStream& in, ExMCIMovieContainer& _s);
class ExMIDIAudioContainer;
void parseExMIDIAudioContainer(LEInputStream& in, ExMIDIAudioContainer& _s);
class ExWAVAudioEmbeddedContainer;
void parseExWAVAudioEmbeddedContainer(LEInputStream& in, ExWAVAudioEmbeddedContainer& _s);
class ExWAVAudioLinkContainer;
void parseExWAVAudioLinkContainer(LEInputStream& in, ExWAVAudioLinkContainer& _s);
class UnknownExObjListSubContainerChild;
void parseUnknownExObjListSubContainerChild(LEInputStream& in, UnknownExObjListSubContainerChild& _s);
class ExOleLinkAtom;
void parseExOleLinkAtom(LEInputStream& in, ExOleLinkAtom& _s);
class ExOleObjAtom;
void parseExOleObjAtom(LEInputStream& in, ExOleObjAtom& _s);
class MenuNameAtom;
void parseMenuNameAtom(LEInputStream& in, MenuNameAtom& _s);
class ProgIDAtom;
void parseProgIDAtom(LEInputStream& in, ProgIDAtom& _s);
class ClipboardNameAtom;
void parseClipboardNameAtom(LEInputStream& in, ClipboardNameAtom& _s);
class MetafileBlob;
void parseMetafileBlob(LEInputStream& in, MetafileBlob& _s);
class OfficeArtFDGG;
void parseOfficeArtFDGG(LEInputStream& in, OfficeArtFDGG& _s);
class OfficeArtFDG;
void parseOfficeArtFDG(LEInputStream& in, OfficeArtFDG& _s);
class OfficeArtFRITContainer;
void parseOfficeArtFRITContainer(LEInputStream& in, OfficeArtFRITContainer& _s);
class OfficeArtFRIT;
void parseOfficeArtFRIT(LEInputStream& in, OfficeArtFRIT& _s);
class OfficeArtBStoreContainer;
void parseOfficeArtBStoreContainer(LEInputStream& in, OfficeArtBStoreContainer& _s);
class OfficeArtSpgrContainer;
void parseOfficeArtSpgrContainer(LEInputStream& in, OfficeArtSpgrContainer& _s);
class OfficeArtSolverContainer;
void parseOfficeArtSolverContainer(LEInputStream& in, OfficeArtSolverContainer& _s);
class OfficeArtFConnectorRule;
void parseOfficeArtFConnectorRule(LEInputStream& in, OfficeArtFConnectorRule& _s);
class OfficeArtFArcRule;
void parseOfficeArtFArcRule(LEInputStream& in, OfficeArtFArcRule& _s);
class OfficeArtFCalloutRule;
void parseOfficeArtFCalloutRule(LEInputStream& in, OfficeArtFCalloutRule& _s);
class OfficeArtFSPGR;
void parseOfficeArtFSPGR(LEInputStream& in, OfficeArtFSPGR& _s);
class OfficeArtFSP;
void parseOfficeArtFSP(LEInputStream& in, OfficeArtFSP& _s);
class OfficeArtFOPT;
void parseOfficeArtFOPT(LEInputStream& in, OfficeArtFOPT& _s);
class OfficeArtSecondaryFOPT;
void parseOfficeArtSecondaryFOPT(LEInputStream& in, OfficeArtSecondaryFOPT& _s);
class OfficeArtTertiaryFOPT;
void parseOfficeArtTertiaryFOPT(LEInputStream& in, OfficeArtTertiaryFOPT& _s);
class OfficeArtFOPTEComplexData;
void parseOfficeArtFOPTEComplexData(LEInputStream& in, OfficeArtFOPTEComplexData& _s);
class FixedPoint;
void parseFixedPoint(LEInputStream& in, FixedPoint& _s);
class OfficeArtCOLORREF;
void parseOfficeArtCOLORREF(LEInputStream& in, OfficeArtCOLORREF& _s);
class OfficeArtChildAnchor;
void parseOfficeArtChildAnchor(LEInputStream& in, OfficeArtChildAnchor& _s);
class OfficeArtFPSPL;
void parseOfficeArtFPSPL(LEInputStream& in, OfficeArtFPSPL& _s);
class RectStruct;
void parseRectStruct(LEInputStream& in, RectStruct& _s);
class SmallRectStruct;
void parseSmallRectStruct(LEInputStream& in, SmallRectStruct& _s);
class ShapeFlagsAtom;
void parseShapeFlagsAtom(LEInputStream& in, ShapeFlagsAtom& _s);
class ShapeFlags10Atom;
void parseShapeFlags10Atom(LEInputStream& in, ShapeFlags10Atom& _s);
class ExObjRefAtom;
void parseExObjRefAtom(LEInputStream& in, ExObjRefAtom& _s);
class AnimationInfoAtom;
void parseAnimationInfoAtom(LEInputStream& in, AnimationInfoAtom& _s);
class SoundContainer;
void parseSoundContainer(LEInputStream& in, SoundContainer& _s);
class InteractiveInfoAtom;
void parseInteractiveInfoAtom(LEInputStream& in, InteractiveInfoAtom& _s);
class MacroNameAtom;
void parseMacroNameAtom(LEInputStream& in, MacroNameAtom& _s);
class PlaceholderAtom;
void parsePlaceholderAtom(LEInputStream& in, PlaceholderAtom& _s);
class RecolorInfoAtom;
void parseRecolorInfoAtom(LEInputStream& in, RecolorInfoAtom& _s);
class OutlineTextRefAtom;
void parseOutlineTextRefAtom(LEInputStream& in, OutlineTextRefAtom& _s);
class ShapeClientRoundtripDataSubcontainerOrAtom;
void parseShapeClientRoundtripDataSubcontainerOrAtom(LEInputStream& in, ShapeClientRoundtripDataSubcontainerOrAtom& _s);
class OfficeArtClientTextBox;
void parseOfficeArtClientTextBox(LEInputStream& in, OfficeArtClientTextBox& _s);
class OfficeArtIDCL;
void parseOfficeArtIDCL(LEInputStream& in, OfficeArtIDCL& _s);
class OfficeArtFOPTEOPID;
void parseOfficeArtFOPTEOPID(LEInputStream& in, OfficeArtFOPTEOPID& _s);
class OfficeArtColorMRUContainer;
void parseOfficeArtColorMRUContainer(LEInputStream& in, OfficeArtColorMRUContainer& _s);
class MSOCR;
void parseMSOCR(LEInputStream& in, MSOCR& _s);
class OfficeArtSplitMenuColorContainer;
void parseOfficeArtSplitMenuColorContainer(LEInputStream& in, OfficeArtSplitMenuColorContainer& _s);
class todo;
void parsetodo(LEInputStream& in, todo& _s);
class FibBase;
void parseFibBase(LEInputStream& in, FibBase& _s);
class FibRgW97;
void parseFibRgW97(LEInputStream& in, FibRgW97& _s);
class FibRgLw97;
void parseFibRgLw97(LEInputStream& in, FibRgLw97& _s);
class FibRgFcLcb97;
void parseFibRgFcLcb97(LEInputStream& in, FibRgFcLcb97& _s);
class FibRgFcLcb2000;
void parseFibRgFcLcb2000(LEInputStream& in, FibRgFcLcb2000& _s);
class FibRgFcLcb2002;
void parseFibRgFcLcb2002(LEInputStream& in, FibRgFcLcb2002& _s);
class LPStshi;
void parseLPStshi(LEInputStream& in, LPStshi& _s);
class LPStd;
void parseLPStd(LEInputStream& in, LPStd& _s);
class PlcfSed;
void parsePlcfSed(LEInputStream& in, PlcfSed& _s);
class Sed;
void parseSed(LEInputStream& in, Sed& _s);
class Plcfhdd;
void parsePlcfhdd(LEInputStream& in, Plcfhdd& _s);
class PlcBteChpx;
void parsePlcBteChpx(LEInputStream& in, PlcBteChpx& _s);
class PlcfBtePapx;
void parsePlcfBtePapx(LEInputStream& in, PlcfBtePapx& _s);
class Tcg;
void parseTcg(LEInputStream& in, Tcg& _s);
class PrcData;
void parsePrcData(LEInputStream& in, PrcData& _s);
class Sprm;
void parseSprm(LEInputStream& in, Sprm& _s);
class Pcdt;
void parsePcdt(LEInputStream& in, Pcdt& _s);
class FCompressed;
void parseFCompressed(LEInputStream& in, FCompressed& _s);
class Prm0;
void parsePrm0(LEInputStream& in, Prm0& _s);
class Prm1;
void parsePrm1(LEInputStream& in, Prm1& _s);
class SttbfFfn;
void parseSttbfFfn(LEInputStream& in, SttbfFfn& _s);
class SttbfFfnEntry;
void parseSttbfFfnEntry(LEInputStream& in, SttbfFfnEntry& _s);
class CodePageString;
void parseCodePageString(LEInputStream& in, CodePageString& _s);
class FILETIME;
void parseFILETIME(LEInputStream& in, FILETIME& _s);
class ClipboardData;
void parseClipboardData(LEInputStream& in, ClipboardData& _s);
class PropertyIdentifierAndOffset;
void parsePropertyIdentifierAndOffset(LEInputStream& in, PropertyIdentifierAndOffset& _s);
class TypedPropertyValue;
void parseTypedPropertyValue(LEInputStream& in, TypedPropertyValue& _s);
class PropertySet;
void parsePropertySet(LEInputStream& in, PropertySet& _s);
class PropertySetStream;
void parsePropertySetStream(LEInputStream& in, PropertySetStream& _s);
class SummaryInformationPropertySetStream;
void parseSummaryInformationPropertySetStream(LEInputStream& in, SummaryInformationPropertySetStream& _s);
class DocumentSummaryInformationPropertySetStream;
void parseDocumentSummaryInformationPropertySetStream(LEInputStream& in, DocumentSummaryInformationPropertySetStream& _s);
class PicturesStream;
void parsePicturesStream(LEInputStream& in, PicturesStream& _s);
class OfficeArtMetafileHeader;
void parseOfficeArtMetafileHeader(LEInputStream& in, OfficeArtMetafileHeader& _s);
class SlideHeadersFootersContainer;
void parseSlideHeadersFootersContainer(LEInputStream& in, SlideHeadersFootersContainer& _s);
class NotesHeadersFootersContainer;
void parseNotesHeadersFootersContainer(LEInputStream& in, NotesHeadersFootersContainer& _s);
class ScalingStruct;
void parseScalingStruct(LEInputStream& in, ScalingStruct& _s);
class TextPFException9;
void parseTextPFException9(LEInputStream& in, TextPFException9& _s);
class TextCFException9;
void parseTextCFException9(LEInputStream& in, TextCFException9& _s);
class TextDefaults9Atom;
void parseTextDefaults9Atom(LEInputStream& in, TextDefaults9Atom& _s);
class Kinsoku9Container;
void parseKinsoku9Container(LEInputStream& in, Kinsoku9Container& _s);
class TextCFException10;
void parseTextCFException10(LEInputStream& in, TextCFException10& _s);
class TextDefaults10Atom;
void parseTextDefaults10Atom(LEInputStream& in, TextDefaults10Atom& _s);
class CommentIndex10Container;
void parseCommentIndex10Container(LEInputStream& in, CommentIndex10Container& _s);
class OutlineTextProps10Entry;
void parseOutlineTextProps10Entry(LEInputStream& in, OutlineTextProps10Entry& _s);
class PP11DocBinaryTagExtension;
void parsePP11DocBinaryTagExtension(LEInputStream& in, PP11DocBinaryTagExtension& _s);
class UnknownBinaryTag;
void parseUnknownBinaryTag(LEInputStream& in, UnknownBinaryTag& _s);
class NoZoomViewInfoAtom;
void parseNoZoomViewInfoAtom(LEInputStream& in, NoZoomViewInfoAtom& _s);
class VBAInfoContainer;
void parseVBAInfoContainer(LEInputStream& in, VBAInfoContainer& _s);
class NormalViewSetInfoAtom;
void parseNormalViewSetInfoAtom(LEInputStream& in, NormalViewSetInfoAtom& _s);
class TextContainer;
void parseTextContainer(LEInputStream& in, TextContainer& _s);
class TextContainerMeta;
void parseTextContainerMeta(LEInputStream& in, TextContainerMeta& _s);
class SlidePersistAtom;
void parseSlidePersistAtom(LEInputStream& in, SlidePersistAtom& _s);
class TextRuler;
void parseTextRuler(LEInputStream& in, TextRuler& _s);
class TextPFException;
void parseTextPFException(LEInputStream& in, TextPFException& _s);
class TextCFException;
void parseTextCFException(LEInputStream& in, TextCFException& _s);
class FontCollectionEntry;
void parseFontCollectionEntry(LEInputStream& in, FontCollectionEntry& _s);
class KinsokuContainer;
void parseKinsokuContainer(LEInputStream& in, KinsokuContainer& _s);
class TextSIException;
void parseTextSIException(LEInputStream& in, TextSIException& _s);
class TextMasterStyleLevel;
void parseTextMasterStyleLevel(LEInputStream& in, TextMasterStyleLevel& _s);
class DocumentAtom;
void parseDocumentAtom(LEInputStream& in, DocumentAtom& _s);
class ProgStringTagContainer;
void parseProgStringTagContainer(LEInputStream& in, ProgStringTagContainer& _s);
class NotesAtom;
void parseNotesAtom(LEInputStream& in, NotesAtom& _s);
class ExObjListContainer;
void parseExObjListContainer(LEInputStream& in, ExObjListContainer& _s);
class ExControlContainer;
void parseExControlContainer(LEInputStream& in, ExControlContainer& _s);
class ExHyperlinkContainer;
void parseExHyperlinkContainer(LEInputStream& in, ExHyperlinkContainer& _s);
class ExOleLinkContainer;
void parseExOleLinkContainer(LEInputStream& in, ExOleLinkContainer& _s);
class ExOleEmbedContainer;
void parseExOleEmbedContainer(LEInputStream& in, ExOleEmbedContainer& _s);
class OfficeArtFDGGBlock;
void parseOfficeArtFDGGBlock(LEInputStream& in, OfficeArtFDGGBlock& _s);
class OfficeArtSolverContainerFileBlock;
void parseOfficeArtSolverContainerFileBlock(LEInputStream& in, OfficeArtSolverContainerFileBlock& _s);
class ProtectionBooleanProperties;
void parseProtectionBooleanProperties(LEInputStream& in, ProtectionBooleanProperties& _s);
class Rotation;
void parseRotation(LEInputStream& in, Rotation& _s);
class ITxid;
void parseITxid(LEInputStream& in, ITxid& _s);
class DxTextLeft;
void parseDxTextLeft(LEInputStream& in, DxTextLeft& _s);
class DyTextTop;
void parseDyTextTop(LEInputStream& in, DyTextTop& _s);
class DxTextRight;
void parseDxTextRight(LEInputStream& in, DxTextRight& _s);
class DyTextBottom;
void parseDyTextBottom(LEInputStream& in, DyTextBottom& _s);
class WrapText;
void parseWrapText(LEInputStream& in, WrapText& _s);
class AnchorText;
void parseAnchorText(LEInputStream& in, AnchorText& _s);
class TextBooleanProperties;
void parseTextBooleanProperties(LEInputStream& in, TextBooleanProperties& _s);
class HspNext;
void parseHspNext(LEInputStream& in, HspNext& _s);
class Pib;
void parsePib(LEInputStream& in, Pib& _s);
class PibName;
void parsePibName(LEInputStream& in, PibName& _s);
class ShapePath;
void parseShapePath(LEInputStream& in, ShapePath& _s);
class adjust2Value;
void parseadjust2Value(LEInputStream& in, adjust2Value& _s);
class adjust3Value;
void parseadjust3Value(LEInputStream& in, adjust3Value& _s);
class GeometryBooleanProperties;
void parseGeometryBooleanProperties(LEInputStream& in, GeometryBooleanProperties& _s);
class FillType;
void parseFillType(LEInputStream& in, FillType& _s);
class FillColor;
void parseFillColor(LEInputStream& in, FillColor& _s);
class FillBackColor;
void parseFillBackColor(LEInputStream& in, FillBackColor& _s);
class FillBlip;
void parseFillBlip(LEInputStream& in, FillBlip& _s);
class FillRectRight;
void parseFillRectRight(LEInputStream& in, FillRectRight& _s);
class FillRectBottom;
void parseFillRectBottom(LEInputStream& in, FillRectBottom& _s);
class FillStyleBooleanProperties;
void parseFillStyleBooleanProperties(LEInputStream& in, FillStyleBooleanProperties& _s);
class LineColor;
void parseLineColor(LEInputStream& in, LineColor& _s);
class LineOpacity;
void parseLineOpacity(LEInputStream& in, LineOpacity& _s);
class LineBackColor;
void parseLineBackColor(LEInputStream& in, LineBackColor& _s);
class LineFillBlip;
void parseLineFillBlip(LEInputStream& in, LineFillBlip& _s);
class LineWidth;
void parseLineWidth(LEInputStream& in, LineWidth& _s);
class LineStyle;
void parseLineStyle(LEInputStream& in, LineStyle& _s);
class LineDashing;
void parseLineDashing(LEInputStream& in, LineDashing& _s);
class LineStartArrowhead;
void parseLineStartArrowhead(LEInputStream& in, LineStartArrowhead& _s);
class LineEndArrowhead;
void parseLineEndArrowhead(LEInputStream& in, LineEndArrowhead& _s);
class LineStartArrowWidth;
void parseLineStartArrowWidth(LEInputStream& in, LineStartArrowWidth& _s);
class LineStartArrowLength;
void parseLineStartArrowLength(LEInputStream& in, LineStartArrowLength& _s);
class LineEndArrowWidth;
void parseLineEndArrowWidth(LEInputStream& in, LineEndArrowWidth& _s);
class LineEndArrowLength;
void parseLineEndArrowLength(LEInputStream& in, LineEndArrowLength& _s);
class LineJoinStyle;
void parseLineJoinStyle(LEInputStream& in, LineJoinStyle& _s);
class LineStyleBooleanProperties;
void parseLineStyleBooleanProperties(LEInputStream& in, LineStyleBooleanProperties& _s);
class ShadowColor;
void parseShadowColor(LEInputStream& in, ShadowColor& _s);
class ShadowOpacity;
void parseShadowOpacity(LEInputStream& in, ShadowOpacity& _s);
class ShadowOffsetX;
void parseShadowOffsetX(LEInputStream& in, ShadowOffsetX& _s);
class ShadowOffsetY;
void parseShadowOffsetY(LEInputStream& in, ShadowOffsetY& _s);
class ShadowStyleBooleanPropertiesr;
void parseShadowStyleBooleanPropertiesr(LEInputStream& in, ShadowStyleBooleanPropertiesr& _s);
class HspMaster;
void parseHspMaster(LEInputStream& in, HspMaster& _s);
class BWMode;
void parseBWMode(LEInputStream& in, BWMode& _s);
class ShapeBooleanProperties;
void parseShapeBooleanProperties(LEInputStream& in, ShapeBooleanProperties& _s);
class LidRegroup;
void parseLidRegroup(LEInputStream& in, LidRegroup& _s);
class WzFillId;
void parseWzFillId(LEInputStream& in, WzFillId& _s);
class OfficeArtClientAnchor;
void parseOfficeArtClientAnchor(LEInputStream& in, OfficeArtClientAnchor& _s);
class AnimationInfoContainer;
void parseAnimationInfoContainer(LEInputStream& in, AnimationInfoContainer& _s);
class MouseInteractiveInfoContainer;
void parseMouseInteractiveInfoContainer(LEInputStream& in, MouseInteractiveInfoContainer& _s);
class TextRulerAtom;
void parseTextRulerAtom(LEInputStream& in, TextRulerAtom& _s);
class OfficeArtFOPTE;
void parseOfficeArtFOPTE(LEInputStream& in, OfficeArtFOPTE& _s);
class Fib;
void parseFib(LEInputStream& in, Fib& _s);
class STSH;
void parseSTSH(LEInputStream& in, STSH& _s);
class Clx;
void parseClx(LEInputStream& in, Clx& _s);
class Pcr;
void parsePcr(LEInputStream& in, Pcr& _s);
class Prm;
void parsePrm(LEInputStream& in, Prm& _s);
class OfficeArtBlipEMF;
void parseOfficeArtBlipEMF(LEInputStream& in, OfficeArtBlipEMF& _s);
class OfficeArtBlipWMF;
void parseOfficeArtBlipWMF(LEInputStream& in, OfficeArtBlipWMF& _s);
class OfficeArtBlipPICT;
void parseOfficeArtBlipPICT(LEInputStream& in, OfficeArtBlipPICT& _s);
class OfficeArtBlip;
void parseOfficeArtBlip(LEInputStream& in, OfficeArtBlip& _s);
class ZoomViewInfoAtom;
void parseZoomViewInfoAtom(LEInputStream& in, ZoomViewInfoAtom& _s);
class TextMasterStyle9Level;
void parseTextMasterStyle9Level(LEInputStream& in, TextMasterStyle9Level& _s);
class StyleTextProp9;
void parseStyleTextProp9(LEInputStream& in, StyleTextProp9& _s);
class PP10DocBinaryTagExtension;
void parsePP10DocBinaryTagExtension(LEInputStream& in, PP10DocBinaryTagExtension& _s);
class TextMasterStyle10Level;
void parseTextMasterStyle10Level(LEInputStream& in, TextMasterStyle10Level& _s);
class NotesTextViewInfoContainer;
void parseNotesTextViewInfoContainer(LEInputStream& in, NotesTextViewInfoContainer& _s);
class OutlineViewInfoContainer;
void parseOutlineViewInfoContainer(LEInputStream& in, OutlineViewInfoContainer& _s);
class NormalViewSetInfoContainer;
void parseNormalViewSetInfoContainer(LEInputStream& in, NormalViewSetInfoContainer& _s);
class SlideListWithTextSubContainerOrAtom;
void parseSlideListWithTextSubContainerOrAtom(LEInputStream& in, SlideListWithTextSubContainerOrAtom& _s);
class TextContainerInteractiveInfo;
void parseTextContainerInteractiveInfo(LEInputStream& in, TextContainerInteractiveInfo& _s);
class TextClientDataSubContainerOrAtom;
void parseTextClientDataSubContainerOrAtom(LEInputStream& in, TextClientDataSubContainerOrAtom& _s);
class TextPFRun;
void parseTextPFRun(LEInputStream& in, TextPFRun& _s);
class TextCFRun;
void parseTextCFRun(LEInputStream& in, TextCFRun& _s);
class TextCFExceptionAtom;
void parseTextCFExceptionAtom(LEInputStream& in, TextCFExceptionAtom& _s);
class DefaultRulerAtom;
void parseDefaultRulerAtom(LEInputStream& in, DefaultRulerAtom& _s);
class TextPFExceptionAtom;
void parseTextPFExceptionAtom(LEInputStream& in, TextPFExceptionAtom& _s);
class TextSIRun;
void parseTextSIRun(LEInputStream& in, TextSIRun& _s);
class TextSIExceptionAtom;
void parseTextSIExceptionAtom(LEInputStream& in, TextSIExceptionAtom& _s);
class TextMasterStyleAtom;
void parseTextMasterStyleAtom(LEInputStream& in, TextMasterStyleAtom& _s);
class SlideProgTagsSubContainerOrAtom;
void parseSlideProgTagsSubContainerOrAtom(LEInputStream& in, SlideProgTagsSubContainerOrAtom& _s);
class ExObjListSubContainer;
void parseExObjListSubContainer(LEInputStream& in, ExObjListSubContainer& _s);
class OfficeArtDggContainer;
void parseOfficeArtDggContainer(LEInputStream& in, OfficeArtDggContainer& _s);
class OfficeArtFOPTEChoice;
void parseOfficeArtFOPTEChoice(LEInputStream& in, OfficeArtFOPTEChoice& _s);
class OfficeArtClientData;
void parseOfficeArtClientData(LEInputStream& in, OfficeArtClientData& _s);
class WordDocument;
void parseWordDocument(LEInputStream& in, WordDocument& _s);
class Table;
void parseTable(LEInputStream& in, Table& _s);
class Pcd;
void parsePcd(LEInputStream& in, Pcd& _s);
class OfficeArtFBSE;
void parseOfficeArtFBSE(LEInputStream& in, OfficeArtFBSE& _s);
class OfficeArtBStoreContainerFileBlock;
void parseOfficeArtBStoreContainerFileBlock(LEInputStream& in, OfficeArtBStoreContainerFileBlock& _s);
class SlideViewInfoInstance;
void parseSlideViewInfoInstance(LEInputStream& in, SlideViewInfoInstance& _s);
class TextMasterStyle9Atom;
void parseTextMasterStyle9Atom(LEInputStream& in, TextMasterStyle9Atom& _s);
class BlipEntityAtom;
void parseBlipEntityAtom(LEInputStream& in, BlipEntityAtom& _s);
class StyleTextProp9Atom;
void parseStyleTextProp9Atom(LEInputStream& in, StyleTextProp9Atom& _s);
class TextMasterStyle10Atom;
void parseTextMasterStyle10Atom(LEInputStream& in, TextMasterStyle10Atom& _s);
class DocumentTextInfoContainer;
void parseDocumentTextInfoContainer(LEInputStream& in, DocumentTextInfoContainer& _s);
class DrawingGroupContainer;
void parseDrawingGroupContainer(LEInputStream& in, DrawingGroupContainer& _s);
class OfficeArtSpContainer;
void parseOfficeArtSpContainer(LEInputStream& in, OfficeArtSpContainer& _s);
class DocumentContainer;
void parseDocumentContainer(LEInputStream& in, DocumentContainer& _s);
class DocInfoListSubContainerOrAtom;
void parseDocInfoListSubContainerOrAtom(LEInputStream& in, DocInfoListSubContainerOrAtom& _s);
class PP9DocBinaryTagExtension;
void parsePP9DocBinaryTagExtension(LEInputStream& in, PP9DocBinaryTagExtension& _s);
class OutlineTextProps9Entry;
void parseOutlineTextProps9Entry(LEInputStream& in, OutlineTextProps9Entry& _s);
class OfficeArtDgContainer;
void parseOfficeArtDgContainer(LEInputStream& in, OfficeArtDgContainer& _s);
class OfficeArtSpgrContainerFileBlock;
void parseOfficeArtSpgrContainerFileBlock(LEInputStream& in, OfficeArtSpgrContainerFileBlock& _s);
class DocProgBinaryTagSubContainerOrAtom;
void parseDocProgBinaryTagSubContainerOrAtom(LEInputStream& in, DocProgBinaryTagSubContainerOrAtom& _s);
class DrawingContainer;
void parseDrawingContainer(LEInputStream& in, DrawingContainer& _s);
class DocProgBinaryTagContainer;
void parseDocProgBinaryTagContainer(LEInputStream& in, DocProgBinaryTagContainer& _s);
class MainMasterContainer;
void parseMainMasterContainer(LEInputStream& in, MainMasterContainer& _s);
class SlideContainer;
void parseSlideContainer(LEInputStream& in, SlideContainer& _s);
class NotesContainer;
void parseNotesContainer(LEInputStream& in, NotesContainer& _s);
class DocProgTagsSubContainerOrAtom;
void parseDocProgTagsSubContainerOrAtom(LEInputStream& in, DocProgTagsSubContainerOrAtom& _s);
class MasterOrSlideContainer;
void parseMasterOrSlideContainer(LEInputStream& in, MasterOrSlideContainer& _s);
class PowerPointStruct;
void parsePowerPointStruct(LEInputStream& in, PowerPointStruct& _s);
class RecordHeader : public StreamOffset {
public:
    quint8 recVer;
    quint16 recInstance;
    quint16 recType;
    quint32 recLen;
    RecordHeader(void* /*dummy*/ = 0) {}
};
class CurrentUserAtom : public StreamOffset {
public:
    bool _has_unicodeUserName;
    RecordHeader rh;
    quint32 size;
    quint32 headerToken;
    quint32 offsetToCurrentEdit;
    quint16 lenUserName;
    quint16 docFileVersion;
    quint8 majorVersion;
    quint8 minorVersion;
    quint16 unused;
    QByteArray ansiUserName;
    quint32 relVersion;
    QByteArray unicodeUserName;
    CurrentUserAtom(void* /*dummy*/ = 0) {}
};
class TODOS : public StreamOffset {
public:
    QList<Byte> anon;
    TODOS(void* /*dummy*/ = 0) {}
};
class Byte : public StreamOffset {
public:
    quint8 b;
    Byte(void* /*dummy*/ = 0) {}
};
class CurrentUserStream : public StreamOffset {
public:
    CurrentUserAtom anon1;
    QList<Byte> trailing;
    CurrentUserStream(void* /*dummy*/ = 0) {}
};
class OfficeArtBStoreDelay : public StreamOffset {
public:
    QList<OfficeArtBStoreContainerFileBlock> anon1;
    OfficeArtBStoreDelay(void* /*dummy*/ = 0) {}
};
class OfficeArtRecordHeader : public StreamOffset {
public:
    quint8 recVer;
    quint16 recInstance;
    quint16 recType;
    quint32 recLen;
    OfficeArtRecordHeader(void* /*dummy*/ = 0) {}
};
class OfficeArtBlipJPEG : public StreamOffset {
public:
    bool _has_rgbUid2;
    OfficeArtRecordHeader rh;
    QByteArray rgbUid1;
    QByteArray rgbUid2;
    quint8 tag;
    QByteArray BLIPFileData;
    OfficeArtBlipJPEG(void* /*dummy*/ = 0) {}
};
class OfficeArtBlipPNG : public StreamOffset {
public:
    bool _has_rgbUid2;
    OfficeArtRecordHeader rh;
    QByteArray rgbUid1;
    QByteArray rgbUid2;
    quint8 tag;
    QByteArray BLIPFileData;
    OfficeArtBlipPNG(void* /*dummy*/ = 0) {}
};
class OfficeArtBlipDIB : public StreamOffset {
public:
    bool _has_rgbUid2;
    OfficeArtRecordHeader rh;
    QByteArray rgbUid1;
    QByteArray rgbUid2;
    quint8 tag;
    QByteArray BLIPFileData;
    OfficeArtBlipDIB(void* /*dummy*/ = 0) {}
};
class OfficeArtBlipTIFF : public StreamOffset {
public:
    bool _has_rgbUid2;
    OfficeArtRecordHeader rh;
    QByteArray rgbUid1;
    QByteArray rgbUid2;
    quint8 tag;
    QByteArray BLIPFileData;
    OfficeArtBlipTIFF(void* /*dummy*/ = 0) {}
};
class RECT : public StreamOffset {
public:
    qint32 left;
    qint32 top;
    qint32 right;
    qint32 bottom;
    RECT(void* /*dummy*/ = 0) {}
};
class POINT : public StreamOffset {
public:
    qint32 x;
    qint32 y;
    POINT(void* /*dummy*/ = 0) {}
};
class PowerPointStructs : public StreamOffset {
public:
    QList<PowerPointStruct> anon;
    PowerPointStructs(void* /*dummy*/ = 0) {}
};
class SoundCollectionContainer : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    SoundCollectionContainer(void* /*dummy*/ = 0) {}
};
class HeadersFootersAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint16 formatId;
    bool fHasDate;
    bool fHasTodayDate;
    bool fHasUserDate;
    bool fHasSlideNumber;
    bool fHasHeader;
    bool fHasFooter;
    quint8 reserved1;
    quint8 reserved2;
    HeadersFootersAtom(void* /*dummy*/ = 0) {}
};
class UserDateAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray userDate;
    UserDateAtom(void* /*dummy*/ = 0) {}
};
class HeaderAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray footer;
    HeaderAtom(void* /*dummy*/ = 0) {}
};
class FooterAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray footer;
    FooterAtom(void* /*dummy*/ = 0) {}
};
class PerSlideHeadersFootersContainer : public StreamOffset {
public:
    RecordHeader rh;
    HeadersFootersAtom hfAtom;
    QSharedPointer<UserDateAtom> userDateAtom;
    QSharedPointer<FooterAtom> footerAtom;
    PerSlideHeadersFootersContainer(void* /*dummy*/ = 0) {}
};
class EndDocumentAtom : public StreamOffset {
public:
    RecordHeader rh;
    EndDocumentAtom(void* /*dummy*/ = 0) {}
};
class DocInfoListContainer : public StreamOffset {
public:
    RecordHeader rh;
    QList<DocInfoListSubContainerOrAtom> rgChildRec;
    DocInfoListContainer(void* /*dummy*/ = 0) {}
};
class SlideViewInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint8 unused1;
    quint8 fSnapToGrid;
    quint8 fSnapToShape;
    SlideViewInfoAtom(void* /*dummy*/ = 0) {}
};
class GuideAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 type;
    qint32 pos;
    GuideAtom(void* /*dummy*/ = 0) {}
};
class DocProgTagsContainer : public StreamOffset {
public:
    RecordHeader rh;
    QList<DocProgTagsSubContainerOrAtom> rgChildRec;
    DocProgTagsContainer(void* /*dummy*/ = 0) {}
};
class TextAutoNumberScheme : public StreamOffset {
public:
    quint16 scheme;
    quint16 startNum;
    TextAutoNumberScheme(void* /*dummy*/ = 0) {}
};
class BlipCollection9Container : public StreamOffset {
public:
    RecordHeader rh;
    QList<BlipEntityAtom> rgBlipEntityAtom;
    BlipCollection9Container(void* /*dummy*/ = 0) {}
};
class Kinsoku9Atom : public StreamOffset {
public:
    RecordHeader rh;
    quint8 korLevel;
    quint8 scLevel;
    quint8 tcLevel;
    quint8 jpnLevel;
    quint8 reserveda;
    quint32 reservedb;
    Kinsoku9Atom(void* /*dummy*/ = 0) {}
};
class ExHyperlink9Container : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    ExHyperlink9Container(void* /*dummy*/ = 0) {}
};
class PresAdvisorFlags9Atom : public StreamOffset {
public:
    RecordHeader rh;
    bool fDisableCaseStyleTitleRule;
    bool fDisableCaseStyleBodyRule;
    bool fDisableEndPunctuationTitleRule;
    bool fDisableEndPunctuationBodyRule;
    bool fDisableTooManyBulletsRule;
    bool fDisableFontSizeTitleRule;
    bool fDisableFontSizeBodyRule;
    bool fDisableNumberOfLinesTitleRule;
    bool fDisableNumberOfLinesBodyRule;
    bool fDisableTooManyFontsRule;
    bool fDisablePrintTip;
    quint8 reserveda;
    quint8 reservedb;
    quint8 reservedc;
    PresAdvisorFlags9Atom(void* /*dummy*/ = 0) {}
};
class EnvelopeData9Atom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    EnvelopeData9Atom(void* /*dummy*/ = 0) {}
};
class EnvelopeFlags9Atom : public StreamOffset {
public:
    RecordHeader rh;
    bool fHasEnvelope;
    bool fEnvelopeVisible;
    quint8 reserved1;
    bool fEnvelopeDirty;
    quint8 reserved2a;
    quint32 reserved2b;
    EnvelopeFlags9Atom(void* /*dummy*/ = 0) {}
};
class HTMLDocInfo9Atom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 unused1;
    quint32 encoding;
    quint16 frameColorType;
    quint8 screenSize;
    quint8 unused2;
    quint8 outputType;
    bool fShowFrame;
    bool fResizeGraphics;
    bool fOrganizeInFolder;
    bool fUseLongFileNames;
    bool fRelyOnVML;
    bool fAllowPNG;
    bool fShowSlideAnimation;
    bool reserved1;
    quint16 unused3;
    HTMLDocInfo9Atom(void* /*dummy*/ = 0) {}
};
class HTMLPublishInfo9Container : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    HTMLPublishInfo9Container(void* /*dummy*/ = 0) {}
};
class BroadcastDocInfo9Container : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    BroadcastDocInfo9Container(void* /*dummy*/ = 0) {}
};
class OutlineTextProps9Container : public StreamOffset {
public:
    RecordHeader rh;
    QList<OutlineTextProps9Entry> rgOutlineTextProps9Entry;
    OutlineTextProps9Container(void* /*dummy*/ = 0) {}
};
class OutlineTextPropsHeaderExAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    OutlineTextPropsHeaderExAtom(void* /*dummy*/ = 0) {}
};
class FontCollection10Container : public StreamOffset {
public:
    RecordHeader rh;
    QList<FontCollectionEntry> rgFontCollectionEntry;
    FontCollection10Container(void* /*dummy*/ = 0) {}
};
class GridSpacing10Atom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 x;
    quint32 y;
    GridSpacing10Atom(void* /*dummy*/ = 0) {}
};
class AuthorNameAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray authorName;
    AuthorNameAtom(void* /*dummy*/ = 0) {}
};
class CommentIndex10Atom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 colorIndex;
    qint32 commentIndexSeed;
    CommentIndex10Atom(void* /*dummy*/ = 0) {}
};
class FontEmbedFlags10Atom : public StreamOffset {
public:
    RecordHeader rh;
    bool fSubset;
    bool fSubsetOptionConfirmed;
    quint32 unused;
    FontEmbedFlags10Atom(void* /*dummy*/ = 0) {}
};
class CopyrightAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray copyright;
    CopyrightAtom(void* /*dummy*/ = 0) {}
};
class KeywordsAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray keywords;
    KeywordsAtom(void* /*dummy*/ = 0) {}
};
class FilterPrivacyFlags10Atom : public StreamOffset {
public:
    RecordHeader rh;
    bool fRemovePII;
    quint32 reserved2a;
    quint8 reserved2b;
    quint8 reserved2c;
    FilterPrivacyFlags10Atom(void* /*dummy*/ = 0) {}
};
class OutlineTextProps10Container : public StreamOffset {
public:
    RecordHeader rh;
    QList<OutlineTextProps10Entry> rgOutlineTextProps10Entry;
    OutlineTextProps10Container(void* /*dummy*/ = 0) {}
};
class StyleTextProp10Atom : public StreamOffset {
public:
    RecordHeader rh;
    QList<TextCFException10> rgStyleTextProp10;
    StyleTextProp10Atom(void* /*dummy*/ = 0) {}
};
class DocToolbarStates10Atom : public StreamOffset {
public:
    RecordHeader rh;
    bool fShowReviewingToolbar;
    bool fShowReviewingGallery;
    quint8 reserved;
    DocToolbarStates10Atom(void* /*dummy*/ = 0) {}
};
class SlideListTable10Container : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    SlideListTable10Container(void* /*dummy*/ = 0) {}
};
class DiffTree10Container : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    DiffTree10Container(void* /*dummy*/ = 0) {}
};
class ModifyPasswordAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray modifyPassword;
    ModifyPasswordAtom(void* /*dummy*/ = 0) {}
};
class PhotoAlbumInfo10Atom : public StreamOffset {
public:
    RecordHeader rh;
    quint8 fUseBlackWhite;
    quint8 fHasCaption;
    quint8 layout;
    quint8 unused;
    quint16 frameShape;
    PhotoAlbumInfo10Atom(void* /*dummy*/ = 0) {}
};
class SmartTagStore11Container : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    SmartTagStore11Container(void* /*dummy*/ = 0) {}
};
class OutlineTextProps11Container : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    OutlineTextProps11Container(void* /*dummy*/ = 0) {}
};
class BinaryTagDataBlob : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray data;
    BinaryTagDataBlob(void* /*dummy*/ = 0) {}
};
class PP12DocBinaryTagExtension : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray tagName;
    RecordHeader rhData;
    QByteArray todo;
    PP12DocBinaryTagExtension(void* /*dummy*/ = 0) {}
};
class SorterViewInfoContainer : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    SorterViewInfoContainer(void* /*dummy*/ = 0) {}
};
class VBAInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 persistIdRef;
    quint32 fHasMacros;
    quint32 version;
    VBAInfoAtom(void* /*dummy*/ = 0) {}
};
class MasterListWithTextContainer : public StreamOffset {
public:
    RecordHeader rh;
    QList<MasterPersistAtom> rgMasterPersistAtom;
    MasterListWithTextContainer(void* /*dummy*/ = 0) {}
};
class MasterPersistAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 persistIdRef;
    quint8 reserved1;
    bool fNonOutLineData;
    quint8 reserved2;
    quint8 reserved3;
    quint16 reserved4;
    quint32 reserved5;
    quint32 masterId;
    quint32 reserved6;
    MasterPersistAtom(void* /*dummy*/ = 0) {}
};
class SlideListWithTextContainer : public StreamOffset {
public:
    RecordHeader rh;
    QList<SlideListWithTextSubContainerOrAtom> rgChildRec;
    SlideListWithTextContainer(void* /*dummy*/ = 0) {}
};
class NotesListWithTextContainer : public StreamOffset {
public:
    RecordHeader rh;
    QList<NotesPersistAtom> rgNotesPersistAtom;
    NotesListWithTextContainer(void* /*dummy*/ = 0) {}
};
class NotesPersistAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 persistIdRef;
    quint8 reserved1;
    bool fNonOutlineData;
    quint8 reserved2a;
    quint8 reserved2b;
    quint16 reserved2c;
    quint32 reserved3;
    quint32 notesId;
    quint32 reserved4;
    NotesPersistAtom(void* /*dummy*/ = 0) {}
};
class TextHeaderAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 textType;
    TextHeaderAtom(void* /*dummy*/ = 0) {}
};
class TextCharsAtom : public StreamOffset {
public:
    RecordHeader rh;
    QVector<quint16> textChars;
    TextCharsAtom(void* /*dummy*/ = 0) {}
};
class TextBytesAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray textChars;
    TextBytesAtom(void* /*dummy*/ = 0) {}
};
class MasterTextPropAtom : public StreamOffset {
public:
    RecordHeader rh;
    QList<MasterTextPropRun> rgMasterTextPropRun;
    MasterTextPropAtom(void* /*dummy*/ = 0) {}
};
class MasterTextPropRun : public StreamOffset {
public:
    quint32 count;
    quint16 indentLevel;
    MasterTextPropRun(void* /*dummy*/ = 0) {}
};
class StyleTextPropAtom : public StreamOffset {
public:
    RecordHeader rh;
    QList<TextPFRun> rgTextPFRun;
    QList<TextCFRun> rgTextCFRun;
    StyleTextPropAtom(void* /*dummy*/ = 0) {}
};
class SlideNumberMCAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 position;
    SlideNumberMCAtom(void* /*dummy*/ = 0) {}
};
class DateTimeMCAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 position;
    quint8 index;
    QByteArray unused;
    DateTimeMCAtom(void* /*dummy*/ = 0) {}
};
class GenericDateMCAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 position;
    GenericDateMCAtom(void* /*dummy*/ = 0) {}
};
class HeaderMCAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 position;
    HeaderMCAtom(void* /*dummy*/ = 0) {}
};
class FooterMCAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 position;
    FooterMCAtom(void* /*dummy*/ = 0) {}
};
class RTFDateTimeMCAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 position;
    QByteArray format;
    RTFDateTimeMCAtom(void* /*dummy*/ = 0) {}
};
class TextBookmarkAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 begin;
    qint32 end;
    qint32 bookmarkID;
    TextBookmarkAtom(void* /*dummy*/ = 0) {}
};
class MouseTextInteractiveInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray range;
    MouseTextInteractiveInfoAtom(void* /*dummy*/ = 0) {}
};
class SlideId : public StreamOffset {
public:
    quint32 slideId;
    SlideId(void* /*dummy*/ = 0) {}
};
class TabStops : public StreamOffset {
public:
    quint16 count;
    QList<TabStop> rgTabStop;
    TabStops(void* /*dummy*/ = 0) {}
};
class TabStop : public StreamOffset {
public:
    qint16 position;
    quint16 type;
    TabStop(void* /*dummy*/ = 0) {}
};
class PFWrapFlags : public StreamOffset {
public:
    bool charWrap;
    bool wordWrap;
    bool overflow;
    quint8 reserved1;
    quint8 reserved2;
    PFWrapFlags(void* /*dummy*/ = 0) {}
};
class ColorIndexStruct : public StreamOffset {
public:
    quint8 red;
    quint8 green;
    quint8 blue;
    quint8 index;
    ColorIndexStruct(void* /*dummy*/ = 0) {}
};
class BulletFlags : public StreamOffset {
public:
    bool fHasBullet;
    bool fBulletHasFont;
    bool fBulletHasColor;
    bool fBulletHasSize;
    quint16 reserved;
    BulletFlags(void* /*dummy*/ = 0) {}
};
class PFMasks : public StreamOffset {
public:
    bool hasBullet;
    bool bulletHasFont;
    bool bulletHasColor;
    bool bulletHasSize;
    bool bulletFont;
    bool bulletColor;
    bool bulletSize;
    bool bulletChar;
    bool leftMargin;
    bool unused;
    bool indent;
    bool align;
    bool lineSpacing;
    bool spaceBefore;
    bool spaceAfter;
    bool defaultTabSize;
    bool fontAlign;
    bool charWrap;
    bool wordWrap;
    bool overflow;
    bool tabStops;
    bool textDirection;
    bool reserved;
    bool bulletBlip;
    bool bulletScheme;
    bool bulletHasScheme;
    quint8 reserved2;
    PFMasks(void* /*dummy*/ = 0) {}
};
class CFMasks : public StreamOffset {
public:
    bool bold;
    bool italic;
    bool underline;
    bool unused1;
    bool shadow;
    bool fehint;
    bool unused2;
    bool kumi;
    bool unused3;
    bool emboss;
    quint8 fHasStyle;
    quint8 unused4;
    bool typeface;
    bool size;
    bool color;
    bool position;
    bool pp10ext;
    bool oldEATypeface;
    bool ansiTypeface;
    bool symbolTypeface;
    bool newEATypeface;
    bool csTypeface;
    bool pp11ext;
    quint8 reserved;
    CFMasks(void* /*dummy*/ = 0) {}
};
class CFStyle : public StreamOffset {
public:
    bool bold;
    bool italic;
    bool underline;
    bool unused1;
    bool shadow;
    bool fehint;
    bool unused2;
    bool kumi;
    bool unused3;
    bool emboss;
    quint8 pp9rt;
    quint8 unused4;
    CFStyle(void* /*dummy*/ = 0) {}
};
class FontCollectionContainer : public StreamOffset {
public:
    RecordHeader rh;
    QList<FontCollectionEntry> rgFontCollectionEntry;
    FontCollectionContainer(void* /*dummy*/ = 0) {}
};
class FontEntityAtom : public StreamOffset {
public:
    RecordHeader rh;
    QVector<quint16> lfFaceName;
    quint8 lfCharSet;
    bool fEmbedSubsetted;
    quint8 unused;
    bool rasterFontType;
    bool deviceFontType;
    bool truetypeFontType;
    bool fNoFontSubstitution;
    quint8 reserved;
    quint8 lfPitchAndFamily;
    FontEntityAtom(void* /*dummy*/ = 0) {}
};
class FontEmbedDataBlob : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray data;
    FontEmbedDataBlob(void* /*dummy*/ = 0) {}
};
class KinsokuAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 level;
    KinsokuAtom(void* /*dummy*/ = 0) {}
};
class KinsokuLeadingAtom : public StreamOffset {
public:
    RecordHeader rh;
    QVector<quint16> kinsokuLeading;
    KinsokuLeadingAtom(void* /*dummy*/ = 0) {}
};
class KinsokuFollowingAtom : public StreamOffset {
public:
    RecordHeader rh;
    QVector<quint16> kinsokuFollowing;
    KinsokuFollowingAtom(void* /*dummy*/ = 0) {}
};
class TextSpecialInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    QList<TextSIRun> rgSIRun;
    TextSpecialInfoAtom(void* /*dummy*/ = 0) {}
};
class SmartTags : public StreamOffset {
public:
    quint32 count;
    QVector<quint32> rgSmartTagIndex;
    SmartTags(void* /*dummy*/ = 0) {}
};
class ExOleEmbedAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 exColorFollow;
    quint8 fCantLockServer;
    quint8 fNoSizeToServer;
    quint8 fIsTable;
    quint8 unused;
    ExOleEmbedAtom(void* /*dummy*/ = 0) {}
};
class PointStruct : public StreamOffset {
public:
    qint32 x;
    qint32 y;
    PointStruct(void* /*dummy*/ = 0) {}
};
class RatioStruct : public StreamOffset {
public:
    qint32 numer;
    qint32 denom;
    RatioStruct(void* /*dummy*/ = 0) {}
};
class PersistDirectoryAtom : public StreamOffset {
public:
    RecordHeader rh;
    QList<PersistDirectoryEntry> rgPersistDirEntry;
    PersistDirectoryAtom(void* /*dummy*/ = 0) {}
};
class UnknownDocumentContainerChild : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    UnknownDocumentContainerChild(void* /*dummy*/ = 0) {}
};
class UnknownDocumentContainerChild2 : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    UnknownDocumentContainerChild2(void* /*dummy*/ = 0) {}
};
class UnknownDocumentContainerChild3 : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    UnknownDocumentContainerChild3(void* /*dummy*/ = 0) {}
};
class UnknownDocumentContainerChild4 : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    UnknownDocumentContainerChild4(void* /*dummy*/ = 0) {}
};
class UnknownOfficeArtClientDataChild : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    UnknownOfficeArtClientDataChild(void* /*dummy*/ = 0) {}
};
class UnknownSlideContainerChild : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    UnknownSlideContainerChild(void* /*dummy*/ = 0) {}
};
class PersistDirectoryEntry : public StreamOffset {
public:
    quint32 persistId;
    quint16 cPersist;
    QVector<quint32> rgPersistOffset;
    PersistDirectoryEntry(void* /*dummy*/ = 0) {}
};
class PersistIdRef : public StreamOffset {
public:
    quint32 anon;
    PersistIdRef(void* /*dummy*/ = 0) {}
};
class SchemeListElementColorSchemeAtom : public StreamOffset {
public:
    RecordHeader rh;
    QList<ColorStruct> rgSchemeColor;
    SchemeListElementColorSchemeAtom(void* /*dummy*/ = 0) {}
};
class RoundTripOArtTextStyles12Atom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    RoundTripOArtTextStyles12Atom(void* /*dummy*/ = 0) {}
};
class SlideNameAtom : public StreamOffset {
public:
    RecordHeader rh;
    QVector<quint16> slideName;
    SlideNameAtom(void* /*dummy*/ = 0) {}
};
class SlideProgTagsContainer : public StreamOffset {
public:
    RecordHeader rh;
    QList<SlideProgTagsSubContainerOrAtom> rgTypeRec;
    SlideProgTagsContainer(void* /*dummy*/ = 0) {}
};
class SlideProgBinaryTagContainer : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    SlideProgBinaryTagContainer(void* /*dummy*/ = 0) {}
};
class TagNameAtom : public StreamOffset {
public:
    RecordHeader rh;
    QVector<quint16> tagName;
    TagNameAtom(void* /*dummy*/ = 0) {}
};
class TagValueAtom : public StreamOffset {
public:
    RecordHeader rh;
    QVector<quint16> tagValue;
    TagValueAtom(void* /*dummy*/ = 0) {}
};
class RoundTripMainMasterRecord : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    RoundTripMainMasterRecord(void* /*dummy*/ = 0) {}
};
class TemplateNameAtom : public StreamOffset {
public:
    RecordHeader rh;
    QVector<quint16> templateName;
    TemplateNameAtom(void* /*dummy*/ = 0) {}
};
class RoundTripSlideSyncInfo12Container : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    RoundTripSlideSyncInfo12Container(void* /*dummy*/ = 0) {}
};
class SlideFlags : public StreamOffset {
public:
    bool fMasterObjects;
    bool fMasterScheme;
    bool fMasterBackground;
    quint8 unused1;
    quint8 unused2;
    SlideFlags(void* /*dummy*/ = 0) {}
};
class NotesRoundTripAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    NotesRoundTripAtom(void* /*dummy*/ = 0) {}
};
class HandoutContainer : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    HandoutContainer(void* /*dummy*/ = 0) {}
};
class ExControlStg : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    ExControlStg(void* /*dummy*/ = 0) {}
};
class ExOleObjStg : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    ExOleObjStg(void* /*dummy*/ = 0) {}
};
class UserEditAtom : public StreamOffset {
public:
    bool _has_encryptSessionPersistIdRef;
    RecordHeader rh;
    quint32 lastSlideIdRef;
    quint16 version;
    quint8 minorVersion;
    quint8 majorVersion;
    quint32 offsetLastEdit;
    quint32 offsetPersistDirectory;
    quint32 docPersistIdRef;
    quint32 persistIdSeed;
    quint16 lastView;
    quint16 unused;
    quint32 encryptSessionPersistIdRef;
    UserEditAtom(void* /*dummy*/ = 0) {}
};
class VbaProjectStg : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    VbaProjectStg(void* /*dummy*/ = 0) {}
};
class SlideAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 geom;
    QByteArray rgPlaceholderTypes;
    quint32 masterIdRef;
    quint32 notesIdRef;
    SlideFlags slideFlags;
    quint16 unused;
    SlideAtom(void* /*dummy*/ = 0) {}
};
class SlideShowSlideInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 slidetime;
    quint32 slideIdRef;
    quint8 effectDirection;
    quint8 effectType;
    bool fManualAdvance;
    bool reserved;
    bool fHidden;
    bool reserved2;
    bool fSound;
    bool reserved3;
    bool fLoopSound;
    bool reserved4;
    bool fStopSound;
    bool freserved5;
    bool fAutoAdvance;
    bool reserved6;
    bool fCursorVisible;
    quint8 reserved7;
    quint8 speed;
    QByteArray unused;
    SlideShowSlideInfoAtom(void* /*dummy*/ = 0) {}
};
class SlideShowDocInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    ColorIndexStruct penColor;
    qint32 restartTime;
    qint16 startSlide;
    qint16 endSlide;
    QByteArray namedShow;
    bool fAutoAdvance;
    bool fWillSkipBuilds;
    bool fUseSlideRange;
    bool fDocUseNamedShow;
    bool fShowBrowseMode;
    bool fKioskMode;
    bool fWillSkipNarration;
    bool fLoopContinuously;
    bool fHideScrollBar;
    quint8 reserved;
    quint16 unused;
    SlideShowDocInfoAtom(void* /*dummy*/ = 0) {}
};
class SlideSchemeColorSchemeAtom : public StreamOffset {
public:
    RecordHeader rh;
    QList<ColorStruct> rgSchemeColor;
    SlideSchemeColorSchemeAtom(void* /*dummy*/ = 0) {}
};
class RoundTripSlideRecord : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    RoundTripSlideRecord(void* /*dummy*/ = 0) {}
};
class NamedShowsContainer : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    NamedShowsContainer(void* /*dummy*/ = 0) {}
};
class SummaryContainer : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    SummaryContainer(void* /*dummy*/ = 0) {}
};
class DocRoutingSlipAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    DocRoutingSlipAtom(void* /*dummy*/ = 0) {}
};
class PrintOptionsAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    PrintOptionsAtom(void* /*dummy*/ = 0) {}
};
class RoundTripCustomTableStyles12Atom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray todo;
    RoundTripCustomTableStyles12Atom(void* /*dummy*/ = 0) {}
};
class ColorStruct : public StreamOffset {
public:
    quint8 red;
    quint8 green;
    quint8 blue;
    quint8 unused;
    ColorStruct(void* /*dummy*/ = 0) {}
};
class ExObjListAtom : public StreamOffset {
public:
    RecordHeader rh;
    qint32 exObjIdSeed;
    ExObjListAtom(void* /*dummy*/ = 0) {}
};
class ExAviMovieContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ExAviMovieContainer(void* /*dummy*/ = 0) {}
};
class ExCDAudioContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ExCDAudioContainer(void* /*dummy*/ = 0) {}
};
class ExControlAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 slideIdRef;
    ExControlAtom(void* /*dummy*/ = 0) {}
};
class ExHyperlinkAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 exHyperLinkId;
    ExHyperlinkAtom(void* /*dummy*/ = 0) {}
};
class FriendlyNameAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QVector<quint16> friendlyName;
    FriendlyNameAtom(void* /*dummy*/ = 0) {}
};
class TargetAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QVector<quint32> target;
    TargetAtom(void* /*dummy*/ = 0) {}
};
class LocationAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QVector<quint32> location;
    LocationAtom(void* /*dummy*/ = 0) {}
};
class ExMCIMovieContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ExMCIMovieContainer(void* /*dummy*/ = 0) {}
};
class ExMIDIAudioContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ExMIDIAudioContainer(void* /*dummy*/ = 0) {}
};
class ExWAVAudioEmbeddedContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ExWAVAudioEmbeddedContainer(void* /*dummy*/ = 0) {}
};
class ExWAVAudioLinkContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ExWAVAudioLinkContainer(void* /*dummy*/ = 0) {}
};
class UnknownExObjListSubContainerChild : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    UnknownExObjListSubContainerChild(void* /*dummy*/ = 0) {}
};
class ExOleLinkAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 slideIdRef;
    quint32 oleUpdateMode;
    quint32 unused;
    ExOleLinkAtom(void* /*dummy*/ = 0) {}
};
class ExOleObjAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 drawAspect;
    quint32 type;
    quint32 exObjId;
    quint32 subType;
    quint32 persistIdRef;
    quint32 unused;
    ExOleObjAtom(void* /*dummy*/ = 0) {}
};
class MenuNameAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray menuName;
    MenuNameAtom(void* /*dummy*/ = 0) {}
};
class ProgIDAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray progId;
    ProgIDAtom(void* /*dummy*/ = 0) {}
};
class ClipboardNameAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray clipboardName;
    ClipboardNameAtom(void* /*dummy*/ = 0) {}
};
class MetafileBlob : public StreamOffset {
public:
    RecordHeader rh;
    qint16 mm;
    qint16 xExt;
    qint16 yExt;
    QByteArray data;
    MetafileBlob(void* /*dummy*/ = 0) {}
};
class OfficeArtFDGG : public StreamOffset {
public:
    quint32 spidMax;
    quint32 cidcl;
    quint32 cspSaved;
    quint32 cdgSaved;
    OfficeArtFDGG(void* /*dummy*/ = 0) {}
};
class OfficeArtFDG : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 csp;
    quint32 spidCur;
    OfficeArtFDG(void* /*dummy*/ = 0) {}
};
class OfficeArtFRITContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<OfficeArtFRIT> rgfrit;
    OfficeArtFRITContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtFRIT : public StreamOffset {
public:
    quint16 fridNew;
    quint16 fridOld;
    OfficeArtFRIT(void* /*dummy*/ = 0) {}
};
class OfficeArtBStoreContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<OfficeArtBStoreContainerFileBlock> rgfb;
    OfficeArtBStoreContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtSpgrContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<OfficeArtSpgrContainerFileBlock> rgfb;
    OfficeArtSpgrContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtSolverContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<OfficeArtSolverContainerFileBlock> rgfb;
    OfficeArtSolverContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtFConnectorRule : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 ruid;
    quint32 spidA;
    quint32 spidB;
    quint32 spidC;
    quint32 cptiA;
    quint32 cptiB;
    OfficeArtFConnectorRule(void* /*dummy*/ = 0) {}
};
class OfficeArtFArcRule : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 ruid;
    quint32 spid;
    OfficeArtFArcRule(void* /*dummy*/ = 0) {}
};
class OfficeArtFCalloutRule : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 ruid;
    quint32 spid;
    OfficeArtFCalloutRule(void* /*dummy*/ = 0) {}
};
class OfficeArtFSPGR : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    qint32 xLeft;
    qint32 yTop;
    qint32 xRight;
    qint32 yBottom;
    OfficeArtFSPGR(void* /*dummy*/ = 0) {}
};
class OfficeArtFSP : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 spid;
    bool fGroup;
    bool fChild;
    bool fPatriarch;
    bool fDeleted;
    bool fOleShape;
    bool fHaveMaster;
    bool fFlipH;
    bool fFlipV;
    bool fConnector;
    bool fHaveAnchor;
    bool fBackground;
    bool fHaveSpt;
    quint32 unused1;
    OfficeArtFSP(void* /*dummy*/ = 0) {}
};
class OfficeArtFOPT : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<OfficeArtFOPTEChoice> fopt;
    QByteArray complexData;
    OfficeArtFOPT(void* /*dummy*/ = 0) {}
};
class OfficeArtSecondaryFOPT : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<OfficeArtFOPTEChoice> fopt;
    QByteArray complexData;
    OfficeArtSecondaryFOPT(void* /*dummy*/ = 0) {}
};
class OfficeArtTertiaryFOPT : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<OfficeArtFOPTEChoice> fopt;
    QByteArray complexData;
    OfficeArtTertiaryFOPT(void* /*dummy*/ = 0) {}
};
class OfficeArtFOPTEComplexData : public StreamOffset {
public:
    QByteArray data;
    OfficeArtFOPTEComplexData(void* /*dummy*/ = 0) {}
};
class FixedPoint : public StreamOffset {
public:
    qint16 integral;
    quint16 fractional;
    FixedPoint(void* /*dummy*/ = 0) {}
};
class OfficeArtCOLORREF : public StreamOffset {
public:
    quint8 red;
    quint8 green;
    quint8 blue;
    bool fPaletteIndex;
    bool fPaletteRGB;
    bool fSystemRGB;
    bool fSchemeIndex;
    bool fSysIndex;
    bool unused1;
    bool unused2;
    bool unused3;
    OfficeArtCOLORREF(void* /*dummy*/ = 0) {}
};
class OfficeArtChildAnchor : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    qint32 xLeft;
    qint32 yTop;
    qint32 xRight;
    qint32 yBottom;
    OfficeArtChildAnchor(void* /*dummy*/ = 0) {}
};
class OfficeArtFPSPL : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 spid;
    bool reserved1;
    bool fLast;
    OfficeArtFPSPL(void* /*dummy*/ = 0) {}
};
class RectStruct : public StreamOffset {
public:
    qint32 top;
    qint32 left;
    qint32 right;
    qint32 bottom;
    RectStruct(void* /*dummy*/ = 0) {}
};
class SmallRectStruct : public StreamOffset {
public:
    qint16 top;
    qint16 left;
    qint16 right;
    qint16 bottom;
    SmallRectStruct(void* /*dummy*/ = 0) {}
};
class ShapeFlagsAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ShapeFlagsAtom(void* /*dummy*/ = 0) {}
};
class ShapeFlags10Atom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ShapeFlags10Atom(void* /*dummy*/ = 0) {}
};
class ExObjRefAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    quint32 exObjIdRef;
    ExObjRefAtom(void* /*dummy*/ = 0) {}
};
class AnimationInfoAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    AnimationInfoAtom(void* /*dummy*/ = 0) {}
};
class SoundContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    SoundContainer(void* /*dummy*/ = 0) {}
};
class InteractiveInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 soundIdRef;
    quint32 exHyperlinkIdRef;
    quint8 action;
    quint8 oleVerb;
    quint8 jump;
    bool fAnimated;
    bool fStopSound;
    bool fCustomSoundReturn;
    bool fVisited;
    quint8 reserved;
    quint8 hyperlinkType;
    QByteArray unused;
    InteractiveInfoAtom(void* /*dummy*/ = 0) {}
};
class MacroNameAtom : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray macroName;
    MacroNameAtom(void* /*dummy*/ = 0) {}
};
class PlaceholderAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    qint32 position;
    quint8 placementId;
    quint8 size;
    quint16 unused;
    PlaceholderAtom(void* /*dummy*/ = 0) {}
};
class RecolorInfoAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    RecolorInfoAtom(void* /*dummy*/ = 0) {}
};
class OutlineTextRefAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    qint32 index;
    OutlineTextRefAtom(void* /*dummy*/ = 0) {}
};
class ShapeClientRoundtripDataSubcontainerOrAtom : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QByteArray todo;
    ShapeClientRoundtripDataSubcontainerOrAtom(void* /*dummy*/ = 0) {}
};
class OfficeArtClientTextBox : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<TextClientDataSubContainerOrAtom> rgChildRec;
    OfficeArtClientTextBox(void* /*dummy*/ = 0) {}
};
class OfficeArtIDCL : public StreamOffset {
public:
    quint32 dgid;
    quint32 cspidCur;
    OfficeArtIDCL(void* /*dummy*/ = 0) {}
};
class OfficeArtFOPTEOPID : public StreamOffset {
public:
    quint16 opid;
    bool fBid;
    bool fComplex;
    OfficeArtFOPTEOPID(void* /*dummy*/ = 0) {}
};
class OfficeArtColorMRUContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<MSOCR> rgmsocr;
    OfficeArtColorMRUContainer(void* /*dummy*/ = 0) {}
};
class MSOCR : public StreamOffset {
public:
    quint8 red;
    quint8 green;
    quint8 blue;
    quint8 unused1;
    bool fSchemeIndex;
    quint8 unused2;
    MSOCR(void* /*dummy*/ = 0) {}
};
class OfficeArtSplitMenuColorContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QList<MSOCR> smca;
    OfficeArtSplitMenuColorContainer(void* /*dummy*/ = 0) {}
};
class todo : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray anon;
    todo(void* /*dummy*/ = 0) {}
};
class FibBase : public StreamOffset {
public:
    quint16 wIdent;
    quint16 nFib;
    quint16 unused;
    quint16 lid;
    quint16 pnNext;
    bool fDot;
    bool fGlsy;
    bool fComplex;
    bool fHasPic;
    quint8 cQuickSaves;
    bool fEncrypted;
    bool fWhichTblStm;
    bool fReadOnlyRecommended;
    bool fWriteReservation;
    bool fExtChar;
    bool fLoadOverride;
    bool fFarEast;
    bool fObfuscated;
    quint16 nFibBack;
    quint32 IKey;
    quint8 envr;
    bool fMac;
    bool fEmptySpecial;
    bool fLoadOverridePage;
    bool reserved1;
    bool reserved2;
    quint8 fSpare0;
    quint16 reserved3;
    quint16 reserved4;
    quint32 reserved5;
    quint32 reserved6;
    FibBase(void* /*dummy*/ = 0) {}
};
class FibRgW97 : public StreamOffset {
public:
    quint16 reserved1;
    quint16 reserved2;
    quint16 reserved3;
    quint16 reserved4;
    quint16 reserved5;
    quint16 reserved6;
    quint16 reserved7;
    quint16 reserved8;
    quint16 reserved9;
    quint16 reserved10;
    quint16 reserved11;
    quint16 reserved12;
    quint16 reserved13;
    quint16 lidFE;
    FibRgW97(void* /*dummy*/ = 0) {}
};
class FibRgLw97 : public StreamOffset {
public:
    quint32 cbMac;
    quint32 reserved1;
    quint32 reserved2;
    qint32 ccpText;
    qint32 ccpFtn;
    qint32 ccpHdd;
    quint32 reserved3;
    qint32 ccpAtn;
    qint32 ccpEdn;
    qint32 ccpTxbx;
    qint32 ccpHdrTxbx;
    quint32 reserved4;
    quint32 reserved5;
    quint32 reserved6;
    quint32 reserved7;
    quint32 reserved8;
    quint32 reserved9;
    quint32 reserved10;
    quint32 reserved11;
    quint32 reserved12;
    quint32 reserved13;
    quint32 reserved14;
    FibRgLw97(void* /*dummy*/ = 0) {}
};
class FibRgFcLcb97 : public StreamOffset {
public:
    quint32 fcStshfOrig;
    quint32 lcbStshfOrig;
    quint32 fcStshf;
    quint32 lcbStshf;
    quint32 fcPlcffndRef;
    quint32 lcbPlcffndRef;
    quint32 fcPlcffndTxt;
    quint32 lcbPlcffndTxt;
    quint32 fcPlcfandRef;
    quint32 lcbPlcfandRef;
    quint32 fcPlcfandTxt;
    quint32 lcbPlcfandTxt;
    quint32 fcPlcfSed;
    quint32 lcbPlcfSed;
    quint32 fcPlcPad;
    quint32 lcbPlcPad;
    quint32 fcPlcfPhe;
    quint32 lcbPlcfPhe;
    quint32 fcSttbfGlsy;
    quint32 lcbSttbfGlsy;
    quint32 fcPlcfGlsy;
    quint32 lcbPlcfGlsy;
    quint32 fcPlcfHdd;
    quint32 lcbPlcfHdd;
    quint32 fcPlcfBteChpx;
    quint32 lcbPlcfBteChpx;
    quint32 fcPlcfBtePapx;
    quint32 lcbPlcfBtePapx;
    quint32 fcPlcfSea;
    quint32 lcbPlcfSea;
    quint32 fcSttbfFfn;
    quint32 lcbSttbfFfn;
    quint32 fcPlcfFldMom;
    quint32 lcbPlcfFldMom;
    quint32 fcPlcfFldHdr;
    quint32 lcbPlcfFldHdr;
    quint32 fcPlcfFldFtn;
    quint32 lcbPlcfFldFtn;
    quint32 fcPlcfFldAtn;
    quint32 lcbPlcfFldAtn;
    quint32 fcPlcfFldMcr;
    quint32 lcbPlcfFldMcr;
    quint32 fcSttbfBkmk;
    quint32 lcbSttbfBkmk;
    quint32 fcPlcfBkf;
    quint32 lcbPlcfBkf;
    quint32 fcPlcfBkl;
    quint32 lcbPlcfBkl;
    quint32 fcCmds;
    quint32 lcbCmds;
    quint32 fcUnused1;
    quint32 lcbUnused1;
    quint32 fcSttbfMcr;
    quint32 lcbSttbfMcr;
    quint32 fcPrDrvr;
    quint32 lcbPrDrvr;
    quint32 fcPrEnvPort;
    quint32 lcbPrEnvPort;
    quint32 fcPrEnvLand;
    quint32 lcbPrEnvLand;
    quint32 fcWss;
    quint32 lcbWss;
    quint32 fcDop;
    quint32 lcbDop;
    quint32 fcSttbfAssoc;
    quint32 lcbSttbfAssoc;
    quint32 fcClx;
    quint32 lcbClx;
    quint32 fcPlcfPgdFtn;
    quint32 lcbPlcfPgdFtn;
    quint32 fcAutosaveSource;
    quint32 lcbAutosaveSource;
    quint32 fcGrpXstAtnOwners;
    quint32 lcbGrpXstAtnOwners;
    quint32 fcSttbfAtnBkmk;
    quint32 lcbSttbfAtnBkmk;
    quint32 fcUnused2;
    quint32 lcbUnused2;
    quint32 fcUnused3;
    quint32 lcbUnused3;
    quint32 fcPlcSpaMom;
    quint32 lcbPlcSpaMom;
    quint32 fcPlcSpaHdr;
    quint32 lcbPlcSpaHdr;
    quint32 fcPlcfAtnBkf;
    quint32 lcbPlcfAtnBkf;
    quint32 fcPlcfAtnBkl;
    quint32 lcbPlcfAtnBkl;
    quint32 fcPms;
    quint32 lcbPms;
    quint32 fcFormFldSttbs;
    quint32 lcbFormFldSttbs;
    quint32 fcPlcfendRef;
    quint32 lcbPlcfendRef;
    quint32 fcPlcfendTxt;
    quint32 lcbPlcfendTxt;
    quint32 fcPlcfFldEdn;
    quint32 lcbPlcfFldEdn;
    quint32 fcUnused4;
    quint32 lcbUnused4;
    quint32 fcDggInfo;
    quint32 lcbDggInfo;
    quint32 fcSttbfRMark;
    quint32 lcbSttbfRMark;
    quint32 fcSttbfCaption;
    quint32 lcbSttbfCaption;
    quint32 fcSttbfAutoCaption;
    quint32 lcbSttbfAutoCaption;
    quint32 fcPlcfWkb;
    quint32 lcbPlcfWkb;
    quint32 fcPlcfSpl;
    quint32 lcbPlcfSpl;
    quint32 fcPlcftxbxTxt;
    quint32 lcbPlcftxbxTxt;
    quint32 fcPlcfFldTxbx;
    quint32 lcbPlcfFldTxbx;
    quint32 fcPlcfHdrtxbxTxt;
    quint32 lcbPlcfHdrtxbxTxt;
    quint32 fcPlcffldHdrTxbx;
    quint32 lcbPlcffldHdrTxbx;
    quint32 fcStwUser;
    quint32 lcbStwUser;
    quint32 fcSttbTtmbd;
    quint32 lcbSttbTtmbd;
    quint32 fcCookieData;
    quint32 lcbCookieData;
    quint32 fcPgdMotherOldOld;
    quint32 lcbPgdMotherOldOld;
    quint32 fcBkdMotherOldOld;
    quint32 lcbBkdMotherOldOld;
    quint32 fcPgdFtnOldOld;
    quint32 lcbPgdFtnOldOld;
    quint32 fcBkdFtnOldOld;
    quint32 lcbBkdFtnOldOld;
    quint32 fcPgdEdnOldOld;
    quint32 lcbPgdEdnOldOld;
    quint32 fcBkdEdnOldOld;
    quint32 lcbBkdEdnOldOld;
    quint32 fcSttbfIntlFld;
    quint32 lcbSttbfIntlFld;
    quint32 fcRouteSlip;
    quint32 lcbRouteSlip;
    quint32 fcSttbSavedBy;
    quint32 lcbSttbSavedBy;
    quint32 fcSttbFnm;
    quint32 lcbSttbFnm;
    quint32 fcPlfLst;
    quint32 lcbPlfLst;
    quint32 fcPlfLfo;
    quint32 lcbPlfLfo;
    quint32 fcPlcfTxbxBkd;
    quint32 lcbPlcfTxbxBkd;
    quint32 fcPlcfTxbxHdrBkd;
    quint32 lcbPlcfTxbxHdrBkd;
    quint32 fcDocUndoWord9;
    quint32 lcbDocUndoWord9;
    quint32 fcRgbUse;
    quint32 lcbRgbUse;
    quint32 fcUsp;
    quint32 lcbUsp;
    quint32 fcUskf;
    quint32 lcbUskf;
    quint32 fcPlcupcRgbUse;
    quint32 lcbPlcupcRgbUse;
    quint32 fcPlcupcUsp;
    quint32 lcbPlcupcUsp;
    quint32 fcSttbGlsyStyle;
    quint32 lcbSttbGlsyStyle;
    quint32 fcPlgosl;
    quint32 lcbPlgosl;
    quint32 fcPlcocx;
    quint32 lcbPlcocx;
    quint32 fcPlcfBteLvc;
    quint32 lcbPlcfBteLvc;
    quint32 dwLowDateTime;
    quint32 dwHighDateTime;
    quint32 fcPlcfLvcPre10;
    quint32 lcbPlcfLvcPre10;
    quint32 fcPlcfAsumy;
    quint32 lcbPlcfAsumy;
    quint32 fcPlcfGram;
    quint32 lcbPlcfGram;
    quint32 fcSttbListNames;
    quint32 lcbSttbListNames;
    quint32 fcSttbfUssr;
    quint32 lcbSttbfUssr;
    FibRgFcLcb97(void* /*dummy*/ = 0) {}
};
class FibRgFcLcb2000 : public StreamOffset {
public:
    quint32 fcPlcfTch;
    quint32 lcbPlcfTch;
    quint32 fcRmdThreading;
    quint32 lcbRmdThreading;
    quint32 fcMid;
    quint32 lcbMid;
    quint32 fcSttbRgtplc;
    quint32 lcbSttbRgtplc;
    quint32 fcMsoEnvelope;
    quint32 lcbMsoEnvelope;
    quint32 fcPlcfLad;
    quint32 lcbPlcfLad;
    quint32 fcRgDofr;
    quint32 lcbRgDofr;
    quint32 fcPlcosl;
    quint32 lcbPlcosl;
    quint32 fcPlcfCookieOld;
    quint32 lcbPlcfCookieOld;
    quint32 fcPgdMotherOld;
    quint32 lcbPgdMotherOld;
    quint32 fcBkdMotherOld;
    quint32 lcbBkdMotherOld;
    quint32 fcPgdFtnOld;
    quint32 lcbPgdFtnOld;
    quint32 fcBkdFtnOld;
    quint32 lcbBkdFtnOld;
    quint32 fcPgdEdnOld;
    quint32 lcbPgdEdnOld;
    quint32 fcBkdEdnOld;
    quint32 lcbBkdEdnOld;
    FibRgFcLcb2000(void* /*dummy*/ = 0) {}
};
class FibRgFcLcb2002 : public StreamOffset {
public:
    quint32 fcUnused1;
    quint32 lcbUnused1;
    quint32 fcPlcfPgp;
    quint32 lcbPlcfPgp;
    quint32 fcPlcfuim;
    quint32 lcbPlcfuim;
    quint32 fcPlfguidUim;
    quint32 lcbPlfguidUim;
    quint32 fcAtrdExtra;
    quint32 lcbAtrdExtra;
    quint32 fcPlrsid;
    quint32 lcbPlrsid;
    quint32 fcSttbfBkmkFactoid;
    quint32 lcbSttbfBkmkFactoid;
    quint32 fcPlcfBkfFactoid;
    quint32 lcbPlcfBkfFactoid;
    quint32 fcPlcfcookie;
    quint32 lcbPlcfcookie;
    quint32 fcPlcfBklFactoid;
    quint32 lcbPlcfBklFactoid;
    quint32 fcFactoidData;
    quint32 lcbFactoidData;
    quint32 fcDocUndo;
    quint32 lcbDocUndo;
    quint32 fcSttbfBkmkFcc;
    quint32 lcbSttbfBkmkFcc;
    quint32 fcPlcfBkfFcc;
    quint32 lcbPlcfBkfFcc;
    quint32 fcPlcfBklFcc;
    quint32 lcbPlcfBklFcc;
    quint32 fcSttbfbkmkBPRepairs;
    quint32 lcbSttbfbkmkBPRepairs;
    quint32 fcPlcfbkfBPRepairs;
    quint32 lcbPlcfbkfBPRepairs;
    quint32 fcPlcfbklBPRepairs;
    quint32 lcbPlcfbklBPRepairs;
    quint32 fcPmsNew;
    quint32 lcbPmsNew;
    quint32 fcODSO;
    quint32 lcbODSO;
    quint32 fcPlcfpmiOldXP;
    quint32 lcbPlcfpmiOldXP;
    quint32 fcPlcfpmiNewXP;
    quint32 lcbPlcfpmiNewXP;
    quint32 fcPlcfpmiMixedXP;
    quint32 lcbPlcfpmiMixedXP;
    quint32 fcUnused2;
    quint32 lcbUnused2;
    quint32 fcPlcffactoid;
    quint32 lcbPlcffactoid;
    FibRgFcLcb2002(void* /*dummy*/ = 0) {}
};
class LPStshi : public StreamOffset {
public:
    quint16 cbSthi;
    QByteArray stshi;
    LPStshi(void* /*dummy*/ = 0) {}
};
class LPStd : public StreamOffset {
public:
    bool _has_padding;
    quint16 cbStd;
    QByteArray std;
    quint8 padding;
    LPStd(void* /*dummy*/ = 0) {}
};
class PlcfSed : public StreamOffset {
public:
    QVector<quint32> aCP;
    QList<Sed> aSed;
    PlcfSed(void* /*dummy*/ = 0) {}
};
class Sed : public StreamOffset {
public:
    quint16 fn;
    qint32 fcSepx;
    quint16 fnMpr;
    quint32 fcMpr;
    Sed(void* /*dummy*/ = 0) {}
};
class Plcfhdd : public StreamOffset {
public:
    QVector<quint32> aCP;
    Plcfhdd(void* /*dummy*/ = 0) {}
};
class PlcBteChpx : public StreamOffset {
public:
    QVector<quint32> aCP;
    QVector<quint32> aPnBteChpx;
    PlcBteChpx(void* /*dummy*/ = 0) {}
};
class PlcfBtePapx : public StreamOffset {
public:
    QVector<quint32> aCP;
    QVector<quint32> aPnBteChpx;
    PlcfBtePapx(void* /*dummy*/ = 0) {}
};
class Tcg : public StreamOffset {
public:
    quint8 nTcgVer;
    QByteArray todo;
    Tcg(void* /*dummy*/ = 0) {}
};
class PrcData : public StreamOffset {
public:
    qint16 cbGrpprl;
    QList<Sprm> GrpPrl;
    PrcData(void* /*dummy*/ = 0) {}
};
class Sprm : public StreamOffset {
public:
    quint16 ispmd;
    bool fSpec;
    quint8 sgc;
    quint8 spra;
    Sprm(void* /*dummy*/ = 0) {}
};
class Pcdt : public StreamOffset {
public:
    quint8 clxt;
    quint32 lcb;
    QList<Pcd> PlcPcd;
    Pcdt(void* /*dummy*/ = 0) {}
};
class FCompressed : public StreamOffset {
public:
    quint32 fc;
    bool fCompressed;
    bool r1;
    FCompressed(void* /*dummy*/ = 0) {}
};
class Prm0 : public StreamOffset {
public:
    bool fComplex;
    quint8 isprm;
    quint8 val;
    Prm0(void* /*dummy*/ = 0) {}
};
class Prm1 : public StreamOffset {
public:
    bool fComplex;
    quint16 igrpprl;
    Prm1(void* /*dummy*/ = 0) {}
};
class SttbfFfn : public StreamOffset {
public:
    quint16 cData;
    quint16 cbExtra;
    QList<SttbfFfnEntry> data;
    SttbfFfn(void* /*dummy*/ = 0) {}
};
class SttbfFfnEntry : public StreamOffset {
public:
    quint8 cchData;
    QByteArray Data;
    SttbfFfnEntry(void* /*dummy*/ = 0) {}
};
class CodePageString : public StreamOffset {
public:
    quint32 size;
    QByteArray characters;
    CodePageString(void* /*dummy*/ = 0) {}
};
class FILETIME : public StreamOffset {
public:
    quint32 dwLowDateTime;
    quint32 dwHighDateTime;
    FILETIME(void* /*dummy*/ = 0) {}
};
class ClipboardData : public StreamOffset {
public:
    quint32 size;
    quint32 format;
    QByteArray data;
    ClipboardData(void* /*dummy*/ = 0) {}
};
class PropertyIdentifierAndOffset : public StreamOffset {
public:
    quint32 propertyIdentifier;
    quint32 offset;
    PropertyIdentifierAndOffset(void* /*dummy*/ = 0) {}
};
class TypedPropertyValue : public StreamOffset {
public:
    bool _has_vt_I2;
    bool _has_paddingI2;
    bool _has_vg_ERROR;
    quint16 type;
    quint16 padding;
    quint16 vt_I2;
    quint16 paddingI2;
    quint32 vg_ERROR;
    QSharedPointer<CodePageString> vt_lpstr;
    QSharedPointer<FILETIME> vg_FILETIME;
    QSharedPointer<ClipboardData> vg_CF;
    TypedPropertyValue(void* /*dummy*/ = 0) {}
};
class PropertySet : public StreamOffset {
public:
    quint32 size;
    quint32 numProperties;
    QList<PropertyIdentifierAndOffset> propertyIdentifierAndOffset;
    QList<TypedPropertyValue> property;
    PropertySet(void* /*dummy*/ = 0) {}
};
class PropertySetStream : public StreamOffset {
public:
    bool _has_fmtID1;
    bool _has_offset1;
    quint16 byteOrder;
    quint16 version;
    quint32 systemIdentifier;
    QByteArray clsID;
    quint32 numPropertySets;
    QByteArray fmtID0;
    quint32 offset0;
    QByteArray fmtID1;
    quint32 offset1;
    PropertySet propertySet1;
    QSharedPointer<PropertySet> propertySet2;
    QList<Byte> padding;
    PropertySetStream(void* /*dummy*/ = 0) {}
};
class SummaryInformationPropertySetStream : public StreamOffset {
public:
    PropertySetStream propertySet;
    SummaryInformationPropertySetStream(void* /*dummy*/ = 0) {}
};
class DocumentSummaryInformationPropertySetStream : public StreamOffset {
public:
    PropertySetStream propertySet;
    DocumentSummaryInformationPropertySetStream(void* /*dummy*/ = 0) {}
};
class PicturesStream : public StreamOffset {
public:
    OfficeArtBStoreDelay anon1;
    PicturesStream(void* /*dummy*/ = 0) {}
};
class OfficeArtMetafileHeader : public StreamOffset {
public:
    quint32 cbSize;
    RECT rcBounds;
    POINT ptSize;
    quint32 cbsave;
    quint8 compression;
    quint8 filter;
    OfficeArtMetafileHeader(void* /*dummy*/ = 0) {}
};
class SlideHeadersFootersContainer : public StreamOffset {
public:
    RecordHeader rh;
    HeadersFootersAtom hfAtom;
    QSharedPointer<UserDateAtom> userDateAtom;
    QSharedPointer<FooterAtom> footerAtom;
    SlideHeadersFootersContainer(void* /*dummy*/ = 0) {}
};
class NotesHeadersFootersContainer : public StreamOffset {
public:
    RecordHeader rh;
    HeadersFootersAtom hfAtom;
    QSharedPointer<UserDateAtom> userDateAtom;
    QSharedPointer<HeaderAtom> headerAtom;
    QSharedPointer<FooterAtom> footerAtom;
    NotesHeadersFootersContainer(void* /*dummy*/ = 0) {}
};
class ScalingStruct : public StreamOffset {
public:
    RatioStruct x;
    RatioStruct y;
    ScalingStruct(void* /*dummy*/ = 0) {}
};
class TextPFException9 : public StreamOffset {
public:
    bool _has_bulletBlipRef;
    bool _has_fBulletHasAutoNumber;
    PFMasks masks;
    quint16 bulletBlipRef;
    quint16 fBulletHasAutoNumber;
    QSharedPointer<TextAutoNumberScheme> bulletAutoNumberScheme;
    TextPFException9(void* /*dummy*/ = 0) {}
};
class TextCFException9 : public StreamOffset {
public:
    bool _has_pp10runid;
    bool _has_unuseda;
    bool _has_unusedb;
    CFMasks masks;
    quint8 pp10runid;
    quint32 unuseda;
    quint8 unusedb;
    TextCFException9(void* /*dummy*/ = 0) {}
};
class TextDefaults9Atom : public StreamOffset {
public:
    RecordHeader rh;
    TextCFException9 cf9;
    TextPFException9 pf9;
    TextDefaults9Atom(void* /*dummy*/ = 0) {}
};
class Kinsoku9Container : public StreamOffset {
public:
    RecordHeader rh;
    Kinsoku9Atom kinsoku9Atom;
    QSharedPointer<KinsokuLeadingAtom> kinsokuLeadingAtom;
    QSharedPointer<KinsokuFollowingAtom> kinsokuFollowingAtom;
    Kinsoku9Container(void* /*dummy*/ = 0) {}
};
class TextCFException10 : public StreamOffset {
public:
    bool _has_newEAFontRef;
    bool _has_csFontRef;
    bool _has_pp11ext;
    CFMasks masks;
    quint16 newEAFontRef;
    quint16 csFontRef;
    quint32 pp11ext;
    TextCFException10(void* /*dummy*/ = 0) {}
};
class TextDefaults10Atom : public StreamOffset {
public:
    RecordHeader rh;
    TextCFException10 cf10;
    TextDefaults10Atom(void* /*dummy*/ = 0) {}
};
class CommentIndex10Container : public StreamOffset {
public:
    RecordHeader rh;
    QSharedPointer<AuthorNameAtom> authorNameAtom;
    QSharedPointer<CommentIndex10Atom> authorIndexAtom;
    CommentIndex10Container(void* /*dummy*/ = 0) {}
};
class OutlineTextProps10Entry : public StreamOffset {
public:
    OutlineTextPropsHeaderExAtom outlineTextHeaderAtom;
    StyleTextProp10Atom styleTextProp10Atom;
    OutlineTextProps10Entry(void* /*dummy*/ = 0) {}
};
class PP11DocBinaryTagExtension : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray tagName;
    RecordHeader rhData;
    SmartTagStore11Container smartTagStore11;
    OutlineTextProps11Container outlineTextProps;
    PP11DocBinaryTagExtension(void* /*dummy*/ = 0) {}
};
class UnknownBinaryTag : public StreamOffset {
public:
    TagNameAtom tagNameAtom;
    BinaryTagDataBlob tagData;
    UnknownBinaryTag(void* /*dummy*/ = 0) {}
};
class NoZoomViewInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    ScalingStruct curScale;
    QByteArray unused1;
    PointStruct origin;
    quint8 unused2;
    quint8 fDraftMode;
    quint16 unused3;
    NoZoomViewInfoAtom(void* /*dummy*/ = 0) {}
};
class VBAInfoContainer : public StreamOffset {
public:
    RecordHeader rh;
    VBAInfoAtom vbaInfoAtom;
    VBAInfoContainer(void* /*dummy*/ = 0) {}
};
class NormalViewSetInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    RatioStruct leftPortion;
    RatioStruct topPortion;
    quint8 vertBarState;
    quint8 horizBarState;
    quint8 fPreferSingleSet;
    bool fHideThumbnails;
    bool fBarSnapped;
    quint8 reserved;
    NormalViewSetInfoAtom(void* /*dummy*/ = 0) {}
};
class TextContainer : public StreamOffset {
public:
    TextHeaderAtom textHeaderAtom;
    class textChoice : public QSharedPointer<StreamOffset> {
    public:
        textChoice() {}
        explicit textChoice(TextCharsAtom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit textChoice(TextBytesAtom* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    textChoice text;
    QSharedPointer<StyleTextPropAtom> style;
    QList<TextContainerMeta> meta;
    QSharedPointer<MasterTextPropAtom> master;
    QList<TextBookmarkAtom> bookmark;
    QSharedPointer<TextSpecialInfoAtom> specialinfo;
    QList<TextContainerInteractiveInfo> interactive;
    TextContainer(void* /*dummy*/ = 0) {}
};
class TextContainerMeta : public StreamOffset {
public:
    class metaChoice : public QSharedPointer<StreamOffset> {
    public:
        metaChoice() {}
        explicit metaChoice(SlideNumberMCAtom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit metaChoice(DateTimeMCAtom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit metaChoice(GenericDateMCAtom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit metaChoice(HeaderMCAtom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit metaChoice(FooterMCAtom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit metaChoice(RTFDateTimeMCAtom* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    metaChoice meta;
    TextContainerMeta(void* /*dummy*/ = 0) {}
};
class SlidePersistAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 persistIdRef;
    bool reserved1;
    bool fShouldCollapse;
    bool fNonOutlineData;
    quint8 reserved2;
    quint8 reserved3;
    quint16 reserved4;
    qint32 cTexts;
    SlideId slideId;
    quint32 reserved5;
    SlidePersistAtom(void* /*dummy*/ = 0) {}
};
class TextRuler : public StreamOffset {
public:
    bool _has_cLevels;
    bool _has_defaultTabSize;
    bool _has_leftMargin1;
    bool _has_indent1;
    bool _has_leftMargin2;
    bool _has_indent2;
    bool _has_leftMargin3;
    bool _has_indent3;
    bool _has_leftMargin4;
    bool _has_indent4;
    bool _has_leftMargin5;
    bool _has_indent5;
    bool fDefaultTabSize;
    bool fCLevels;
    bool fTabStops;
    bool fLeftMargin1;
    bool fLeftMargin2;
    bool fLeftMargin3;
    bool fLeftMargin4;
    bool fLeftMargin5;
    bool fIndent1;
    bool fIndent2;
    bool fIndent3;
    bool fIndent4;
    bool fIndent5;
    quint8 reserved1;
    quint16 reserved2;
    qint16 cLevels;
    quint16 defaultTabSize;
    QSharedPointer<TabStops> tabs;
    quint16 leftMargin1;
    quint16 indent1;
    quint16 leftMargin2;
    quint16 indent2;
    quint16 leftMargin3;
    quint16 indent3;
    quint16 leftMargin4;
    quint16 indent4;
    quint16 leftMargin5;
    quint16 indent5;
    TextRuler(void* /*dummy*/ = 0) {}
};
class TextPFException : public StreamOffset {
public:
    bool _has_bulletChar;
    bool _has_bulletFontRef;
    bool _has_bulletSize;
    bool _has_textAlignment;
    bool _has_lineSpacing;
    bool _has_spaceBefore;
    bool _has_spaceAfter;
    bool _has_leftMargin;
    bool _has_indent;
    bool _has_defaultTabSize;
    bool _has_fontAlign;
    bool _has_textDirection;
    PFMasks masks;
    QSharedPointer<BulletFlags> bulletFlags;
    qint16 bulletChar;
    quint16 bulletFontRef;
    qint16 bulletSize;
    QSharedPointer<ColorIndexStruct> bulletColor;
    quint16 textAlignment;
    qint16 lineSpacing;
    qint16 spaceBefore;
    qint16 spaceAfter;
    quint16 leftMargin;
    quint16 indent;
    quint16 defaultTabSize;
    QSharedPointer<TabStops> tabStops;
    quint16 fontAlign;
    QSharedPointer<PFWrapFlags> wrapFlags;
    quint16 textDirection;
    TextPFException(void* /*dummy*/ = 0) {}
};
class TextCFException : public StreamOffset {
public:
    bool _has_fontRef;
    bool _has_oldEAFontRef;
    bool _has_ansiFontRef;
    bool _has_symbolFontRef;
    bool _has_fontSize;
    bool _has_position;
    CFMasks masks;
    QSharedPointer<CFStyle> fontStyle;
    quint16 fontRef;
    quint16 oldEAFontRef;
    quint16 ansiFontRef;
    quint16 symbolFontRef;
    quint16 fontSize;
    QSharedPointer<ColorIndexStruct> color;
    qint16 position;
    TextCFException(void* /*dummy*/ = 0) {}
};
class FontCollectionEntry : public StreamOffset {
public:
    FontEntityAtom fontEntityAtom;
    QSharedPointer<FontEmbedDataBlob> fontEmbedData1;
    QSharedPointer<FontEmbedDataBlob> fontEmbedData2;
    QSharedPointer<FontEmbedDataBlob> fontEmbedData3;
    QSharedPointer<FontEmbedDataBlob> fontEmbedData4;
    FontCollectionEntry(void* /*dummy*/ = 0) {}
};
class KinsokuContainer : public StreamOffset {
public:
    RecordHeader rh;
    KinsokuAtom kinsokuAtom;
    QSharedPointer<KinsokuLeadingAtom> kinsokuLeadingAtom;
    QSharedPointer<KinsokuFollowingAtom> kinsokuFollowingAtom;
    KinsokuContainer(void* /*dummy*/ = 0) {}
};
class TextSIException : public StreamOffset {
public:
    bool _has_spellInfo;
    bool _has_lid;
    bool _has_altLid;
    bool _has_bidi;
    bool _has_pp10runid;
    bool _has_reserved3a;
    bool _has_reserved3b;
    bool _has_reserved3bc;
    bool _has_grammarError;
    bool spell;
    bool lang;
    bool altLang;
    bool unused1;
    bool unused2;
    bool fPp10ext;
    bool fBidi;
    bool unused3;
    bool reserved1;
    bool smartTag;
    quint8 reserved2a;
    quint32 reserved2b;
    quint16 spellInfo;
    quint16 lid;
    quint16 altLid;
    qint16 bidi;
    quint8 pp10runid;
    quint8 reserved3a;
    quint16 reserved3b;
    quint8 reserved3bc;
    bool grammarError;
    QSharedPointer<SmartTags> smartTags;
    TextSIException(void* /*dummy*/ = 0) {}
};
class TextMasterStyleLevel : public StreamOffset {
public:
    TextPFException pf;
    TextCFException cf;
    TextMasterStyleLevel(void* /*dummy*/ = 0) {}
};
class DocumentAtom : public StreamOffset {
public:
    RecordHeader rh;
    PointStruct slideSize;
    PointStruct notesSize;
    RatioStruct serverZoom;
    quint32 notesMasterPersistIdRef;
    quint32 handoutMasterPersistIdRef;
    quint16 firstSlideNumber;
    quint16 slideSizeType;
    quint8 fSaveWithFonts;
    quint8 fOmitTitlePlace;
    quint8 fRightToLeft;
    quint8 fShowComments;
    DocumentAtom(void* /*dummy*/ = 0) {}
};
class ProgStringTagContainer : public StreamOffset {
public:
    RecordHeader rh;
    TagNameAtom tagNameAtom;
    TagValueAtom tagValueAtom;
    ProgStringTagContainer(void* /*dummy*/ = 0) {}
};
class NotesAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint32 slideIdRef;
    SlideFlags slideFlags;
    quint16 unused;
    NotesAtom(void* /*dummy*/ = 0) {}
};
class ExObjListContainer : public StreamOffset {
public:
    RecordHeader rh;
    ExObjListAtom exObjListAtom;
    QList<ExObjListSubContainer> rgChildRec;
    ExObjListContainer(void* /*dummy*/ = 0) {}
};
class ExControlContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    ExControlAtom exControlAtom;
    ExOleObjAtom exOleObjAtom;
    QSharedPointer<MenuNameAtom> menuNameAtom;
    QSharedPointer<ProgIDAtom> progIdAtom;
    QSharedPointer<ClipboardNameAtom> clipboardNameAtom;
    QSharedPointer<MetafileBlob> metafile;
    ExControlContainer(void* /*dummy*/ = 0) {}
};
class ExHyperlinkContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    ExHyperlinkAtom exHyperlinkAtom;
    QSharedPointer<FriendlyNameAtom> friendlyNameAtom;
    QSharedPointer<TargetAtom> targetAtom;
    QSharedPointer<LocationAtom> locationAtom;
    ExHyperlinkContainer(void* /*dummy*/ = 0) {}
};
class ExOleLinkContainer : public StreamOffset {
public:
    RecordHeader rh;
    ExOleLinkAtom exOleLinkAtom;
    ExOleObjAtom exOleObjAtom;
    QSharedPointer<MenuNameAtom> menuNameAtom;
    QSharedPointer<ProgIDAtom> progIdAtom;
    QSharedPointer<ClipboardNameAtom> clipboardNameAtom;
    QSharedPointer<MetafileBlob> metafile;
    ExOleLinkContainer(void* /*dummy*/ = 0) {}
};
class ExOleEmbedContainer : public StreamOffset {
public:
    RecordHeader rh;
    ExOleEmbedAtom exOleEmbedAtom;
    ExOleObjAtom exOleObjAtom;
    QSharedPointer<MenuNameAtom> menuNameAtom;
    QSharedPointer<ProgIDAtom> progIdAtom;
    QSharedPointer<ClipboardNameAtom> clipboardNameAtom;
    QSharedPointer<MetafileBlob> metafile;
    ExOleEmbedContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtFDGGBlock : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    OfficeArtFDGG head;
    QList<OfficeArtIDCL> Rgidcl;
    OfficeArtFDGGBlock(void* /*dummy*/ = 0) {}
};
class OfficeArtSolverContainerFileBlock : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(OfficeArtFConnectorRule* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtFArcRule* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtFCalloutRule* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    OfficeArtSolverContainerFileBlock(void* /*dummy*/ = 0) {}
};
class ProtectionBooleanProperties : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    bool fLockAgainstGrouping;
    bool fLockAdjustHandles;
    bool fLockText;
    bool fLockVertices;
    bool fLockCropping;
    bool fLockAgainstSelect;
    bool fLockPosition;
    bool fLockAspectRatio;
    bool fLockRotation;
    bool fLockAgainstUngrouping;
    quint8 unused6;
    bool fUsefLockAgainstGrouping;
    bool fUseLockAdjustHandles;
    bool fUseLockText;
    bool fUsefLockVertices;
    bool fUsefLockCropping;
    bool fUsefLockAgainstSelect;
    bool fUsefLockPosition;
    bool fUsefLockAspectRatio;
    bool fUsefLockRotation;
    bool fUsefLockAgainstUngrouping;
    quint8 unused2;
    ProtectionBooleanProperties(void* /*dummy*/ = 0) {}
};
class Rotation : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    FixedPoint rotation;
    Rotation(void* /*dummy*/ = 0) {}
};
class ITxid : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 iTxid;
    ITxid(void* /*dummy*/ = 0) {}
};
class DxTextLeft : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 dxTextLeft;
    DxTextLeft(void* /*dummy*/ = 0) {}
};
class DyTextTop : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 dyTextTop;
    DyTextTop(void* /*dummy*/ = 0) {}
};
class DxTextRight : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 dxTextRight;
    DxTextRight(void* /*dummy*/ = 0) {}
};
class DyTextBottom : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 dyTextBottom;
    DyTextBottom(void* /*dummy*/ = 0) {}
};
class WrapText : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 wrapText;
    WrapText(void* /*dummy*/ = 0) {}
};
class AnchorText : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 anchorText;
    AnchorText(void* /*dummy*/ = 0) {}
};
class TextBooleanProperties : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    bool unused1;
    bool fFitShapeToText;
    bool unused2;
    bool fAutoTextMargin;
    bool fSelectText;
    quint8 unused3a;
    quint8 unused3b;
    bool unused4;
    bool fUsefFitShapeToText;
    bool unused5;
    bool fUsefAutoTextMargin;
    bool fUsefSelectText;
    quint8 unused6a;
    quint8 unused6b;
    TextBooleanProperties(void* /*dummy*/ = 0) {}
};
class HspNext : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 hspNext;
    HspNext(void* /*dummy*/ = 0) {}
};
class Pib : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 pib;
    Pib(void* /*dummy*/ = 0) {}
};
class PibName : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 pibName;
    PibName(void* /*dummy*/ = 0) {}
};
class ShapePath : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 shapePath;
    ShapePath(void* /*dummy*/ = 0) {}
};
class adjust2Value : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 adjust2value;
    adjust2Value(void* /*dummy*/ = 0) {}
};
class adjust3Value : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 adjust3value;
    adjust3Value(void* /*dummy*/ = 0) {}
};
class GeometryBooleanProperties : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    bool fFillOk;
    bool fFillShadeShapeOK;
    bool fGtextOK;
    bool fLineOK;
    bool f3DOK;
    bool fShadowOK;
    bool unuseda;
    bool unusedb;
    quint8 unused2;
    bool fUsefFillOK;
    bool fUsefFillShadeShapeOK;
    bool fUsefGtextOK;
    bool fUsefLineOK;
    bool fUsef3DOK;
    bool fUsefShadowOK;
    bool unused3a;
    bool unused3b;
    quint8 unused4;
    GeometryBooleanProperties(void* /*dummy*/ = 0) {}
};
class FillType : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 fillType;
    FillType(void* /*dummy*/ = 0) {}
};
class FillColor : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF fillColor;
    FillColor(void* /*dummy*/ = 0) {}
};
class FillBackColor : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF fillBackColor;
    FillBackColor(void* /*dummy*/ = 0) {}
};
class FillBlip : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 fillBlip;
    FillBlip(void* /*dummy*/ = 0) {}
};
class FillRectRight : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 fillRectRight;
    FillRectRight(void* /*dummy*/ = 0) {}
};
class FillRectBottom : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 fillRectBottom;
    FillRectBottom(void* /*dummy*/ = 0) {}
};
class FillStyleBooleanProperties : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    bool fNoFillHitText;
    bool fillUseRect;
    bool fillShape;
    bool fHitTestFill;
    bool fFilled;
    bool fUseShapeAnchor;
    bool fRecolorFillAsPicture;
    bool unused1a;
    quint8 unused1b;
    bool fUseNoFillHitTest;
    bool fUseFillUseRext;
    bool fUseFillShape;
    bool fUseHitTestFill;
    bool fUseFilled;
    bool fUseUseShapeAnchor;
    bool fUsefRecolorFillAsPicture;
    bool unused2a;
    quint8 unused2b;
    FillStyleBooleanProperties(void* /*dummy*/ = 0) {}
};
class LineColor : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF lineColor;
    LineColor(void* /*dummy*/ = 0) {}
};
class LineOpacity : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 lineOpacity;
    LineOpacity(void* /*dummy*/ = 0) {}
};
class LineBackColor : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF lineBackColor;
    LineBackColor(void* /*dummy*/ = 0) {}
};
class LineFillBlip : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineFillBlip;
    LineFillBlip(void* /*dummy*/ = 0) {}
};
class LineWidth : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineWidth;
    LineWidth(void* /*dummy*/ = 0) {}
};
class LineStyle : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineStyle;
    LineStyle(void* /*dummy*/ = 0) {}
};
class LineDashing : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineDashing;
    LineDashing(void* /*dummy*/ = 0) {}
};
class LineStartArrowhead : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineStartArrowhead;
    LineStartArrowhead(void* /*dummy*/ = 0) {}
};
class LineEndArrowhead : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineEndArrowhead;
    LineEndArrowhead(void* /*dummy*/ = 0) {}
};
class LineStartArrowWidth : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineStartArrowWidth;
    LineStartArrowWidth(void* /*dummy*/ = 0) {}
};
class LineStartArrowLength : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineStartArrowLength;
    LineStartArrowLength(void* /*dummy*/ = 0) {}
};
class LineEndArrowWidth : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineEndArrowWidth;
    LineEndArrowWidth(void* /*dummy*/ = 0) {}
};
class LineEndArrowLength : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineEndArrowLength;
    LineEndArrowLength(void* /*dummy*/ = 0) {}
};
class LineJoinStyle : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lineJoinStyle;
    LineJoinStyle(void* /*dummy*/ = 0) {}
};
class LineStyleBooleanProperties : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    bool fNoLineDrawDash;
    bool fLineFillShape;
    bool fHitTestLine;
    bool fLine;
    bool fArrowHeadsOK;
    bool fInsetPenOK;
    bool fInsetPen;
    bool reserved1;
    bool reserved2;
    bool fLineOpaqueBackColor;
    quint8 unused1;
    bool fUseNoLineDrawDash;
    bool fUseLineFillShape;
    bool fUseHitTestLine;
    bool fUsefLine;
    bool fUsefArrowHeadsOK;
    bool fUseInsetPenOK;
    bool fUseInsetPen;
    bool unused2;
    bool unused3;
    bool fUsefLineOpaqueBackColor;
    quint8 unused4;
    LineStyleBooleanProperties(void* /*dummy*/ = 0) {}
};
class ShadowColor : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF shadowColor;
    ShadowColor(void* /*dummy*/ = 0) {}
};
class ShadowOpacity : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    FixedPoint shadowOpacity;
    ShadowOpacity(void* /*dummy*/ = 0) {}
};
class ShadowOffsetX : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 shadowOffsetX;
    ShadowOffsetX(void* /*dummy*/ = 0) {}
};
class ShadowOffsetY : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 shadowOffsetY;
    ShadowOffsetY(void* /*dummy*/ = 0) {}
};
class ShadowStyleBooleanPropertiesr : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    bool fshadowObscured;
    bool fShadow;
    quint16 unused1;
    bool fUsefshadowObscured;
    bool fUsefShadow;
    quint16 unused2;
    ShadowStyleBooleanPropertiesr(void* /*dummy*/ = 0) {}
};
class HspMaster : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 hspMaster;
    HspMaster(void* /*dummy*/ = 0) {}
};
class BWMode : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 bWMode;
    BWMode(void* /*dummy*/ = 0) {}
};
class ShapeBooleanProperties : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    bool fBackground;
    bool reserved1;
    bool fInitiator;
    bool fLockShapeType;
    bool fPreferRelativeResize;
    bool fOleIcon;
    bool fFlipVOverride;
    bool fFlipHOverride;
    bool fPolicyBarcode;
    bool fPolicyLabel;
    bool unused1;
    bool unused2;
    quint8 unused3;
    bool fUsefBackground;
    bool unused4;
    bool fUsefInitiator;
    bool fUsefLockShapeType;
    bool fusePreferrelativeResize;
    bool fUsefOleIcon;
    bool fUsefFlipVOverride;
    bool fUsefFlipHOverride;
    bool fUsefPolicyBarcode;
    bool fUsefPolicyLabel;
    bool unused5;
    bool unused6;
    quint8 unused7;
    ShapeBooleanProperties(void* /*dummy*/ = 0) {}
};
class LidRegroup : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    quint32 lidRegroup;
    LidRegroup(void* /*dummy*/ = 0) {}
};
class WzFillId : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 wzFillId;
    WzFillId(void* /*dummy*/ = 0) {}
};
class OfficeArtClientAnchor : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QSharedPointer<SmallRectStruct> rect1;
    QSharedPointer<RectStruct> rect2;
    OfficeArtClientAnchor(void* /*dummy*/ = 0) {}
};
class AnimationInfoContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    AnimationInfoAtom animationAtom;
    QSharedPointer<SoundContainer> animationSound;
    AnimationInfoContainer(void* /*dummy*/ = 0) {}
};
class MouseInteractiveInfoContainer : public StreamOffset {
public:
    RecordHeader rh;
    InteractiveInfoAtom interactiveInfoAtom;
    QSharedPointer<MacroNameAtom> macroNameAtom;
    MouseInteractiveInfoContainer(void* /*dummy*/ = 0) {}
};
class TextRulerAtom : public StreamOffset {
public:
    RecordHeader rh;
    TextRuler textRuler;
    TextRulerAtom(void* /*dummy*/ = 0) {}
};
class OfficeArtFOPTE : public StreamOffset {
public:
    OfficeArtFOPTEOPID opid;
    qint32 op;
    OfficeArtFOPTE(void* /*dummy*/ = 0) {}
};
class Fib : public StreamOffset {
public:
    FibBase base;
    quint16 csw;
    FibRgW97 fibRgW;
    quint16 cslw;
    FibRgLw97 fibRgLw;
    quint16 cbRgFcLcb;
    FibRgFcLcb97 fibRgFcLcbBlob;
    QSharedPointer<FibRgFcLcb2000> fibRgFcLcbBlob2;
    QSharedPointer<FibRgFcLcb2002> fibRgFcLcbBlob3;
    quint16 cswNew;
    QByteArray fibRgCswNew;
    QByteArray trail;
    Fib(void* /*dummy*/ = 0) {}
};
class STSH : public StreamOffset {
public:
    LPStshi lpstshi;
    QList<LPStd> rglpstd;
    STSH(void* /*dummy*/ = 0) {}
};
class Clx : public StreamOffset {
public:
    QList<Pcr> RgPrc;
    Pcdt pcdt;
    Clx(void* /*dummy*/ = 0) {}
};
class Pcr : public StreamOffset {
public:
    quint8 clxt;
    PrcData prcData;
    Pcr(void* /*dummy*/ = 0) {}
};
class Prm : public StreamOffset {
public:
    class prmChoice : public QSharedPointer<StreamOffset> {
    public:
        prmChoice() {}
        explicit prmChoice(Prm0* a) :QSharedPointer<StreamOffset>(a) {}
        explicit prmChoice(Prm1* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    prmChoice prm;
    Prm(void* /*dummy*/ = 0) {}
};
class OfficeArtBlipEMF : public StreamOffset {
public:
    bool _has_rgbUid2;
    OfficeArtRecordHeader rh;
    QByteArray rgbUid1;
    QByteArray rgbUid2;
    OfficeArtMetafileHeader metafileHeader;
    QByteArray BLIPFileData;
    OfficeArtBlipEMF(void* /*dummy*/ = 0) {}
};
class OfficeArtBlipWMF : public StreamOffset {
public:
    bool _has_rgbUid2;
    OfficeArtRecordHeader rh;
    QByteArray rgbUid1;
    QByteArray rgbUid2;
    OfficeArtMetafileHeader metafileHeader;
    QByteArray BLIPFileData;
    OfficeArtBlipWMF(void* /*dummy*/ = 0) {}
};
class OfficeArtBlipPICT : public StreamOffset {
public:
    bool _has_rgbUid2;
    OfficeArtRecordHeader rh;
    QByteArray rgbUid1;
    QByteArray rgbUid2;
    OfficeArtMetafileHeader metafileHeader;
    QByteArray BLIPFileData;
    OfficeArtBlipPICT(void* /*dummy*/ = 0) {}
};
class OfficeArtBlip : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(OfficeArtBlipEMF* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtBlipWMF* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtBlipPICT* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtBlipJPEG* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtBlipPNG* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtBlipDIB* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtBlipTIFF* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    OfficeArtBlip(void* /*dummy*/ = 0) {}
};
class ZoomViewInfoAtom : public StreamOffset {
public:
    RecordHeader rh;
    ScalingStruct curScale;
    QByteArray unused1;
    PointStruct origin;
    quint8 fUseVarScale;
    quint8 fDraftMode;
    quint16 unused2;
    ZoomViewInfoAtom(void* /*dummy*/ = 0) {}
};
class TextMasterStyle9Level : public StreamOffset {
public:
    TextPFException9 pf9;
    TextCFException9 cf9;
    TextMasterStyle9Level(void* /*dummy*/ = 0) {}
};
class StyleTextProp9 : public StreamOffset {
public:
    TextPFException9 pf9;
    TextCFException9 cf9;
    TextSIException si;
    StyleTextProp9(void* /*dummy*/ = 0) {}
};
class PP10DocBinaryTagExtension : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray tagName;
    RecordHeader rhData;
    QSharedPointer<FontCollection10Container> fontCollectionContainer;
    QList<TextMasterStyle10Atom> rgTextMasterStyle10;
    QSharedPointer<TextDefaults10Atom> textDefaultsAtom;
    GridSpacing10Atom gridSpacingAtom;
    QList<CommentIndex10Container> rgCommentIndex10;
    QSharedPointer<FontEmbedFlags10Atom> fontEmbedFlagsAtom;
    QSharedPointer<CopyrightAtom> copyrightAtom;
    QSharedPointer<KeywordsAtom> keywordsAtom;
    QSharedPointer<FilterPrivacyFlags10Atom> filterPrivacyFlagsAtom;
    QSharedPointer<OutlineTextProps10Container> outlineTextPropsContainer;
    QSharedPointer<DocToolbarStates10Atom> docToolbarStatesAtom;
    QSharedPointer<SlideListTable10Container> slideListTableContainer;
    QSharedPointer<DiffTree10Container> rgDiffTree10Container;
    QSharedPointer<ModifyPasswordAtom> modifyPasswordAtom;
    QSharedPointer<PhotoAlbumInfo10Atom> photoAlbumInfoAtom;
    PP10DocBinaryTagExtension(void* /*dummy*/ = 0) {}
};
class TextMasterStyle10Level : public StreamOffset {
public:
    TextCFException10 cf10;
    TextMasterStyle10Level(void* /*dummy*/ = 0) {}
};
class NotesTextViewInfoContainer : public StreamOffset {
public:
    RecordHeader rh;
    ZoomViewInfoAtom zoomViewInfo;
    NotesTextViewInfoContainer(void* /*dummy*/ = 0) {}
};
class OutlineViewInfoContainer : public StreamOffset {
public:
    RecordHeader rh;
    NoZoomViewInfoAtom noZoomViewInfo;
    OutlineViewInfoContainer(void* /*dummy*/ = 0) {}
};
class NormalViewSetInfoContainer : public StreamOffset {
public:
    RecordHeader rh;
    NormalViewSetInfoAtom normalViewSetInfoAtom;
    NormalViewSetInfoContainer(void* /*dummy*/ = 0) {}
};
class SlideListWithTextSubContainerOrAtom : public StreamOffset {
public:
    SlidePersistAtom slidePersistAtom;
    QList<TextContainer> atoms;
    SlideListWithTextSubContainerOrAtom(void* /*dummy*/ = 0) {}
};
class TextContainerInteractiveInfo : public StreamOffset {
public:
    class interactiveChoice : public QSharedPointer<StreamOffset> {
    public:
        interactiveChoice() {}
        explicit interactiveChoice(MouseInteractiveInfoContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit interactiveChoice(MouseTextInteractiveInfoAtom* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    interactiveChoice interactive;
    TextContainerInteractiveInfo(void* /*dummy*/ = 0) {}
};
class TextClientDataSubContainerOrAtom : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(OutlineTextRefAtom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(TextContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(TextRulerAtom* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    TextClientDataSubContainerOrAtom(void* /*dummy*/ = 0) {}
};
class TextPFRun : public StreamOffset {
public:
    quint32 count;
    quint16 indentLevel;
    TextPFException pf;
    TextPFRun(void* /*dummy*/ = 0) {}
};
class TextCFRun : public StreamOffset {
public:
    quint32 count;
    TextCFException cf;
    TextCFRun(void* /*dummy*/ = 0) {}
};
class TextCFExceptionAtom : public StreamOffset {
public:
    RecordHeader rh;
    TextCFException cf;
    TextCFExceptionAtom(void* /*dummy*/ = 0) {}
};
class DefaultRulerAtom : public StreamOffset {
public:
    RecordHeader rh;
    TextRuler defaultTextRuler;
    DefaultRulerAtom(void* /*dummy*/ = 0) {}
};
class TextPFExceptionAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint16 reserved;
    TextPFException pf;
    TextPFExceptionAtom(void* /*dummy*/ = 0) {}
};
class TextSIRun : public StreamOffset {
public:
    quint32 count;
    TextSIException si;
    TextSIRun(void* /*dummy*/ = 0) {}
};
class TextSIExceptionAtom : public StreamOffset {
public:
    RecordHeader rh;
    TextSIException textSIException;
    TextSIExceptionAtom(void* /*dummy*/ = 0) {}
};
class TextMasterStyleAtom : public StreamOffset {
public:
    bool _has_lstLvl1level;
    bool _has_lstLvl2level;
    bool _has_lstLvl3level;
    bool _has_lstLvl4level;
    bool _has_lstLvl5level;
    RecordHeader rh;
    quint16 cLevels;
    quint16 lstLvl1level;
    QSharedPointer<TextMasterStyleLevel> lstLvl1;
    quint16 lstLvl2level;
    QSharedPointer<TextMasterStyleLevel> lstLvl2;
    quint16 lstLvl3level;
    QSharedPointer<TextMasterStyleLevel> lstLvl3;
    quint16 lstLvl4level;
    QSharedPointer<TextMasterStyleLevel> lstLvl4;
    quint16 lstLvl5level;
    QSharedPointer<TextMasterStyleLevel> lstLvl5;
    TextMasterStyleAtom(void* /*dummy*/ = 0) {}
};
class SlideProgTagsSubContainerOrAtom : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(ProgStringTagContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(SlideProgBinaryTagContainer* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    SlideProgTagsSubContainerOrAtom(void* /*dummy*/ = 0) {}
};
class ExObjListSubContainer : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(ExAviMovieContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExCDAudioContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExControlContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExHyperlinkContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExMCIMovieContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExMIDIAudioContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExOleEmbedContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExOleLinkContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExWAVAudioEmbeddedContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExWAVAudioLinkContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(UnknownExObjListSubContainerChild* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    ExObjListSubContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtDggContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    OfficeArtFDGGBlock drawingGroup;
    QSharedPointer<OfficeArtBStoreContainer> blipStore;
    OfficeArtFOPT drawingPrimaryOptions;
    QSharedPointer<OfficeArtTertiaryFOPT> drawingTertiaryOptions;
    QSharedPointer<OfficeArtColorMRUContainer> colorMRU;
    OfficeArtSplitMenuColorContainer splitColors;
    QSharedPointer<OfficeArtTertiaryFOPT> unknown;
    OfficeArtDggContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtFOPTEChoice : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(ProtectionBooleanProperties* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(adjust2Value* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(adjust3Value* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ITxid* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(DxTextLeft* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(DyTextTop* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(DxTextRight* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(DyTextBottom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(WrapText* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(AnchorText* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(TextBooleanProperties* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(HspNext* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(Pib* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(PibName* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ShapePath* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(GeometryBooleanProperties* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(FillType* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(FillColor* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(FillBackColor* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(FillBlip* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(FillStyleBooleanProperties* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineColor* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineOpacity* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineBackColor* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineFillBlip* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineWidth* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineStyle* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineDashing* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(FillRectRight* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(FillRectBottom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(WzFillId* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineStyleBooleanProperties* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineStartArrowhead* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineEndArrowhead* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineStartArrowWidth* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineStartArrowLength* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineEndArrowWidth* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineEndArrowLength* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LineJoinStyle* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ShadowColor* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ShadowOpacity* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ShadowOffsetX* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ShadowOffsetY* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ShadowStyleBooleanPropertiesr* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ShapeBooleanProperties* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(HspMaster* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(Rotation* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(LidRegroup* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(BWMode* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtFOPTE* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    OfficeArtFOPTEChoice(void* /*dummy*/ = 0) {}
};
class OfficeArtClientData : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QSharedPointer<ShapeFlagsAtom> shapeFlagsAtom;
    QSharedPointer<ShapeFlags10Atom> shapeFlags10Atom;
    QSharedPointer<ExObjRefAtom> exObjRefAtom;
    QSharedPointer<AnimationInfoContainer> animationInfo;
    QSharedPointer<MouseInteractiveInfoContainer> mouseClickInteractiveInfo;
    QSharedPointer<MouseInteractiveInfoContainer> mouseOverInteractiveInfo;
    QSharedPointer<PlaceholderAtom> placeholderAtom;
    QSharedPointer<RecolorInfoAtom> recolorInfoAtom;
    QList<ShapeClientRoundtripDataSubcontainerOrAtom> rgShapeClientRoundtripData;
    QSharedPointer<UnknownOfficeArtClientDataChild> unknown;
    OfficeArtClientData(void* /*dummy*/ = 0) {}
};
class WordDocument : public StreamOffset {
public:
    Fib fib;
    WordDocument(void* /*dummy*/ = 0) {}
};
class Table : public StreamOffset {
public:
    STSH stsh;
    PlcfSed plcfSed;
    Plcfhdd plcfHdd;
    PlcBteChpx plcfBteChpx;
    PlcfBtePapx plcfBtePapx;
    Tcg cmds;
    Clx clx;
    SttbfFfn sttbfFfn;
    QByteArray dop;
    Table(void* /*dummy*/ = 0) {}
};
class Pcd : public StreamOffset {
public:
    bool fNoParaLast;
    bool fR1;
    bool fDirtly;
    bool fR2;
    quint16 fR3;
    FCompressed fc;
    Prm prm;
    Pcd(void* /*dummy*/ = 0) {}
};
class OfficeArtFBSE : public StreamOffset {
public:
    bool _has_nameData;
    OfficeArtRecordHeader rh;
    quint8 btWin32;
    quint8 btMacOS;
    QByteArray rgbUid;
    quint16 tag;
    quint32 size;
    quint32 cRef;
    quint32 foDelay;
    quint8 unused1;
    quint8 cbName;
    quint8 unused2;
    quint8 unused3;
    QByteArray nameData;
    QSharedPointer<OfficeArtBlip> embeddedBlip;
    OfficeArtFBSE(void* /*dummy*/ = 0) {}
};
class OfficeArtBStoreContainerFileBlock : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(OfficeArtFBSE* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtBlip* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    OfficeArtBStoreContainerFileBlock(void* /*dummy*/ = 0) {}
};
class SlideViewInfoInstance : public StreamOffset {
public:
    RecordHeader rh;
    SlideViewInfoAtom slideViewInfoAtom;
    ZoomViewInfoAtom zoomViewInfoAtom;
    QList<GuideAtom> rgGuideAtom;
    SlideViewInfoInstance(void* /*dummy*/ = 0) {}
};
class TextMasterStyle9Atom : public StreamOffset {
public:
    bool _has_lstLvl1level;
    bool _has_lstLvl2level;
    bool _has_lstLvl3level;
    bool _has_lstLvl4level;
    bool _has_lstLvl5level;
    RecordHeader rh;
    quint16 cLevels;
    quint16 lstLvl1level;
    QSharedPointer<TextMasterStyle9Level> lstLvl1;
    quint16 lstLvl2level;
    QSharedPointer<TextMasterStyle9Level> lstLvl2;
    quint16 lstLvl3level;
    QSharedPointer<TextMasterStyle9Level> lstLvl3;
    quint16 lstLvl4level;
    QSharedPointer<TextMasterStyle9Level> lstLvl4;
    quint16 lstLvl5level;
    QSharedPointer<TextMasterStyle9Level> lstLvl5;
    TextMasterStyle9Atom(void* /*dummy*/ = 0) {}
};
class BlipEntityAtom : public StreamOffset {
public:
    RecordHeader rh;
    quint8 winBlipType;
    bool unused;
    OfficeArtBStoreContainerFileBlock blip;
    BlipEntityAtom(void* /*dummy*/ = 0) {}
};
class StyleTextProp9Atom : public StreamOffset {
public:
    RecordHeader rh;
    StyleTextProp9 rgStyleTextProp9;
    StyleTextProp9Atom(void* /*dummy*/ = 0) {}
};
class TextMasterStyle10Atom : public StreamOffset {
public:
    bool _has_lstLvl1level;
    bool _has_lstLvl2level;
    bool _has_lstLvl3level;
    bool _has_lstLvl4level;
    bool _has_lstLvl5level;
    RecordHeader rh;
    quint16 cLevels;
    quint16 lstLvl1level;
    QSharedPointer<TextMasterStyle10Level> lstLvl1;
    quint16 lstLvl2level;
    QSharedPointer<TextMasterStyle10Level> lstLvl2;
    quint16 lstLvl3level;
    QSharedPointer<TextMasterStyle10Level> lstLvl3;
    quint16 lstLvl4level;
    QSharedPointer<TextMasterStyle10Level> lstLvl4;
    quint16 lstLvl5level;
    QSharedPointer<TextMasterStyle10Level> lstLvl5;
    TextMasterStyle10Atom(void* /*dummy*/ = 0) {}
};
class DocumentTextInfoContainer : public StreamOffset {
public:
    RecordHeader rh;
    QSharedPointer<KinsokuContainer> kinsoku;
    QSharedPointer<FontCollectionContainer> fontCollection;
    QSharedPointer<TextCFExceptionAtom> textCFDefaultsAtom;
    QSharedPointer<TextPFExceptionAtom> textPFDefaultsAtom;
    QSharedPointer<DefaultRulerAtom> defaultRulerAtom;
    TextSIExceptionAtom textSIDefaultsAtom;
    TextMasterStyleAtom textMasterStyleAtom;
    DocumentTextInfoContainer(void* /*dummy*/ = 0) {}
};
class DrawingGroupContainer : public StreamOffset {
public:
    RecordHeader rh;
    OfficeArtDggContainer OfficeArtDgg;
    DrawingGroupContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtSpContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    QSharedPointer<OfficeArtFSPGR> shapeGroup;
    OfficeArtFSP shapeProp;
    QSharedPointer<OfficeArtFPSPL> deletedshape;
    QSharedPointer<OfficeArtFOPT> shapePrimaryOptions;
    QSharedPointer<OfficeArtSecondaryFOPT> shapeSecondaryOptions1;
    QSharedPointer<OfficeArtTertiaryFOPT> shapeTertiaryOptions1;
    QSharedPointer<OfficeArtChildAnchor> childAnchor;
    QSharedPointer<OfficeArtClientAnchor> clientAnchor;
    QSharedPointer<OfficeArtClientData> clientData;
    QSharedPointer<OfficeArtClientTextBox> clientTextbox;
    QSharedPointer<OfficeArtSecondaryFOPT> shapeSecondaryOptions2;
    QSharedPointer<OfficeArtTertiaryFOPT> shapeTertiaryOptions2;
    OfficeArtSpContainer(void* /*dummy*/ = 0) {}
};
class DocumentContainer : public StreamOffset {
public:
    RecordHeader rh;
    DocumentAtom documentAtom;
    QSharedPointer<ExObjListContainer> exObjList;
    DocumentTextInfoContainer documentTextInfo;
    QSharedPointer<SoundCollectionContainer> soundCollection;
    DrawingGroupContainer drawingGroup;
    MasterListWithTextContainer masterList;
    QSharedPointer<DocInfoListContainer> docInfoList;
    QSharedPointer<SlideHeadersFootersContainer> slideHF;
    QSharedPointer<NotesHeadersFootersContainer> notesHF;
    QSharedPointer<SlideListWithTextContainer> slideList;
    QSharedPointer<SlideHeadersFootersContainer> slideHF2;
    QSharedPointer<NotesListWithTextContainer> notesList;
    QSharedPointer<SlideShowDocInfoAtom> slideShowDocInfoAtom;
    QSharedPointer<NamedShowsContainer> namedShows;
    QSharedPointer<SummaryContainer> summary;
    QSharedPointer<DocRoutingSlipAtom> docRoutingSlipAtom;
    QSharedPointer<PrintOptionsAtom> printOptionsAtom;
    QSharedPointer<RoundTripCustomTableStyles12Atom> rtCustomTableStylesAtom1;
    QSharedPointer<UnknownDocumentContainerChild> unknown1;
    EndDocumentAtom endDocumentAtom;
    QSharedPointer<UnknownDocumentContainerChild3> unknown2;
    QSharedPointer<UnknownDocumentContainerChild2> unknown3;
    QSharedPointer<UnknownDocumentContainerChild3> unknown4;
    QSharedPointer<UnknownDocumentContainerChild4> unknown5;
    QSharedPointer<RoundTripCustomTableStyles12Atom> rtCustomTableStylesAtom2;
    DocumentContainer(void* /*dummy*/ = 0) {}
};
class DocInfoListSubContainerOrAtom : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(DocProgTagsContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(NormalViewSetInfoContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(NotesTextViewInfoContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OutlineViewInfoContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(SlideViewInfoInstance* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(SorterViewInfoContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(VBAInfoContainer* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    DocInfoListSubContainerOrAtom(void* /*dummy*/ = 0) {}
};
class PP9DocBinaryTagExtension : public StreamOffset {
public:
    RecordHeader rh;
    QByteArray tagName;
    RecordHeader rhData;
    TextMasterStyle9Atom rgTextMasterStyle9;
    BlipCollection9Container blipCollectionContainer;
    TextDefaults9Atom textDefaultsAtom;
    Kinsoku9Container kinsokuContainer;
    ExHyperlink9Container rgExternalHyperlink9;
    QSharedPointer<PresAdvisorFlags9Atom> presAdvisorFlagsAtom;
    QSharedPointer<EnvelopeData9Atom> envelopeDataAtom;
    EnvelopeFlags9Atom envelopeFlagsAtom;
    QSharedPointer<HTMLDocInfo9Atom> htmlDocInfoAtom;
    HTMLPublishInfo9Container htmlPublishInfoAtom;
    BroadcastDocInfo9Container rgBroadcastDocInfo9;
    OutlineTextProps9Container outlineTextPropsContainer;
    PP9DocBinaryTagExtension(void* /*dummy*/ = 0) {}
};
class OutlineTextProps9Entry : public StreamOffset {
public:
    OutlineTextPropsHeaderExAtom outlineTextHeaderAtom;
    StyleTextProp9Atom styleTextProp9Atom;
    OutlineTextProps9Entry(void* /*dummy*/ = 0) {}
};
class OfficeArtDgContainer : public StreamOffset {
public:
    OfficeArtRecordHeader rh;
    OfficeArtFDG drawingData;
    QSharedPointer<OfficeArtFRITContainer> regroupItems;
    OfficeArtSpgrContainer groupShape;
    QSharedPointer<OfficeArtSpContainer> shape;
    QList<OfficeArtSpgrContainerFileBlock> deletedShapes;
    QSharedPointer<OfficeArtSolverContainer> solvers;
    OfficeArtDgContainer(void* /*dummy*/ = 0) {}
};
class OfficeArtSpgrContainerFileBlock : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(OfficeArtSpContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(OfficeArtSpgrContainer* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    OfficeArtSpgrContainerFileBlock(void* /*dummy*/ = 0) {}
};
class DocProgBinaryTagSubContainerOrAtom : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(PP9DocBinaryTagExtension* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(PP10DocBinaryTagExtension* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(PP11DocBinaryTagExtension* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(PP12DocBinaryTagExtension* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(UnknownBinaryTag* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    DocProgBinaryTagSubContainerOrAtom(void* /*dummy*/ = 0) {}
};
class DrawingContainer : public StreamOffset {
public:
    RecordHeader rh;
    OfficeArtDgContainer OfficeArtDg;
    DrawingContainer(void* /*dummy*/ = 0) {}
};
class DocProgBinaryTagContainer : public StreamOffset {
public:
    RecordHeader rh;
    DocProgBinaryTagSubContainerOrAtom rec;
    DocProgBinaryTagContainer(void* /*dummy*/ = 0) {}
};
class MainMasterContainer : public StreamOffset {
public:
    RecordHeader rh;
    SlideAtom slideAtom;
    QSharedPointer<SlideShowSlideInfoAtom> unknown;
    QList<SchemeListElementColorSchemeAtom> rgSchemeListElementColorScheme;
    QList<TextMasterStyleAtom> rgTextMasterStyle;
    QSharedPointer<RoundTripOArtTextStyles12Atom> roundTripOArtTextSTyles12Atom;
    QSharedPointer<SlideShowSlideInfoAtom> slideShowInfoAtom;
    QSharedPointer<PerSlideHeadersFootersContainer> perSlideHeadersFootersContainer;
    DrawingContainer drawing;
    SlideSchemeColorSchemeAtom slideSchemeColorSchemeAtom;
    QSharedPointer<SlideNameAtom> slideNameAtom;
    QSharedPointer<SlideProgTagsContainer> slideProgTagsContainer;
    QList<RoundTripMainMasterRecord> rgRoundTripMainMaster;
    QSharedPointer<UnknownSlideContainerChild> unknown2;
    QSharedPointer<TemplateNameAtom> templateNameAtom;
    QSharedPointer<SlideProgTagsContainer> unknown3;
    MainMasterContainer(void* /*dummy*/ = 0) {}
};
class SlideContainer : public StreamOffset {
public:
    RecordHeader rh;
    SlideAtom slideAtom;
    QSharedPointer<SlideShowSlideInfoAtom> slideShowSlideInfoAtom;
    QSharedPointer<PerSlideHeadersFootersContainer> perSlideHFContainer;
    QSharedPointer<RoundTripSlideSyncInfo12Container> rtSlideSyncInfo12;
    DrawingContainer drawing;
    SlideSchemeColorSchemeAtom slideSchemeColorSchemeAtom;
    QSharedPointer<SlideNameAtom> slideNameAtom;
    QSharedPointer<SlideProgTagsContainer> slideProgTagsContainer;
    QList<RoundTripSlideRecord> rgRoundTripSlide;
    QSharedPointer<UnknownSlideContainerChild> unknown;
    SlideContainer(void* /*dummy*/ = 0) {}
};
class NotesContainer : public StreamOffset {
public:
    RecordHeader rh;
    NotesAtom notesAtom;
    QSharedPointer<PerSlideHeadersFootersContainer> perSlideHeadersFootersContainer;
    DrawingContainer drawing;
    SlideSchemeColorSchemeAtom slideSchemeColorSchemeAtom;
    QSharedPointer<SlideNameAtom> slideNameAtom;
    QSharedPointer<SlideProgTagsContainer> slideProgTagsContainer;
    QList<NotesRoundTripAtom> rgNotesRoundTripAtom;
    NotesContainer(void* /*dummy*/ = 0) {}
};
class DocProgTagsSubContainerOrAtom : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(ProgStringTagContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(DocProgBinaryTagContainer* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    DocProgTagsSubContainerOrAtom(void* /*dummy*/ = 0) {}
};
class MasterOrSlideContainer : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(MainMasterContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(SlideContainer* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    MasterOrSlideContainer(void* /*dummy*/ = 0) {}
};
class PowerPointStruct : public StreamOffset {
public:
    class anonChoice : public QSharedPointer<StreamOffset> {
    public:
        anonChoice() {}
        explicit anonChoice(DocumentContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(MasterOrSlideContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(PersistDirectoryAtom* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(NotesContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(HandoutContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(SlideContainer* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExOleObjStg* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(ExControlStg* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(VbaProjectStg* a) :QSharedPointer<StreamOffset>(a) {}
        explicit anonChoice(UserEditAtom* a) :QSharedPointer<StreamOffset>(a) {}
        template <typename T> T*get() { return dynamic_cast<T*>(this->data()); }
        template <typename T> const T*get() const { return dynamic_cast<const T*>(this->data()); }
        template <typename T> bool is() const { return get<T>(); }
    };
    anonChoice anon;
    PowerPointStruct(void* /*dummy*/ = 0) {}
};
} // close namespace
#endif
