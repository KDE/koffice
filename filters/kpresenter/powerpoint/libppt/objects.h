/* libppt - library to read PowerPoint presentation
   Copyright (C) 2005 Yolla Indria <yolla.indria@gmail.com>

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public License
   along with this library; see the file COPYING.LIB.  If not, write to
   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA
*/

#ifndef LIBPPT_OBJECTS
#define LIBPPT_OBJECTS

#include "ustring.h"
#include <string>
#include <QString>

namespace Libppt
{

class Color
{
public:
  unsigned red, green, blue;
  Color(){ red = green = blue = 0; }
  Color( unsigned r, unsigned g, unsigned b )
    { red = r; green = g; blue = b; }
  Color( const Color& c )
    { red = c.red; green = c.green; blue = c.blue; }
  Color& operator=( const Color& c )
    { red = c.red; green = c.green; blue = c.blue; return *this; }
};

class Object
{
public:
  Object();
  virtual ~Object();

  int id() const;
  void setId( int id );

  virtual bool isText() const { return false; }
  virtual bool isPicture() const { return false; }
  virtual bool isGroup() const { return false; }
  virtual bool isDrawing() const { return false; }

  // all is in mm

  double top() const;
  double left() const;
  double width() const;
  double height() const;
  void setTop( double top );
  void setLeft( double left );
  void setWidth( double width );
  void setHeight( double height );

  bool isBackground() const;
  void setBackground( bool bg );


  bool hasProperty( std::string name );

  void setProperty( std::string name, int value );
  void setProperty( std::string name, double value );
  void setProperty( std::string name, std::string value );
  void setProperty( std::string name, bool value );
  void setProperty( std::string name, Color value );
  void setProperty( std::string name, const char* value )
    { setProperty( name, std::string(value) ); }

  int getIntProperty( std::string name );
  double getDoubleProperty( std::string name );
  bool getBoolProperty( std::string name );
  std::string getStrProperty( std::string name );
  Color getColorProperty(std::string name);

private:
  // no copy or assign
  Object( const Object& );
  Object& operator=( const Object& );

  class Private;
  Private* d;
};

class TextObject: public Object
{
public:

  enum {
    Title       = 0,
    Body        = 1,
    Notes       = 2,
    NotUsed     = 3,
    Other       = 4,  // text in a shape
    CenterBody  = 5,  // subtitle in title slide
    CenterTitle = 6,  // title in title slide
    HalfBody    = 7,  // body in two-column slide
    QuarterBody = 8   // body in four-body slide
  };

  TextObject();
  virtual ~TextObject();
  virtual bool isText() const { return true; }
  unsigned type() const;
  void setType( unsigned type );
  const char* typeAsString() const;

  /**
  * @brief Get a specific line of text
  *
  * @param index Index of the line to get
  * @return line text
  */
  UString text(unsigned int index) const;

  /**
  * @brief Add a new line to this object
  *
  * @param text line to add
  */
  void setText( const UString& text );

  /**
  * @brief Get the amount of lines in this object
  * @return line count
  */
  unsigned int listSize() const;

  /**
  * @brief Checks if bullet flag is applied to specified line
  *
  * Note: only checks if the flag applies to the first character of the
  * specified line. Doesn't check if it applies to the whole line
  */
  bool bulletFlag(unsigned int index) const;

  /**
  * @brief Add a new bullet property to this object
  * @param length for how many characters is the property enabled to.
  * If value is -1 then it is applied to the (rest of the) total length of the
  * text
  * @return newly added bullet property's index
  */
  unsigned addBulletProperty( int length );

  /**
  * @brief Set bullet flag to specific bullet property
  * @param index Index of the bullet property we are setting
  * The specified bullet property must exist.
  * @param value Should there be a bullet
  */
  void setBulletFlag( unsigned int index, bool value );

  /**
  * @brief Set a style name for specific line
  * @param index Index of the line
  * @param name Name of the style for the line
  * Style name is usually generated by KoGenStyles
  */
  void setLineStyleName( unsigned int index, QString name );

  /**
  * @brief Get line' style name
  * @param index Index of the line whose style name to get
  * @return Line's style name
  */
  QString lineStyleName( unsigned int index );

  /**
  * @brief Get bullet's character (the character shown before text in lists)
  * from specified bullet property
  *
  * @param index Index of the bullet property
  * @return bullet's character
  */
  QChar bulletChar ( unsigned int index ) const;

  /**
  * @brief Get bullet's font index
  *
  * @param index Index of the bullet property
  * @return index of the bullet's font
  */
  unsigned int bulletFont( unsigned int index ) const;

  /**
  * @brief Get bullet's size
  *
  * @param index Index of the bullet property
  * @return size of bullets in percents
  */
  unsigned int bulletSize( unsigned int index ) const;

  /**
  * @brief Get bullet color in "#RRGGBB" format
  *
  * @param index Index of the bullet property
  * @return Bullet's color in "#RRGGBB" format
  */
  QString bulletColor( unsigned int index ) const;

  /**
  * @brief Set bullet's character
  *
  * @param index Index of the bullet property
  * @param value Bullet character value from StyleTextPropAtom
  */
  void setBulletChar ( unsigned int index, int value );

  /**
  * @brief Set bullet font's index
  *
  * @param index Index of the bullet property
  * @param value Bullet font value from StyleTextPropAtom
  */
  void setBulletFont( unsigned int index, int value );

  /**
  * @brief Set bullet's color
  *
  * @param index Index of the bullet property
  * @param value Bullet color value from StyleTextPropAtom
  */
  void setBulletColor( unsigned int index, int value );

  /**
  * @brief Set bullet's size
  *
  * @param index Index of the bullet property
  * @param value Bullet size value from StyleTextPropAtom
  */
  void setBulletSize( unsigned int index, int value );

  void convertFrom( Object* object );
private:
  /**
  * @brief Find the text property that applies for specified line index
  * @param index Index of the line we want a text property for
  * @return index of the text proprty or -1 if no applicable was found
  */
  int findTextPropery( unsigned int index ) const;
  // no copy or assign
  TextObject( const TextObject& );
  TextObject& operator=( const TextObject& );

  class Private;
  Private* d;
};

class GroupObject: public Object
{
public:
  GroupObject();
  virtual ~GroupObject();
  virtual bool isGroup() const { return true; }
  unsigned objectCount() const;
  Object* object( unsigned index );
  void addObject( Object* object );
  void takeObject( Object* object );

private:
  // no copy or assign
  GroupObject( const GroupObject& );
  GroupObject& operator=( const GroupObject& );

  class Private;
  Private* d;

};

class DrawObject: public Object
{
public:

  enum {
    None = 0,
    Rectangle,
    RoundRectangle,
    Circle,
    Ellipse,
    Diamond,
    RightArrow,
    LeftArrow,
    UpArrow,
    DownArrow,
    IsoscelesTriangle,
    RightTriangle,
    Parallelogram,
    Trapezoid,
    Hexagon,
    Octagon,
    Line,
    Smiley,
    Heart,
    FreeLine,
    PictureFrame
  };

  DrawObject();
  virtual ~DrawObject();
  virtual bool isDrawing() const { return true; }

  unsigned shape() const;
  void setShape( unsigned s );

  bool isVerFlip() const;
  void setVerFlip( bool vFlip );
  bool isHorFlip() const;
  void setHorFlip( bool hFlip );
  /**
  * @brief Set this DrawObject's style name
  *
  * @param name Style name
  */
  void setStyleName( const QString &name );

  /**
  * @brief Get this DrawObject's style name
  *
  * @return Style name
  */
  QString styleName() const;

private:
  // no copy or assign
  DrawObject( const DrawObject& );
  DrawObject& operator=( const DrawObject& );

  class Private;
  Private* d;
};

/**
* @brief A very simple class to hold basic information about fonts
*
*/
class TextFont {
public:
  TextFont();
  TextFont(const TextFont &source);
  TextFont(const UString &fontName,
           int charset,
           int clipPrecision,
           int quality,
           int pitchAndFamily);

  ~TextFont();

  /**
  * @brief Get Font's family name
  * @return font's family name
  */
  UString name() const;

  /**
  * @brief Get font's charset
  * See http://msdn.microsoft.com/en-us/library/dd145037(VS.85).aspx
  * for more information
  * @return font's charset
  */
  int charset() const;

  /**
  * @brief Get font's clip precision
  * See http://msdn.microsoft.com/en-us/library/dd145037(VS.85).aspx
  * for more information
  * @return font's clip precision
  */
  int clipPrecision() const;

  /**
  * @brief Get font's quality
  * See http://msdn.microsoft.com/en-us/library/dd145037(VS.85).aspx
  * for more information
  * @return font's quality
  */
  int quality() const;

  /**
  * @brief Get font's pitch and family
  * See http://msdn.microsoft.com/en-us/library/dd145037(VS.85).aspx
  * for more information
  * @return font's pitch and family
  */
  int pitchAndFamily() const;
private:
  class Private;
  Private* d;
};

/**
* @brief Text Font Collection
*
* Simple class to hold TextFont information
*/
class TextFontCollection {
public:
  TextFontCollection();
  ~TextFontCollection();

  /**
  * @brief Get the amount of fonts held by this collection
  * @return amount of fonts held by this collection
  */
  unsigned int listSize() const;

  /**
  * @brief add new font to the collection
  * @param font new font to add
  */
  void addFont(const TextFont &font);

  /**
  * @brief Get a specific font
  * @param index Index of the font to get
  * @return specified font
  */
  const TextFont getFont(unsigned index) const;
private:
  class Private;
  Private* d;
};

}

#endif /* LIBPPT_OBJECTS */
