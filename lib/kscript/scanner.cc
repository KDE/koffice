#line 2 "scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 106
#define YY_END_OF_BUFFER 107
static yyconst short int yy_acclist[340] =
    {   0,
      107,  105,  106,    1,  105,  106,    2,  106,    1,  105,
      106,   35,  105,  106,  105,  106,  105,  106,   59,  105,
      106,   44,  105,  106,   49,  105,  106,  105,  106,   28,
      105,  106,   29,  105,  106,   42,  105,  106,   40,  105,
      106,   31,  105,  106,   41,  105,  106,   55,  105,  106,
       43,  105,  106,  101,  105,  106,  100,  105,  106,   30,
      105,  106,   32,  105,  106,   53,  105,  106,   36,  105,
      106,   54,  105,  106,   94,  105,  106,   94,  105,  106,
       94,  105,  106,   26,  105,  106,   27,  105,  106,   48,
      105,  106,   94,  105,  106,   94,  105,  106,   94,  105,

      106,   94,  105,  106,   94,  105,  106,   94,  105,  106,
       94,  105,  106,   94,  105,  106,   94,  105,  106,   94,
      105,  106,   94,  105,  106,   94,  105,  106,   94,  105,
      106,   24,  105,  106,   47,  105,  106,   25,  105,  106,
       45,  105,  106,   34,  104,    6,    4,   58,   50,   91,
       56,   92,   57,   98,    3,16393,  101,  102,  100,   93,
       39,   51,   37,   33,   52,   38,   10,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   75,   94,   94,   94,
       94,   94,   94,   94,   77,   94,   94,   70,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   46,

        4,   10,  103,   16,   19,   18,   21,   17,   22,   14,
       23,   15,   20,16393,    3, 8201, 8201,    3,    3,   97,
       96,  102,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   76,   94,   94,   94,   94,
       94,   71,   94,   94,   94,   94,   94,   94,   94,   87,
       94,   85,   94,   94,   11,   99,   96,    8,   94,   62,
       94,   67,   94,   94,   94,   94,   94,   94,   78,   94,
       83,   94,   69,   94,   94,   94,   90,   94,   94,   94,
       79,   94,   94,   94,   94,   94,   94,   64,   94,   94,
       95,   13,   61,   94,   88,   94,   72,   94,   60,   94,

       94,   94,   94,   94,   94,   86,   94,   89,   94,   94,
       94,   94,   94,   74,   94,    7,   94,   73,   94,   63,
       94,   94,   84,   94,   81,   94,   82,   94,   65,   94,
       66,   94,   12,   68,   94,   80,   94,    5,    6
    } ;

static yyconst short int yy_accept[287] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   17,
       19,   22,   25,   28,   30,   33,   36,   39,   42,   45,
       48,   51,   54,   57,   60,   63,   66,   69,   72,   75,
       78,   81,   84,   87,   90,   93,   96,   99,  102,  105,
      108,  111,  114,  117,  120,  123,  126,  129,  132,  135,
      138,  141,  144,  144,  144,  145,  145,  146,  146,  146,
      147,  148,  148,  148,  149,  150,  150,  150,  151,  152,
      153,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  155,  155,  157,  157,  157,  158,  158,  158,
      159,  160,  161,  162,  163,  164,  165,  165,  166,  167,

      167,  169,  170,  171,  172,  173,  174,  175,  176,  177,
      179,  180,  181,  182,  183,  184,  185,  187,  188,  190,
      191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
      201,  201,  201,  201,  201,  202,  202,  203,  204,  204,
      204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
      214,  214,  215,  217,  218,  219,  220,  221,  221,  222,
      223,  223,  223,  223,  223,  224,  225,  226,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  238,  239,
      240,  241,  242,  244,  245,  246,  247,  248,  249,  250,
      252,  254,  255,  255,  256,  256,  256,  256,  256,  256,

      256,  257,  257,  257,  258,  258,  259,  259,  259,  259,
      259,  260,  262,  264,  265,  266,  267,  268,  269,  271,
      273,  275,  276,  277,  279,  280,  281,  283,  284,  285,
      286,  287,  288,  290,  291,  291,  291,  291,  291,  291,
      291,  292,  292,  292,  292,  292,  293,  295,  297,  299,
      301,  302,  303,  304,  305,  306,  308,  310,  311,  312,
      313,  314,  316,  316,  316,  316,  316,  317,  317,  318,
      320,  322,  323,  325,  327,  329,  331,  333,  333,  334,
      334,  336,  338,  338,  340,  340
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   30,   30,   31,   32,
       33,   33,   33,   33,   33,   34,   33,   33,   33,   33,
       33,   35,   36,   37,   38,   33,   33,   39,   33,   33,
       40,   41,   42,   43,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   33,   33,   54,   55,   56,
       57,   58,   33,   59,   60,   61,   62,   63,   64,   65,
       66,   33,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    2,    2,    3,    3,    4,    1,    5,    1,    1,
        6,    7,    1,    1,    1,    1,    1,    7,    1,    8,
        8,    9,   10,    1,    1,    1,    1,    4,   11,   11,
       11,   11,   12,   12,   12,   12,   12,   12,   13,    1,
        4,    1,    1,   14,   15,   15,   11,   11,   11,   15,
       12,   12,   12,   12,   12,   13,   12,   12,   13,   12,
       13,   12,   13,   12,   13,   12,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[309] =
    {   0,
        0,    0,  821,  937,  937,  937,  805,  783,   65,   69,
      764,  937,  797,  763,  937,  937,  937,   58,  937,  111,
       55,   59,   74,   60,  779,  937,   60,   62,   63,   99,
      125,   62,  937,  937,  937,    0,   81,   85,   95,  107,
      124,   64,   54,   73,  128,   72,  111,  115,  937,  733,
      937,  937,  795,  791,  937,  142,  937,  152,  794,  937,
      792,  138,  174,  937,  937,  766,  164,  937,  937,  937,
      937,  763,  762,  761,  760,  758,  756,  753,  749,  748,
      747,  178,  136,  229,  755,  166,  139,  280,  300,  341,
      286,  937,  937,  937,  937,  937,  299,  937,  937,  185,

      306,  728,    0,   83,  164,  161,  179,  172,  280,  721,
      273,  283,  275,  284,  285,  295,  713,  302,  310,  287,
      294,  303,  313,  306,  318,  312,  314,  319,  329,  937,
      731,  373,  363,    0,  735,  351,  190,  937,  205,    0,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      385,  732,  407,  937,    0,    0,  407,  377,  420,    0,
      432,  334,  691,  698,  439,   79,  335,  390,  356,  408,
      424,  416,  417,  423,  425,  426,  428,  429,  430,  434,
      339,  431,  642,  435,  436,  438,  440,  442,  441,  639,
      635,  450,  479,  485,  476,  512,  470,  499,  650,  491,

      494,  656,  507,  515,  490,  937,  656,  504,  650,  518,
      517,  626,  625,  518,  496,  520,  501,  521,  624,  623,
      622,  522,  523,  621,  320,  525,  619,  526,  535,  538,
      537,  542,  618,  536,  638,  566,  567,  108,  634,  556,
      570,  555,  560,  641,  577,  582,  614,  611,  610,  608,
      551,  564,  566,  559,  558,  607,  604,  571,  580,  581,
      583,  603,  623,  603,  611,  597,  937,  623,  588,  464,
      460,  589,  451,  363,  194,  191,  190,  600,  608,  212,
      185,  129,   95,  937,  937,  654,  669,  684,  689,  704,
      719,  732,  740,  751,  763,  778,  790,  803,  811,  819,

      834,  844,  855,  865,  880,  891,  906,  921
    } ;

static yyconst short int yy_def[309] =
    {   0,
      285,    1,  285,  285,  285,  285,  286,  285,  287,  288,
      289,  285,  285,  290,  285,  285,  285,  285,  285,  285,
      285,  291,  286,   23,  285,  285,  285,  285,  285,  292,
      292,   31,  285,  285,  285,  293,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,  285,  285,
      285,  285,  286,  294,  285,  287,  285,  295,  288,  285,
      296,  288,  289,  285,  285,  285,  297,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  291,  285,  291,  285,   23,   23,  286,  286,
       23,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      298,   31,  293,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,  285,
      294,  294,  287,  299,  296,  288,  285,  285,  285,  300,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  301,   84,  285,   84,  153,  285,  285,  286,   90,
      285,  302,  285,  303,  298,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,  285,  285,  287,  287,  288,  285,  304,  285,

      285,  301,  285,  285,  302,  285,  302,  305,  303,  303,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,  306,  287,  287,  288,  285,  285,
      285,  305,  307,  305,  285,  285,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,  306,  306,  288,  307,  285,  307,   31,   31,
       31,   31,   31,   31,   31,   31,   31,  285,  285,  308,
       31,   31,  308,  285,    0,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  285,  285
    } ;

static yyconst short int yy_nxt[1008] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   25,   26,   27,   28,   29,    4,   30,   30,
       30,   31,   30,   30,   30,   30,   32,   30,   30,   33,
        4,   34,   35,   36,   30,   30,   37,   38,   39,   40,
       30,   30,   41,   30,   42,   30,   43,   30,   44,   45,
       46,   30,   47,   48,   30,   30,   49,   50,   51,   52,
       57,   60,   68,   61,   82,   82,   82,   84,   54,   91,
       91,   91,  102,   69,   93,   94,   95,   96,   98,   99,
      102,   86,  102,   87,   87,   88,  105,  284,   53,   85,

      102,  102,   53,   54,   89,   58,  100,  102,  120,  102,
       60,  102,   90,  102,  211,  121,  166,  122,  101,  101,
      101,  123,   89,  102,   53,  106,   62,   70,   53,   54,
      127,   97,  100,  109,  107,  102,   71,  108,   90,  102,
       60,  110,  103,  102,  101,  101,  101,   57,  111,  112,
      113,  114,  102,  104,  152,  128,  102,  102,   72,   73,
       74,   75,  265,  115,   76,  116,  129,   77,  103,   78,
       79,  133,  133,  117,   80,   81,   85,   53,  118,  119,
      124,  100,   58,  139,  139,  157,  157,  157,  125,  102,
      134,  126,  102,  137,  137,  137,  136,   82,   82,   82,

      102,  167,  140,   53,  137,  137,  137,  102,  151,  137,
      137,  137,  164,  102,  284,  138,  134,  285,  102,  102,
      168,  169,  102,  170,  198,  198,  151,  171,  140,  153,
      153,  154,  155,  153,  153,  153,  153,  153,  153,  153,
      156,  153,  153,  153,  153,  153,  156,  153,  156,  156,
      156,  153,  153,  153,  153,  153,  153,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  153,  153,
      153,  153,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  153,  153,  153,  153,   88,

       88,  102,  161,  102,   54,   91,   91,   91,  102,   53,
       54,  102,  102,  102,  158,  102,  158,  162,   53,  159,
      159,  159,  102,  102,   53,  101,  101,  101,  164,  172,
      102,  102,  174,  173,  102,  175,  176,  177,  102,  182,
      102,  102,  102,  178,   53,   54,  102,  102,  102,  103,
       53,  179,  206,   60,  183,  184,  186,  102,  163,  180,
      160,  160,  160,  102,  188,  212,  181,  102,   57,  160,
      160,  160,  160,  185,  207,  189,  187,  191,  255,  190,
      193,  192,  195,  195,  102,  160,  160,  160,  160,  160,
      160,  102,  194,  194,  194,  197,  204,  204,  204,  200,

      226,  200,  214,   58,  201,  201,  201,  156,  156,  285,
      156,  156,  156,  156,  156,  156,  156,  156,  102,  156,
      156,  156,  156,  156,   54,  156,  157,  157,  157,  156,
      156,  156,  156,  156,  156,  161,  102,  203,  213,  159,
      159,  159,   53,   54,  102,  102,  156,  156,  156,  156,
      162,  102,  102,  102,  102,  203,  102,  102,  102,  102,
      217,  285,  102,  102,  102,  218,  102,  215,  102,  102,
      102,  219,   60,  156,  156,  156,  156,  223,  102,  102,
      221,   57,  103,  216,  224,  220,  227,  222,  102,  233,
      225,  163,  102,  230,  228,  236,  236,  229,  194,  194,

      194,  231,  232,  234,  194,  194,  194,  235,  206,  138,
      201,  201,  201,  201,  201,  201,   58,   57,   66,   66,
      238,  240,  243,  240,  102,  245,  241,  241,  241,  102,
      207,  237,  237,  237,  204,  204,  204,  246,  246,  246,
      237,  237,  237,  237,  244,  102,  102,  247,  102,  102,
      102,  102,   58,  102,  102,  249,  237,  237,  237,  237,
      237,  237,  251,  102,  102,  102,  102,  254,  253,  248,
      102,   57,   57,  243,  257,  241,  241,  241,  267,  102,
      250,  252,  259,  260,  262,  256,  102,  102,  261,  241,
      241,  241,  102,  258,  102,  244,  246,  246,  246,  102,

      268,  246,  246,  246,  269,  272,   58,   58,  102,  102,
      278,  102,  270,   60,  271,  267,  102,  102,  273,  279,
      279,  279,  279,  279,  279,  285,  274,  279,  279,  279,
      285,  102,  102,  275,  277,  102,  102,  268,  102,  102,
      282,  276,  102,  285,  138,  263,  102,  102,  281,  102,
      102,  102,  102,  102,  102,  280,   53,  285,  285,  202,
      138,   53,   53,  102,   53,   53,   53,  102,   53,   56,
      102,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   63,

       63,   63,   63,   63,   66,  209,   66,   66,   66,  208,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  102,  202,  102,   60,  285,  102,
      102,  102,  102,  102,  102,  102,  102,  103,  103,  102,
      103,  103,  103,  103,  103,  132,  102,  285,  150,  149,
      148,  132,  132,  132,  147,  132,   56,  146,   56,  145,
       56,  144,  143,  142,  141,   56,  138,   56,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,   66,   60,   66,   60,   66,  131,   54,

      130,   92,   66,   67,   66,  165,   65,   64,   55,   54,
      165,  165,  165,  165,  165,  165,  165,  165,  196,  196,
      285,  196,  285,  285,  285,  196,  199,  199,  285,  199,
      285,  285,  285,  199,  154,  154,  154,  154,  154,  154,
      285,  285,  285,  154,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  210,
      285,  285,  285,  285,  285,  210,  210,  210,  285,  210,
      239,  285,  239,  239,  285,  239,  285,  285,  285,  239,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  264,  285,  285,  285,  285,

      285,  264,  264,  264,  285,  264,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,    3,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  285
    } ;

static yyconst short int yy_chk[1008] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        9,   10,   18,   10,   21,   21,   21,   22,   23,   24,
       24,   24,   43,   18,   27,   27,   27,   28,   29,   29,
       32,   23,   42,   23,   23,   23,   32,  283,   24,   22,

       46,   44,   30,   30,   23,    9,   30,  166,   42,   37,
      238,  104,   23,   38,  166,   43,  104,   44,   30,   30,
       30,   44,   23,   39,   24,   37,   10,   20,   31,   31,
       46,   28,   31,   38,   37,   40,   20,   37,   23,   47,
       62,   38,   30,   48,   31,   31,   31,   56,   39,   39,
       39,   40,   41,   31,   83,   47,   45,  282,   20,   20,
       20,   20,  238,   40,   20,   40,   48,   20,   31,   20,
       20,   58,   58,   41,   20,   20,   83,   87,   41,   41,
       45,   63,   56,   67,   67,   86,   86,   86,   45,  106,
       58,   45,  105,   63,   63,   63,   62,   82,   82,   82,

      108,  105,   67,   87,  100,  100,  100,  107,   82,  137,
      137,  137,  137,  281,  280,  139,   58,   63,  277,  276,
      106,  106,  275,  107,  139,  139,   82,  108,   67,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   88,

       88,  111,   97,  113,   89,   91,   91,   91,  109,  101,
      101,  112,  114,  115,   89,  120,   89,   97,   88,   89,
       89,   89,  121,  116,   91,  101,  101,  101,  101,  109,
      118,  122,  111,  109,  124,  112,  113,  114,  119,  120,
      126,  123,  127,  115,   88,   90,  125,  128,  225,  101,
       91,  116,  162,  136,  121,  122,  124,  129,   97,  118,
       90,   90,   90,  167,  126,  167,  119,  181,  133,   90,
       90,   90,   90,  123,  162,  127,  125,  128,  225,  127,
      132,  129,  133,  133,  169,   90,   90,   90,   90,   90,
       90,  274,  132,  132,  132,  136,  158,  158,  158,  151,

      181,  151,  169,  133,  151,  151,  151,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  168,  153,
      153,  153,  153,  153,  159,  153,  157,  157,  157,  153,
      153,  153,  153,  153,  153,  161,  170,  157,  168,  159,
      159,  159,  165,  165,  172,  173,  153,  153,  153,  153,
      161,  174,  171,  175,  176,  157,  177,  178,  179,  182,
      172,  165,  180,  184,  185,  173,  186,  170,  187,  189,
      188,  174,  197,  153,  153,  153,  153,  178,  192,  273,
      176,  195,  165,  171,  179,  175,  182,  177,  271,  189,
      180,  161,  270,  186,  184,  195,  195,  185,  193,  193,

      193,  187,  188,  192,  194,  194,  194,  194,  205,  198,
      200,  200,  200,  201,  201,  201,  195,  196,  198,  198,
      197,  203,  208,  203,  215,  210,  203,  203,  203,  217,
      205,  196,  196,  196,  204,  204,  204,  210,  210,  210,
      196,  196,  196,  196,  208,  211,  214,  211,  216,  218,
      222,  223,  196,  226,  228,  215,  196,  196,  196,  196,
      196,  196,  217,  229,  234,  231,  230,  223,  222,  214,
      232,  236,  237,  242,  228,  240,  240,  240,  243,  251,
      216,  218,  230,  231,  234,  226,  255,  254,  232,  241,
      241,  241,  252,  229,  253,  242,  245,  245,  245,  258,

      243,  246,  246,  246,  251,  254,  236,  237,  259,  260,
      264,  261,  252,  265,  253,  266,  269,  272,  255,  278,
      278,  278,  264,  264,  264,  268,  258,  279,  279,  279,
      263,  262,  257,  259,  261,  256,  250,  266,  249,  248,
      272,  260,  247,  244,  239,  235,  233,  227,  269,  224,
      221,  220,  219,  213,  212,  265,  286,  209,  207,  202,
      199,  286,  286,  191,  286,  286,  286,  190,  286,  287,
      183,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  289,

      289,  289,  289,  289,  290,  164,  290,  290,  290,  163,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  292,  152,  292,  135,  131,  292,
      292,  117,  292,  292,  292,  292,  292,  293,  293,  110,
      293,  293,  293,  293,  293,  294,  102,   85,   81,   80,
       79,  294,  294,  294,   78,  294,  295,   77,  295,   76,
      295,   75,   74,   73,   72,  295,   66,  295,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  297,   61,  297,   59,  297,   54,   53,

       50,   25,  297,   14,  297,  298,   13,   11,    8,    7,
      298,  298,  298,  298,  298,  298,  298,  298,  299,  299,
        3,  299,    0,    0,    0,  299,  300,  300,    0,  300,
        0,    0,    0,  300,  301,  301,  301,  301,  301,  301,
        0,    0,    0,  301,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  303,
        0,    0,    0,    0,    0,  303,  303,  303,    0,  303,
      304,    0,  304,  304,    0,  304,    0,    0,    0,  304,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  306,    0,    0,    0,    0,

        0,  306,  306,  306,    0,  306,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  285
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.ll"
#define INITIAL 0
#line 2 "scanner.ll"

#define YY_NO_UNPUT
#include <stdlib.h>
#include <ctype.h>

#include "kscript_parsenode.h"
#include "kscript_types.h"
#include "kscript_synext.h"

#ifndef KDE_USE_FINAL
#include "yacc.cc.h"
#endif

extern int idl_line_no;

static bool s_kspread;

#include <qstring.h>

static KScript::Long ascii_to_longlong( long base, const char *s )
{
  KScript::Long ll = 0;
  while( *s != '\0' ) {
    char c = *s++;
    if( c >= 'a' )
      c -= 'a' - 'A';
    c -= '0';
    if( c > 9 )
      c -= 'A' - '0' - 10;
    ll = ll * base + c;
  }
  return ll;
}

static KScript::Double ascii_to_longdouble (const char *s)
{
  KScript::Double d;
#ifdef HAVE_SCANF_LF
  sscanf (s, "%Lf", &d);
#else
  /*
   * this is only an approximation and will probably break fixed<>
   * parameter calculation on systems where
   * sizeof(double) < sizeof(long double). but fortunately all
   * systems where scanf("%Lf") is known to be broken (Linux/Alpha
   * and HPUX) have sizeof(double) == sizeof(long double).
   */
  d = strtod (s, NULL);
#endif
  return d;
}

static char translate_char( const char *s )
{
  char c = *s++;

  if( c != '\\' )
    return c;
  c = *s++;
  switch( c ) {
  case 'n':
    return '\n';
  case 't':
    return '\t';
  case 'v':
    return '\v';
  case 'b':
    return '\b';
  case 'r':
    return '\r';
  case 'f':
    return '\f';
  case 'a':
    return '\a';
  case '\\':
    return '\\';
  case '?':
    return '\?';
  case '\'':
    return '\'';
  case '"':
    return '"';
  case 'x':
  case 'X':
    return (char) ascii_to_longlong( 16, s );
  default:
    // Gotta be an octal
    return (char) ascii_to_longlong( 8, s );
  }
}

static QChar translate_unichar( const QChar *s )
{
  QChar c = *s++;

  if( c != '\\' )
    return c;
  c = *s++;
  switch( c.latin1() ) {
  case 'n':
    return '\n';
  case 't':
    return '\t';
  case 'v':
    return '\v';
  case 'b':
    return '\b';
  case 'r':
    return '\r';
  case 'f':
    return '\f';
  case 'a':
    return '\a';
  case '\\':
    return '\\';
  case '?':
    return '\?';
  case '\'':
    return '\'';
  case '"':
    return '"';
  default:
    return c;
  }
}

static void translate_string( QString& str )
{
	int pos = 0;
	while( ( pos = str.find( '\\', pos ) ) != -1 )
	{
		QChar ch = translate_unichar( str.unicode() + pos );
		str.replace( pos, 2, &ch, 1 );
	}
}

/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
#line 883 "scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 171 "scanner.ll"


#line 1037 "scanner.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 286 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 285 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 173 "scanner.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 174 "scanner.ll"
idl_line_no++;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 175 "scanner.ll"
;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 176 "scanner.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 177 "scanner.ll"
{
			  yylval._str = new QString( yytext );
                          idl_line_no++;
                          return T_PRAGMA;
                        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 182 "scanner.ll"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 184 "scanner.ll"
{
						  const char *c = yytext + 2;
						  while( isspace( *c ) ) ++c;
						  ++c; ++c;
			 			  yylval._str = new QString( c );
						  yylval._str->truncate( yylval._str->length() - 1 );
						  return T_SUBST;
						}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 192 "scanner.ll"
{
						  const char *c = yytext + 2;
						  while( isspace( *c ) ) ++c;
						  ++c;
			 			  yylval._str = new QString( c );
						  yylval._str->truncate( yylval._str->length() - 1 );
						  return T_MATCH;
						}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 200 "scanner.ll"
{
			 			  yylval._str = new QString( yytext + 1 );
						  yylval._str->truncate( yylval._str->length() - 1 );
						  return T_MATCH_LINE;
						}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 206 "scanner.ll"
{
			  if ( !s_kspread )
			  {
			  	yylval.ident = new QString( yytext );
			  	return T_IDENTIFIER;
			  }
                          yylval._str = new QString( yytext );
			  return T_CELL;
		       };
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 216 "scanner.ll"
{
			  if ( !s_kspread )
			  {
			  	yylval.ident = new QString( yytext );
			  	return T_IDENTIFIER;
			  }
                          yylval._str = new QString( yytext );
			  return T_CELL;
		       };
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 226 "scanner.ll"
{
			  if ( !s_kspread )
			  {
			  	yylval.ident = new QString( yytext );
			  	return T_IDENTIFIER;
			  }
                          yylval._str = new QString( yytext );
			  return T_RANGE;
		       };
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 236 "scanner.ll"
{
			  if ( !s_kspread )
			  {
			  	yylval.ident = new QString( yytext );
			  	return T_IDENTIFIER;
			  }
                          yylval._str = new QString( yytext );
			  return T_RANGE;
		       };
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 246 "scanner.ll"
{
				yylval._str = new QString("r");
				return T_FILE_OP;
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 250 "scanner.ll"
{
				yylval._str = new QString("w");
				return T_FILE_OP;
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 254 "scanner.ll"
{
				yylval._str = new QString("d");
				return T_FILE_OP;
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 258 "scanner.ll"
{
				yylval._str = new QString("l");
				return T_FILE_OP;
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 262 "scanner.ll"
{
				yylval._str = new QString("f");
				return T_FILE_OP;
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 266 "scanner.ll"
{
				yylval._str = new QString("e");
				return T_FILE_OP;
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 270 "scanner.ll"
{
				yylval._str = new QString("x");
				return T_FILE_OP;
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 274 "scanner.ll"
{
				yylval._str = new QString("g");
				return T_FILE_OP;
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 278 "scanner.ll"
{
				yylval._str = new QString("o");
				return T_FILE_OP;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 282 "scanner.ll"
{
				yylval._str = new QString("s");
				return T_FILE_OP;
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 287 "scanner.ll"
return T_LEFT_CURLY_BRACKET;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 288 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 289 "scanner.ll"
return T_LEFT_SQUARE_BRACKET;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 290 "scanner.ll"
return T_RIGHT_SQUARE_BRACKET;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 291 "scanner.ll"
return T_LEFT_PARANTHESIS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 292 "scanner.ll"
return T_RIGHT_PARANTHESIS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 293 "scanner.ll"
return T_COLON;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 294 "scanner.ll"
return T_COMMA;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 295 "scanner.ll"
return T_SEMICOLON;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 296 "scanner.ll"
return T_EQUAL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 297 "scanner.ll"
return T_NOTEQUAL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 298 "scanner.ll"
return T_NOT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 299 "scanner.ll"
return T_ASSIGN;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 300 "scanner.ll"
return T_INPUT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 301 "scanner.ll"
return T_SHIFTRIGHT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 302 "scanner.ll"
return T_SHIFTLEFT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 303 "scanner.ll"
return T_PLUS_SIGN;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 304 "scanner.ll"
return T_MINUS_SIGN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 305 "scanner.ll"
return T_ASTERISK;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 306 "scanner.ll"
return T_SOLIDUS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 307 "scanner.ll"
return T_PERCENT_SIGN;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 308 "scanner.ll"
return T_TILDE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 309 "scanner.ll"
return T_OR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 310 "scanner.ll"
return T_VERTICAL_LINE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 311 "scanner.ll"
return T_CIRCUMFLEX;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 312 "scanner.ll"
return T_AMPERSAND;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 313 "scanner.ll"
return T_AND;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 314 "scanner.ll"
return T_LESS_OR_EQUAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 315 "scanner.ll"
return T_GREATER_OR_EQUAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 316 "scanner.ll"
return T_LESS_THAN_SIGN;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 317 "scanner.ll"
return T_GREATER_THAN_SIGN;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 318 "scanner.ll"
return T_MEMBER;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 319 "scanner.ll"
return T_PLUS_ASSIGN;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 320 "scanner.ll"
return T_MINUS_ASSIGN;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 321 "scanner.ll"
return T_LINE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 322 "scanner.ll"
return T_DOLLAR;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 324 "scanner.ll"
return T_CONST;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 325 "scanner.ll"
return T_FALSE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 326 "scanner.ll"
return T_TRUE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 327 "scanner.ll"
return T_FALSE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 328 "scanner.ll"
return T_TRUE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 329 "scanner.ll"
return T_STRUCT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 330 "scanner.ll"
return T_SWITCH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 331 "scanner.ll"
return T_CASE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 332 "scanner.ll"
return T_DEFAULT;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 333 "scanner.ll"
return T_ENUM;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 334 "scanner.ll"
return T_IN;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 335 "scanner.ll"
return T_OUT;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 336 "scanner.ll"
return T_CLASS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 337 "scanner.ll"
return T_DELETE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 338 "scanner.ll"
return T_WHILE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 339 "scanner.ll"
return T_DO;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 340 "scanner.ll"
return T_FOR;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 341 "scanner.ll"
{
				if ( !s_kspread )
					return T_IF;
			  	yylval.ident = new QString( yytext );
			  	return T_IDENTIFIER;
			}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 347 "scanner.ll"
return T_ELSE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 348 "scanner.ll"
return T_MAIN;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 349 "scanner.ll"
return T_FOREACH;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 350 "scanner.ll"
return T_RETURN;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 351 "scanner.ll"
return T_SIGNAL;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 352 "scanner.ll"
return T_EMIT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 353 "scanner.ll"
return T_IMPORT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 354 "scanner.ll"
return T_VAR;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 355 "scanner.ll"
return T_INOUT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 356 "scanner.ll"
return T_TRY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 357 "scanner.ll"
return T_CATCH;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 358 "scanner.ll"
return T_RAISE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 359 "scanner.ll"
return T_FROM;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 361 "scanner.ll"
return T_INCR;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 362 "scanner.ll"
return T_DECR;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 363 "scanner.ll"
return T_SCOPE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 367 "scanner.ll"
{
			  yylval.ident = new QString( yytext );
			  return T_IDENTIFIER;
			}
	YY_BREAK
case 95:
#line 372 "scanner.ll"
case 96:
#line 373 "scanner.ll"
case 97:
#line 374 "scanner.ll"
case 98:
#line 375 "scanner.ll"
case 99:
YY_RULE_SETUP
#line 375 "scanner.ll"
{
			  yylval._float = ascii_to_longdouble( yytext );
			  return T_FLOATING_PT_LITERAL;
			}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 379 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 10, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 383 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 8, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 387 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 16, yytext + 2 );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 391 "scanner.ll"
{
                          QCString s( yytext );
	                  s = s.mid( 1, s.length() - 2 );
			  yylval._char = translate_char( s );
			  return T_CHARACTER_LITERAL;
			}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 397 "scanner.ll"
{
                          QString s( yytext );
                          yylval._str = new QString( s.mid( 1, s.length() - 2 ) );
			  if ( yylval._str->isNull() )
				*(yylval._str) = "";
			  translate_string( *(yylval._str) );
			  return T_STRING_LITERAL;
			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 405 "scanner.ll"
{
                          return T_UNKNOWN;
                        }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 409 "scanner.ll"
ECHO;
	YY_BREAK
#line 1777 "scanner.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 286 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 286 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 285);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 409 "scanner.ll"


void kscriptInitFlex( const char *_code, int extension )
{
   if ( extension == KSCRIPT_EXTENSION_KSPREAD )
	s_kspread = TRUE;
   else
	s_kspread = FALSE;
   yy_switch_to_buffer( yy_scan_string( _code ) );
}
